
MPU 6050 Driver Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007528  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  080076b8  080076b8  000086b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aa0  08007aa0  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007aa0  08007aa0  00008aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007aa8  08007aa8  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aa8  08007aa8  00008aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007aac  08007aac  00008aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007ab0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001d4  08007c84  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08007c84  00009444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca45  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d6e  00000000  00000000  00015c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  000179b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000080c  00000000  00000000  00018420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c1cd  00000000  00000000  00018c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eedd  00000000  00000000  00034df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f5aa  00000000  00000000  00043cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3280  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b88  00000000  00000000  000e32c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000e6e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080076a0 	.word	0x080076a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080076a0 	.word	0x080076a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <MPU6050_Init>:

/*
 * INITIALIZATION
 */

uint8_t MPU6050_Init(MPU6050* device, I2C_HandleTypeDef* i2c_handle) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]

	// Set struct parameters
	device->i2c_handle = i2c_handle;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	683a      	ldr	r2, [r7, #0]
 8000c56:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 3; i++) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	e012      	b.n	8000c84 <MPU6050_Init+0x3c>
		device->acc_g[i] = 0.0f;
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	3304      	adds	r3, #4
 8000c68:	f04f 0200 	mov.w	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
		device->gyr_dps[i] = 0.0f;
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	3304      	adds	r3, #4
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	f04f 0200 	mov.w	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3301      	adds	r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	dde9      	ble.n	8000c5e <MPU6050_Init+0x16>
	}

	device->temp_C = 0.0f;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f04f 0200 	mov.w	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]

	// Store number of transaction errors ( to be returned at the end of the function )
	uint8_t err_num = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status;

	// Check WHO_AM_I register (RM p.46)
	uint8_t reg_data;

	status = MPU6050_ReadRegister(device, MPU6050_REG_WHO_AM_I, &reg_data);
 8000c96:	f107 0309 	add.w	r3, r7, #9
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	2175      	movs	r1, #117	@ 0x75
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f000 f9a8 	bl	8000ff4 <MPU6050_ReadRegister>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	72bb      	strb	r3, [r7, #10]
	err_num += (status != HAL_OK);
 8000ca8:	7abb      	ldrb	r3, [r7, #10]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	bf14      	ite	ne
 8000cae:	2301      	movne	r3, #1
 8000cb0:	2300      	moveq	r3, #0
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	7afb      	ldrb	r3, [r7, #11]
 8000cb8:	4413      	add	r3, r2
 8000cba:	72fb      	strb	r3, [r7, #11]

	if (reg_data != WHO_AM_I)	return 255;
 8000cbc:	7a7b      	ldrb	r3, [r7, #9]
 8000cbe:	2b68      	cmp	r3, #104	@ 0x68
 8000cc0:	d001      	beq.n	8000cc6 <MPU6050_Init+0x7e>
 8000cc2:	23ff      	movs	r3, #255	@ 0xff
 8000cc4:	e093      	b.n	8000dee <MPU6050_Init+0x1a6>

	// CONFIG : Set external Frame Synchronization (FSYNC) and Digital Low Pass Filter (DLPF)
	// FSYNC input disabled, Accelerometer : 184Hz bandwidth, 2.0ms delay, Gyroscope : 188Hz bandwidth, 1.9ms delay, 1kHz Fs
	reg_data = 0x01;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	727b      	strb	r3, [r7, #9]

	status = MPU6050_WriteRegister(device, MPU6050_REG_CONFIG, &reg_data);
 8000cca:	f107 0309 	add.w	r3, r7, #9
 8000cce:	461a      	mov	r2, r3
 8000cd0:	211a      	movs	r1, #26
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f000 f9c8 	bl	8001068 <MPU6050_WriteRegister>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	72bb      	strb	r3, [r7, #10]
	err_num += (status != HAL_OK);
 8000cdc:	7abb      	ldrb	r3, [r7, #10]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	bf14      	ite	ne
 8000ce2:	2301      	movne	r3, #1
 8000ce4:	2300      	moveq	r3, #0
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	461a      	mov	r2, r3
 8000cea:	7afb      	ldrb	r3, [r7, #11]
 8000cec:	4413      	add	r3, r2
 8000cee:	72fb      	strb	r3, [r7, #11]

	// GRYO_CONFIG : Enable gyroscope self-test (XG_ST, YG_ST, ZG_ST) and set full scale range (FS_SEL)
	// Self-tests are disabled [ MOMENTARILY ], full scale range +- 500 deg/s
	reg_data = 0x08;
 8000cf0:	2308      	movs	r3, #8
 8000cf2:	727b      	strb	r3, [r7, #9]

	status = MPU6050_WriteRegister(device, MPU6050_REG_GYRO_CONFIG, &reg_data);
 8000cf4:	f107 0309 	add.w	r3, r7, #9
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	211b      	movs	r1, #27
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f000 f9b3 	bl	8001068 <MPU6050_WriteRegister>
 8000d02:	4603      	mov	r3, r0
 8000d04:	72bb      	strb	r3, [r7, #10]
	err_num += (status != HAL_OK);
 8000d06:	7abb      	ldrb	r3, [r7, #10]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	bf14      	ite	ne
 8000d0c:	2301      	movne	r3, #1
 8000d0e:	2300      	moveq	r3, #0
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	461a      	mov	r2, r3
 8000d14:	7afb      	ldrb	r3, [r7, #11]
 8000d16:	4413      	add	r3, r2
 8000d18:	72fb      	strb	r3, [r7, #11]

	// ACCEL_CONFIG : Enable accelerometer self-test (XA_ST, YA_ST, ZA_ST), and set full scale range (AFS_SEL)
	// Self-tests are disabled [ MOMENTARILY ], full scale range +- 4g
	reg_data = 0x08;
 8000d1a:	2308      	movs	r3, #8
 8000d1c:	727b      	strb	r3, [r7, #9]

	status = MPU6050_WriteRegister(device, MPU6050_REG_ACCEL_CONFIG, &reg_data);
 8000d1e:	f107 0309 	add.w	r3, r7, #9
 8000d22:	461a      	mov	r2, r3
 8000d24:	211c      	movs	r1, #28
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f000 f99e 	bl	8001068 <MPU6050_WriteRegister>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	72bb      	strb	r3, [r7, #10]
	err_num += (status != HAL_OK);
 8000d30:	7abb      	ldrb	r3, [r7, #10]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	bf14      	ite	ne
 8000d36:	2301      	movne	r3, #1
 8000d38:	2300      	moveq	r3, #0
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	7afb      	ldrb	r3, [r7, #11]
 8000d40:	4413      	add	r3, r2
 8000d42:	72fb      	strb	r3, [r7, #11]

	// INT_PIN_CFG : Set behavior of interrupt signal in INT pin
	// Logic level is active high, pin is push-pull configured, pin is held high until interrupt is cleared,
	// Interrupt status bits are cleared by reading INT_STATUS (REGISTER 3A), FSYNC_INT_LEVEL is active high,
	// FSYNC_INT_EN disabled FSYNC pin from causing interrupt, I2C_BYPASS_EN does not allow host from accessing auxiliary I2C bus
	reg_data = 0x20;
 8000d44:	2320      	movs	r3, #32
 8000d46:	727b      	strb	r3, [r7, #9]

	status = MPU6050_WriteRegister(device, MPU6050_REG_INT_PIN_CFG, &reg_data);
 8000d48:	f107 0309 	add.w	r3, r7, #9
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	2137      	movs	r1, #55	@ 0x37
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f000 f989 	bl	8001068 <MPU6050_WriteRegister>
 8000d56:	4603      	mov	r3, r0
 8000d58:	72bb      	strb	r3, [r7, #10]
	err_num += (status != HAL_OK);
 8000d5a:	7abb      	ldrb	r3, [r7, #10]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	bf14      	ite	ne
 8000d60:	2301      	movne	r3, #1
 8000d62:	2300      	moveq	r3, #0
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	461a      	mov	r2, r3
 8000d68:	7afb      	ldrb	r3, [r7, #11]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	72fb      	strb	r3, [r7, #11]

	// INT_ENABLE : Sets interrupt generation
	// Only the data ready interrupt is enabled
	reg_data = 0x01;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	727b      	strb	r3, [r7, #9]

	status = MPU6050_WriteRegister(device, MPU6050_REG_INT_ENABLE, &reg_data);
 8000d72:	f107 0309 	add.w	r3, r7, #9
 8000d76:	461a      	mov	r2, r3
 8000d78:	2138      	movs	r1, #56	@ 0x38
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f000 f974 	bl	8001068 <MPU6050_WriteRegister>
 8000d80:	4603      	mov	r3, r0
 8000d82:	72bb      	strb	r3, [r7, #10]
	err_num += (status != HAL_OK);
 8000d84:	7abb      	ldrb	r3, [r7, #10]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	bf14      	ite	ne
 8000d8a:	2301      	movne	r3, #1
 8000d8c:	2300      	moveq	r3, #0
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	461a      	mov	r2, r3
 8000d92:	7afb      	ldrb	r3, [r7, #11]
 8000d94:	4413      	add	r3, r2
 8000d96:	72fb      	strb	r3, [r7, #11]

	// PWR_MGMT_1 : Set power mode, clock source, and temperature sensor
	// Device is not reset on startup, sleep is disabled and clock is enabled, the temperature sensor is enabled
	// The clock source is set to the internal 8MHz oscillator
	reg_data = 0x20;
 8000d98:	2320      	movs	r3, #32
 8000d9a:	727b      	strb	r3, [r7, #9]

	status = MPU6050_WriteRegister(device, MPU6050_REG_PWR_MGMT_1, &reg_data);
 8000d9c:	f107 0309 	add.w	r3, r7, #9
 8000da0:	461a      	mov	r2, r3
 8000da2:	216b      	movs	r1, #107	@ 0x6b
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f000 f95f 	bl	8001068 <MPU6050_WriteRegister>
 8000daa:	4603      	mov	r3, r0
 8000dac:	72bb      	strb	r3, [r7, #10]
	err_num += (status != HAL_OK);
 8000dae:	7abb      	ldrb	r3, [r7, #10]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	bf14      	ite	ne
 8000db4:	2301      	movne	r3, #1
 8000db6:	2300      	moveq	r3, #0
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	461a      	mov	r2, r3
 8000dbc:	7afb      	ldrb	r3, [r7, #11]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	72fb      	strb	r3, [r7, #11]

	// PWR_MGMT_2 : Set frequency of wake-ups in AOLPM, and set axes of gyroscope and accelerometer to standby mode
	// Wake-up frequency set to 5hz, no axes put into standby mode
	reg_data = 0x40;
 8000dc2:	2340      	movs	r3, #64	@ 0x40
 8000dc4:	727b      	strb	r3, [r7, #9]

	status = MPU6050_WriteRegister(device, MPU6050_REG_PWR_MGMT_2, &reg_data);
 8000dc6:	f107 0309 	add.w	r3, r7, #9
 8000dca:	461a      	mov	r2, r3
 8000dcc:	216c      	movs	r1, #108	@ 0x6c
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f000 f94a 	bl	8001068 <MPU6050_WriteRegister>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	72bb      	strb	r3, [r7, #10]
	err_num += (status != HAL_OK);
 8000dd8:	7abb      	ldrb	r3, [r7, #10]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	bf14      	ite	ne
 8000dde:	2301      	movne	r3, #1
 8000de0:	2300      	moveq	r3, #0
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	461a      	mov	r2, r3
 8000de6:	7afb      	ldrb	r3, [r7, #11]
 8000de8:	4413      	add	r3, r2
 8000dea:	72fb      	strb	r3, [r7, #11]

	// Return number of errors (0 if successful initialization)
	return err_num;
 8000dec:	7afb      	ldrb	r3, [r7, #11]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <MPU6050_ReadAccelerometer>:

/*
 * DATA AQUISITION
 */

HAL_StatusTypeDef MPU6050_ReadAccelerometer(MPU6050* device) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	// (RM p.30)

	// Read raw values from accelerometer registers
	uint8_t reg_data[6];

	HAL_StatusTypeDef status = MPU6050_ReadRegisters(device, MPU6050_REG_ACCEL_XOUT_H, reg_data, 6);
 8000e00:	f107 0210 	add.w	r2, r7, #16
 8000e04:	2306      	movs	r3, #6
 8000e06:	213b      	movs	r1, #59	@ 0x3b
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 f90e 	bl	800102a <MPU6050_ReadRegisters>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	75fb      	strb	r3, [r7, #23]

	// Combine register values to give raw (unsigned) accelerometer values
	int16_t raw_signed_data[3];

	raw_signed_data[0] = (reg_data[0] << 8) | reg_data[1]; // X-axis
 8000e12:	7c3b      	ldrb	r3, [r7, #16]
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	b21a      	sxth	r2, r3
 8000e18:	7c7b      	ldrb	r3, [r7, #17]
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	813b      	strh	r3, [r7, #8]
	raw_signed_data[1] = (reg_data[2] << 8) | reg_data[3]; // Y-axis
 8000e22:	7cbb      	ldrb	r3, [r7, #18]
 8000e24:	021b      	lsls	r3, r3, #8
 8000e26:	b21a      	sxth	r2, r3
 8000e28:	7cfb      	ldrb	r3, [r7, #19]
 8000e2a:	b21b      	sxth	r3, r3
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	817b      	strh	r3, [r7, #10]
	raw_signed_data[2] = (reg_data[4] << 8) | reg_data[5]; // Z-axis
 8000e32:	7d3b      	ldrb	r3, [r7, #20]
 8000e34:	021b      	lsls	r3, r3, #8
 8000e36:	b21a      	sxth	r2, r3
 8000e38:	7d7b      	ldrb	r3, [r7, #21]
 8000e3a:	b21b      	sxth	r3, r3
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	81bb      	strh	r3, [r7, #12]

	// Convert to g, Given range setting of +-4g
	device->acc_g[0] = 0.0001220703125 * raw_signed_data[0];
 8000e42:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fb6c 	bl	8000524 <__aeabi_i2d>
 8000e4c:	f04f 0200 	mov.w	r2, #0
 8000e50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec0 <MPU6050_ReadAccelerometer+0xc8>)
 8000e52:	f7ff fbd1 	bl	80005f8 <__aeabi_dmul>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	4610      	mov	r0, r2
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f7ff fea3 	bl	8000ba8 <__aeabi_d2f>
 8000e62:	4602      	mov	r2, r0
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	605a      	str	r2, [r3, #4]
	device->acc_g[1] = 0.0001220703125 * raw_signed_data[1];
 8000e68:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fb59 	bl	8000524 <__aeabi_i2d>
 8000e72:	f04f 0200 	mov.w	r2, #0
 8000e76:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <MPU6050_ReadAccelerometer+0xc8>)
 8000e78:	f7ff fbbe 	bl	80005f8 <__aeabi_dmul>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	4610      	mov	r0, r2
 8000e82:	4619      	mov	r1, r3
 8000e84:	f7ff fe90 	bl	8000ba8 <__aeabi_d2f>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
	device->acc_g[2] = 0.0001220703125 * raw_signed_data[2];
 8000e8e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fb46 	bl	8000524 <__aeabi_i2d>
 8000e98:	f04f 0200 	mov.w	r2, #0
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <MPU6050_ReadAccelerometer+0xc8>)
 8000e9e:	f7ff fbab 	bl	80005f8 <__aeabi_dmul>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f7ff fe7d 	bl	8000ba8 <__aeabi_d2f>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	60da      	str	r2, [r3, #12]

	return status;
 8000eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	3f200000 	.word	0x3f200000
 8000ec4:	00000000 	.word	0x00000000

08000ec8 <MPU6050_ReadGyroscope>:

HAL_StatusTypeDef MPU6050_ReadGyroscope(MPU6050* device) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	// (RM p.32)

	// Read raw values from accelerometer registers
	uint8_t reg_data[6];

	HAL_StatusTypeDef status = MPU6050_ReadRegisters(device, MPU6050_REG_GYRO_XOUT_H, reg_data, 6);
 8000ed0:	f107 0210 	add.w	r2, r7, #16
 8000ed4:	2306      	movs	r3, #6
 8000ed6:	2143      	movs	r1, #67	@ 0x43
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f000 f8a6 	bl	800102a <MPU6050_ReadRegisters>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	75fb      	strb	r3, [r7, #23]

	// Combine register values to give raw (unsigned) accelerometer values
	int16_t raw_signed_data[3];

	raw_signed_data[0] = (reg_data[0] << 8) | reg_data[1]; // X-axis
 8000ee2:	7c3b      	ldrb	r3, [r7, #16]
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	b21a      	sxth	r2, r3
 8000ee8:	7c7b      	ldrb	r3, [r7, #17]
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	4313      	orrs	r3, r2
 8000eee:	b21b      	sxth	r3, r3
 8000ef0:	813b      	strh	r3, [r7, #8]
	raw_signed_data[1] = (reg_data[2] << 8) | reg_data[3]; // Y-axis
 8000ef2:	7cbb      	ldrb	r3, [r7, #18]
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	b21a      	sxth	r2, r3
 8000ef8:	7cfb      	ldrb	r3, [r7, #19]
 8000efa:	b21b      	sxth	r3, r3
 8000efc:	4313      	orrs	r3, r2
 8000efe:	b21b      	sxth	r3, r3
 8000f00:	817b      	strh	r3, [r7, #10]
	raw_signed_data[2] = (reg_data[4] << 8) | reg_data[5]; // Z-axis
 8000f02:	7d3b      	ldrb	r3, [r7, #20]
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	b21a      	sxth	r2, r3
 8000f08:	7d7b      	ldrb	r3, [r7, #21]
 8000f0a:	b21b      	sxth	r3, r3
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	81bb      	strh	r3, [r7, #12]

	// Convert to g, Given range setting of +-4g
	device->acc_g[0] = 0.0152671755725 * raw_signed_data[0];
 8000f12:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fb04 	bl	8000524 <__aeabi_i2d>
 8000f1c:	a31c      	add	r3, pc, #112	@ (adr r3, 8000f90 <MPU6050_ReadGyroscope+0xc8>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	f7ff fb69 	bl	80005f8 <__aeabi_dmul>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f7ff fe3b 	bl	8000ba8 <__aeabi_d2f>
 8000f32:	4602      	mov	r2, r0
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	605a      	str	r2, [r3, #4]
	device->acc_g[1] = 0.0152671755725 * raw_signed_data[1];
 8000f38:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff faf1 	bl	8000524 <__aeabi_i2d>
 8000f42:	a313      	add	r3, pc, #76	@ (adr r3, 8000f90 <MPU6050_ReadGyroscope+0xc8>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	f7ff fb56 	bl	80005f8 <__aeabi_dmul>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f7ff fe28 	bl	8000ba8 <__aeabi_d2f>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
	device->acc_g[2] = 0.0152671755725 * raw_signed_data[2];
 8000f5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fade 	bl	8000524 <__aeabi_i2d>
 8000f68:	a309      	add	r3, pc, #36	@ (adr r3, 8000f90 <MPU6050_ReadGyroscope+0xc8>)
 8000f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6e:	f7ff fb43 	bl	80005f8 <__aeabi_dmul>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4610      	mov	r0, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f7ff fe15 	bl	8000ba8 <__aeabi_d2f>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	60da      	str	r2, [r3, #12]

	return status;
 8000f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	9e4a1778 	.word	0x9e4a1778
 8000f94:	3f8f4465 	.word	0x3f8f4465

08000f98 <MPU6050_ReadTemperature>:

HAL_StatusTypeDef MPU6050_ReadTemperature(MPU6050* device) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
//	}

	// Read raw values from temperature registers
	uint8_t reg_data[2];

	HAL_StatusTypeDef status = MPU6050_ReadRegisters(device, MPU6050_REG_TEMP_OUT_H, reg_data, 2);
 8000fa0:	f107 0208 	add.w	r2, r7, #8
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	2141      	movs	r1, #65	@ 0x41
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f83e 	bl	800102a <MPU6050_ReadRegisters>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73fb      	strb	r3, [r7, #15]

	// / Combine register values to get raw temperature data
	uint16_t raw_data = (reg_data[0] << 8) | reg_data[1];
 8000fb2:	7a3b      	ldrb	r3, [r7, #8]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	7a7b      	ldrb	r3, [r7, #9]
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	81bb      	strh	r3, [r7, #12]

	// Convert to degrees Celsius
	device->temp_C = ((float) raw_data / 340) + 36.53f;
 8000fc2:	89bb      	ldrh	r3, [r7, #12]
 8000fc4:	ee07 3a90 	vmov	s15, r3
 8000fc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fcc:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8000fec <MPU6050_ReadTemperature+0x54>
 8000fd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd4:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000ff0 <MPU6050_ReadTemperature+0x58>
 8000fd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	edc3 7a07 	vstr	s15, [r3, #28]

	return status;
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	43aa0000 	.word	0x43aa0000
 8000ff0:	42121eb8 	.word	0x42121eb8

08000ff4 <MPU6050_ReadRegister>:

/*
 * LOW-LEVEL FUNCTIONS
 */

HAL_StatusTypeDef MPU6050_ReadRegister(MPU6050* device, uint8_t reg, uint8_t* data) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af04      	add	r7, sp, #16
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(device->i2c_handle, MPU6050_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6818      	ldr	r0, [r3, #0]
 8001006:	7afb      	ldrb	r3, [r7, #11]
 8001008:	b29a      	uxth	r2, r3
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	9302      	str	r3, [sp, #8]
 8001010:	2301      	movs	r3, #1
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2301      	movs	r3, #1
 800101a:	21d0      	movs	r1, #208	@ 0xd0
 800101c:	f001 f86e 	bl	80020fc <HAL_I2C_Mem_Read>
 8001020:	4603      	mov	r3, r0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <MPU6050_ReadRegisters>:

HAL_StatusTypeDef MPU6050_ReadRegisters(MPU6050* device, uint8_t reg, uint8_t* data, uint8_t length) {
 800102a:	b580      	push	{r7, lr}
 800102c:	b088      	sub	sp, #32
 800102e:	af04      	add	r7, sp, #16
 8001030:	60f8      	str	r0, [r7, #12]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	461a      	mov	r2, r3
 8001036:	460b      	mov	r3, r1
 8001038:	72fb      	strb	r3, [r7, #11]
 800103a:	4613      	mov	r3, r2
 800103c:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(device->i2c_handle, MPU6050_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	7afb      	ldrb	r3, [r7, #11]
 8001044:	b29a      	uxth	r2, r3
 8001046:	7abb      	ldrb	r3, [r7, #10]
 8001048:	b29b      	uxth	r3, r3
 800104a:	f04f 31ff 	mov.w	r1, #4294967295
 800104e:	9102      	str	r1, [sp, #8]
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2301      	movs	r3, #1
 8001058:	21d0      	movs	r1, #208	@ 0xd0
 800105a:	f001 f84f 	bl	80020fc <HAL_I2C_Mem_Read>
 800105e:	4603      	mov	r3, r0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <MPU6050_WriteRegister>:

HAL_StatusTypeDef MPU6050_WriteRegister(MPU6050* device, uint8_t reg, uint8_t* data) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af04      	add	r7, sp, #16
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	460b      	mov	r3, r1
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write(device->i2c_handle, MPU6050_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	7afb      	ldrb	r3, [r7, #11]
 800107c:	b29a      	uxth	r2, r3
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	21d0      	movs	r1, #208	@ 0xd0
 8001090:	f000 ff20 	bl	8001ed4 <HAL_I2C_Mem_Write>
 8001094:	4603      	mov	r3, r0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == INT_Pin) {
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d102      	bne.n	80010b6 <HAL_GPIO_EXTI_Callback+0x16>
		dev_data_ready = true;
 80010b0:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <HAL_GPIO_EXTI_Callback+0x24>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
	}
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	200002ec 	.word	0x200002ec

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010cc:	b0b8      	sub	sp, #224	@ 0xe0
 80010ce:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d0:	f000 fb62 	bl	8001798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d4:	f000 f878 	bl	80011c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d8:	f000 f936 	bl	8001348 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010dc:	f000 f8c4 	bl	8001268 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80010e0:	f000 f902 	bl	80012e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init(&dev, &hi2c1);
 80010e4:	4933      	ldr	r1, [pc, #204]	@ (80011b4 <main+0xec>)
 80010e6:	4834      	ldr	r0, [pc, #208]	@ (80011b8 <main+0xf0>)
 80010e8:	f7ff fdae 	bl	8000c48 <MPU6050_Init>
  char message[150];
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  dev_data_ready = false;
 80010ec:	4b33      	ldr	r3, [pc, #204]	@ (80011bc <main+0xf4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (dev_data_ready) {
 80010f2:	4b32      	ldr	r3, [pc, #200]	@ (80011bc <main+0xf4>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0fb      	beq.n	80010f2 <main+0x2a>
		  // Read temperature
		  MPU6050_ReadTemperature(&dev);
 80010fa:	482f      	ldr	r0, [pc, #188]	@ (80011b8 <main+0xf0>)
 80010fc:	f7ff ff4c 	bl	8000f98 <MPU6050_ReadTemperature>
		  // Read accelerometer
		  MPU6050_ReadAccelerometer(&dev);
 8001100:	482d      	ldr	r0, [pc, #180]	@ (80011b8 <main+0xf0>)
 8001102:	f7ff fe79 	bl	8000df8 <MPU6050_ReadAccelerometer>
		  // Read gyroscope
		  MPU6050_ReadGyroscope(&dev);
 8001106:	482c      	ldr	r0, [pc, #176]	@ (80011b8 <main+0xf0>)
 8001108:	f7ff fede 	bl	8000ec8 <MPU6050_ReadGyroscope>

		  sprintf(message, "temperature: %f, accelerometer: %f %f %f, gyroscope: %f %f %f\r\n",
				  dev.temp_C, dev.acc_g[0], dev.acc_g[1], dev.acc_g[2], dev.gyr_dps[0], dev.gyr_dps[1], dev.gyr_dps[2]);
 800110c:	4b2a      	ldr	r3, [pc, #168]	@ (80011b8 <main+0xf0>)
 800110e:	69db      	ldr	r3, [r3, #28]
		  sprintf(message, "temperature: %f, accelerometer: %f %f %f, gyroscope: %f %f %f\r\n",
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fa19 	bl	8000548 <__aeabi_f2d>
 8001116:	e9c7 0104 	strd	r0, r1, [r7, #16]
				  dev.temp_C, dev.acc_g[0], dev.acc_g[1], dev.acc_g[2], dev.gyr_dps[0], dev.gyr_dps[1], dev.gyr_dps[2]);
 800111a:	4b27      	ldr	r3, [pc, #156]	@ (80011b8 <main+0xf0>)
 800111c:	685b      	ldr	r3, [r3, #4]
		  sprintf(message, "temperature: %f, accelerometer: %f %f %f, gyroscope: %f %f %f\r\n",
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fa12 	bl	8000548 <__aeabi_f2d>
 8001124:	4680      	mov	r8, r0
 8001126:	4689      	mov	r9, r1
				  dev.temp_C, dev.acc_g[0], dev.acc_g[1], dev.acc_g[2], dev.gyr_dps[0], dev.gyr_dps[1], dev.gyr_dps[2]);
 8001128:	4b23      	ldr	r3, [pc, #140]	@ (80011b8 <main+0xf0>)
 800112a:	689b      	ldr	r3, [r3, #8]
		  sprintf(message, "temperature: %f, accelerometer: %f %f %f, gyroscope: %f %f %f\r\n",
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fa0b 	bl	8000548 <__aeabi_f2d>
 8001132:	4682      	mov	sl, r0
 8001134:	468b      	mov	fp, r1
				  dev.temp_C, dev.acc_g[0], dev.acc_g[1], dev.acc_g[2], dev.gyr_dps[0], dev.gyr_dps[1], dev.gyr_dps[2]);
 8001136:	4b20      	ldr	r3, [pc, #128]	@ (80011b8 <main+0xf0>)
 8001138:	68db      	ldr	r3, [r3, #12]
		  sprintf(message, "temperature: %f, accelerometer: %f %f %f, gyroscope: %f %f %f\r\n",
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fa04 	bl	8000548 <__aeabi_f2d>
 8001140:	e9c7 0102 	strd	r0, r1, [r7, #8]
				  dev.temp_C, dev.acc_g[0], dev.acc_g[1], dev.acc_g[2], dev.gyr_dps[0], dev.gyr_dps[1], dev.gyr_dps[2]);
 8001144:	4b1c      	ldr	r3, [pc, #112]	@ (80011b8 <main+0xf0>)
 8001146:	691b      	ldr	r3, [r3, #16]
		  sprintf(message, "temperature: %f, accelerometer: %f %f %f, gyroscope: %f %f %f\r\n",
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f9fd 	bl	8000548 <__aeabi_f2d>
 800114e:	e9c7 0100 	strd	r0, r1, [r7]
				  dev.temp_C, dev.acc_g[0], dev.acc_g[1], dev.acc_g[2], dev.gyr_dps[0], dev.gyr_dps[1], dev.gyr_dps[2]);
 8001152:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <main+0xf0>)
 8001154:	695b      	ldr	r3, [r3, #20]
		  sprintf(message, "temperature: %f, accelerometer: %f %f %f, gyroscope: %f %f %f\r\n",
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f9f6 	bl	8000548 <__aeabi_f2d>
 800115c:	4604      	mov	r4, r0
 800115e:	460d      	mov	r5, r1
				  dev.temp_C, dev.acc_g[0], dev.acc_g[1], dev.acc_g[2], dev.gyr_dps[0], dev.gyr_dps[1], dev.gyr_dps[2]);
 8001160:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <main+0xf0>)
 8001162:	699b      	ldr	r3, [r3, #24]
		  sprintf(message, "temperature: %f, accelerometer: %f %f %f, gyroscope: %f %f %f\r\n",
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f9ef 	bl	8000548 <__aeabi_f2d>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	f107 0018 	add.w	r0, r7, #24
 8001172:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8001176:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800117a:	ed97 7b00 	vldr	d7, [r7]
 800117e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001182:	ed97 7b02 	vldr	d7, [r7, #8]
 8001186:	ed8d 7b04 	vstr	d7, [sp, #16]
 800118a:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800118e:	e9cd 8900 	strd	r8, r9, [sp]
 8001192:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001196:	490a      	ldr	r1, [pc, #40]	@ (80011c0 <main+0xf8>)
 8001198:	f004 f956 	bl	8005448 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) message, 150, HAL_MAX_DELAY);
 800119c:	f107 0118 	add.w	r1, r7, #24
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295
 80011a4:	2296      	movs	r2, #150	@ 0x96
 80011a6:	4807      	ldr	r0, [pc, #28]	@ (80011c4 <main+0xfc>)
 80011a8:	f003 f85a 	bl	8004260 <HAL_UART_Transmit>

		  dev_data_ready = 0;
 80011ac:	4b03      	ldr	r3, [pc, #12]	@ (80011bc <main+0xf4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
	  if (dev_data_ready) {
 80011b2:	e79e      	b.n	80010f2 <main+0x2a>
 80011b4:	200001f0 	.word	0x200001f0
 80011b8:	200002cc 	.word	0x200002cc
 80011bc:	200002ec 	.word	0x200002ec
 80011c0:	080076b8 	.word	0x080076b8
 80011c4:	20000244 	.word	0x20000244

080011c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b09c      	sub	sp, #112	@ 0x70
 80011cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011d2:	2228      	movs	r2, #40	@ 0x28
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f004 f999 	bl	800550e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011dc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011ec:	463b      	mov	r3, r7
 80011ee:	2234      	movs	r2, #52	@ 0x34
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f004 f98b 	bl	800550e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f8:	2302      	movs	r3, #2
 80011fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011fc:	2301      	movs	r3, #1
 80011fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001200:	2310      	movs	r3, #16
 8001202:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001204:	2300      	movs	r3, #0
 8001206:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001208:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800120c:	4618      	mov	r0, r3
 800120e:	f001 fbe9 	bl	80029e4 <HAL_RCC_OscConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001218:	f000 f8d6 	bl	80013c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121c:	230f      	movs	r3, #15
 800121e:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001220:	2300      	movs	r3, #0
 8001222:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800122c:	2300      	movs	r3, #0
 800122e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001230:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f002 fc12 	bl	8003a60 <HAL_RCC_ClockConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001242:	f000 f8c1 	bl	80013c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001246:	2320      	movs	r3, #32
 8001248:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800124e:	463b      	mov	r3, r7
 8001250:	4618      	mov	r0, r3
 8001252:	f002 fe25 	bl	8003ea0 <HAL_RCCEx_PeriphCLKConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800125c:	f000 f8b4 	bl	80013c8 <Error_Handler>
  }
}
 8001260:	bf00      	nop
 8001262:	3770      	adds	r7, #112	@ 0x70
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800126c:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <MX_I2C1_Init+0x74>)
 800126e:	4a1c      	ldr	r2, [pc, #112]	@ (80012e0 <MX_I2C1_Init+0x78>)
 8001270:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 8001272:	4b1a      	ldr	r3, [pc, #104]	@ (80012dc <MX_I2C1_Init+0x74>)
 8001274:	4a1b      	ldr	r2, [pc, #108]	@ (80012e4 <MX_I2C1_Init+0x7c>)
 8001276:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001278:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <MX_I2C1_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800127e:	4b17      	ldr	r3, [pc, #92]	@ (80012dc <MX_I2C1_Init+0x74>)
 8001280:	2201      	movs	r2, #1
 8001282:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001284:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <MX_I2C1_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800128a:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <MX_I2C1_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001290:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <MX_I2C1_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001296:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <MX_I2C1_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800129c:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <MX_I2C1_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a2:	480e      	ldr	r0, [pc, #56]	@ (80012dc <MX_I2C1_Init+0x74>)
 80012a4:	f000 fd7a 	bl	8001d9c <HAL_I2C_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012ae:	f000 f88b 	bl	80013c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012b2:	2100      	movs	r1, #0
 80012b4:	4809      	ldr	r0, [pc, #36]	@ (80012dc <MX_I2C1_Init+0x74>)
 80012b6:	f001 fafd 	bl	80028b4 <HAL_I2CEx_ConfigAnalogFilter>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012c0:	f000 f882 	bl	80013c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012c4:	2100      	movs	r1, #0
 80012c6:	4805      	ldr	r0, [pc, #20]	@ (80012dc <MX_I2C1_Init+0x74>)
 80012c8:	f001 fb3f 	bl	800294a <HAL_I2CEx_ConfigDigitalFilter>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012d2:	f000 f879 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200001f0 	.word	0x200001f0
 80012e0:	40005400 	.word	0x40005400
 80012e4:	0010020a 	.word	0x0010020a

080012e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012ec:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <MX_USART2_UART_Init+0x58>)
 80012ee:	4a15      	ldr	r2, [pc, #84]	@ (8001344 <MX_USART2_UART_Init+0x5c>)
 80012f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80012f2:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <MX_USART2_UART_Init+0x58>)
 80012f4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80012f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <MX_USART2_UART_Init+0x58>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001300:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <MX_USART2_UART_Init+0x58>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <MX_USART2_UART_Init+0x58>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <MX_USART2_UART_Init+0x58>)
 800130e:	220c      	movs	r2, #12
 8001310:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001312:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <MX_USART2_UART_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <MX_USART2_UART_Init+0x58>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800131e:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <MX_USART2_UART_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <MX_USART2_UART_Init+0x58>)
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	@ (8001340 <MX_USART2_UART_Init+0x58>)
 800132c:	f002 ff4a 	bl	80041c4 <HAL_UART_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001336:	f000 f847 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000244 	.word	0x20000244
 8001344:	40004400 	.word	0x40004400

08001348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <MX_GPIO_Init+0x7c>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	4a18      	ldr	r2, [pc, #96]	@ (80013c4 <MX_GPIO_Init+0x7c>)
 8001364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001368:	6153      	str	r3, [r2, #20]
 800136a:	4b16      	ldr	r3, [pc, #88]	@ (80013c4 <MX_GPIO_Init+0x7c>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <MX_GPIO_Init+0x7c>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	4a12      	ldr	r2, [pc, #72]	@ (80013c4 <MX_GPIO_Init+0x7c>)
 800137c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001380:	6153      	str	r3, [r2, #20]
 8001382:	4b10      	ldr	r3, [pc, #64]	@ (80013c4 <MX_GPIO_Init+0x7c>)
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 800138e:	2301      	movs	r3, #1
 8001390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001392:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001396:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001398:	2301      	movs	r3, #1
 800139a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	4619      	mov	r1, r3
 80013a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a6:	f000 fb6f 	bl	8001a88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	2006      	movs	r0, #6
 80013b0:	f000 fb33 	bl	8001a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013b4:	2006      	movs	r0, #6
 80013b6:	f000 fb4c 	bl	8001a52 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013ba:	bf00      	nop
 80013bc:	3720      	adds	r7, #32
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000

080013c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013cc:	b672      	cpsid	i
}
 80013ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <Error_Handler+0x8>

080013d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <HAL_MspInit+0x44>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	4a0e      	ldr	r2, [pc, #56]	@ (8001418 <HAL_MspInit+0x44>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6193      	str	r3, [r2, #24]
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <HAL_MspInit+0x44>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <HAL_MspInit+0x44>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	4a08      	ldr	r2, [pc, #32]	@ (8001418 <HAL_MspInit+0x44>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013fc:	61d3      	str	r3, [r2, #28]
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <HAL_MspInit+0x44>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000

0800141c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	@ 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a17      	ldr	r2, [pc, #92]	@ (8001498 <HAL_I2C_MspInit+0x7c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d127      	bne.n	800148e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	4b17      	ldr	r3, [pc, #92]	@ (800149c <HAL_I2C_MspInit+0x80>)
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	4a16      	ldr	r2, [pc, #88]	@ (800149c <HAL_I2C_MspInit+0x80>)
 8001444:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001448:	6153      	str	r3, [r2, #20]
 800144a:	4b14      	ldr	r3, [pc, #80]	@ (800149c <HAL_I2C_MspInit+0x80>)
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001456:	23c0      	movs	r3, #192	@ 0xc0
 8001458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145a:	2312      	movs	r3, #18
 800145c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001466:	2304      	movs	r3, #4
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	480b      	ldr	r0, [pc, #44]	@ (80014a0 <HAL_I2C_MspInit+0x84>)
 8001472:	f000 fb09 	bl	8001a88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <HAL_I2C_MspInit+0x80>)
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	4a08      	ldr	r2, [pc, #32]	@ (800149c <HAL_I2C_MspInit+0x80>)
 800147c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001480:	61d3      	str	r3, [r2, #28]
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <HAL_I2C_MspInit+0x80>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800148e:	bf00      	nop
 8001490:	3728      	adds	r7, #40	@ 0x28
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40005400 	.word	0x40005400
 800149c:	40021000 	.word	0x40021000
 80014a0:	48000400 	.word	0x48000400

080014a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	@ 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a17      	ldr	r2, [pc, #92]	@ (8001520 <HAL_UART_MspInit+0x7c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d128      	bne.n	8001518 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014c6:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <HAL_UART_MspInit+0x80>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	4a16      	ldr	r2, [pc, #88]	@ (8001524 <HAL_UART_MspInit+0x80>)
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d0:	61d3      	str	r3, [r2, #28]
 80014d2:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <HAL_UART_MspInit+0x80>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <HAL_UART_MspInit+0x80>)
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	4a10      	ldr	r2, [pc, #64]	@ (8001524 <HAL_UART_MspInit+0x80>)
 80014e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014e8:	6153      	str	r3, [r2, #20]
 80014ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <HAL_UART_MspInit+0x80>)
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014f6:	230c      	movs	r3, #12
 80014f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001506:	2307      	movs	r3, #7
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001514:	f000 fab8 	bl	8001a88 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001518:	bf00      	nop
 800151a:	3728      	adds	r7, #40	@ 0x28
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40004400 	.word	0x40004400
 8001524:	40021000 	.word	0x40021000

08001528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <NMI_Handler+0x4>

08001530 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <HardFault_Handler+0x4>

08001538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <MemManage_Handler+0x4>

08001540 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <BusFault_Handler+0x4>

08001548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <UsageFault_Handler+0x4>

08001550 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800157e:	f000 f951 	bl	8001824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}

08001586 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 800158a:	2001      	movs	r0, #1
 800158c:	f000 fbee 	bl	8001d6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}

08001594 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return 1;
 8001598:	2301      	movs	r3, #1
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <_kill>:

int _kill(int pid, int sig)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015ae:	f004 f801 	bl	80055b4 <__errno>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2216      	movs	r2, #22
 80015b6:	601a      	str	r2, [r3, #0]
  return -1;
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <_exit>:

void _exit (int status)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015cc:	f04f 31ff 	mov.w	r1, #4294967295
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff ffe7 	bl	80015a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015d6:	bf00      	nop
 80015d8:	e7fd      	b.n	80015d6 <_exit+0x12>

080015da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	e00a      	b.n	8001602 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015ec:	f3af 8000 	nop.w
 80015f0:	4601      	mov	r1, r0
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	60ba      	str	r2, [r7, #8]
 80015f8:	b2ca      	uxtb	r2, r1
 80015fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	3301      	adds	r3, #1
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	429a      	cmp	r2, r3
 8001608:	dbf0      	blt.n	80015ec <_read+0x12>
  }

  return len;
 800160a:	687b      	ldr	r3, [r7, #4]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	e009      	b.n	800163a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	60ba      	str	r2, [r7, #8]
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	3301      	adds	r3, #1
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	429a      	cmp	r2, r3
 8001640:	dbf1      	blt.n	8001626 <_write+0x12>
  }
  return len;
 8001642:	687b      	ldr	r3, [r7, #4]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <_close>:

int _close(int file)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001654:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001674:	605a      	str	r2, [r3, #4]
  return 0;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <_isatty>:

int _isatty(int file)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800168c:	2301      	movs	r3, #1
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016bc:	4a14      	ldr	r2, [pc, #80]	@ (8001710 <_sbrk+0x5c>)
 80016be:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <_sbrk+0x60>)
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c8:	4b13      	ldr	r3, [pc, #76]	@ (8001718 <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d0:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <_sbrk+0x64>)
 80016d2:	4a12      	ldr	r2, [pc, #72]	@ (800171c <_sbrk+0x68>)
 80016d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016d6:	4b10      	ldr	r3, [pc, #64]	@ (8001718 <_sbrk+0x64>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d207      	bcs.n	80016f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e4:	f003 ff66 	bl	80055b4 <__errno>
 80016e8:	4603      	mov	r3, r0
 80016ea:	220c      	movs	r2, #12
 80016ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	e009      	b.n	8001708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f4:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fa:	4b07      	ldr	r3, [pc, #28]	@ (8001718 <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	4a05      	ldr	r2, [pc, #20]	@ (8001718 <_sbrk+0x64>)
 8001704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001706:	68fb      	ldr	r3, [r7, #12]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20004000 	.word	0x20004000
 8001714:	00000400 	.word	0x00000400
 8001718:	200002f0 	.word	0x200002f0
 800171c:	20000448 	.word	0x20000448

08001720 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001724:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <SystemInit+0x20>)
 8001726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800172a:	4a05      	ldr	r2, [pc, #20]	@ (8001740 <SystemInit+0x20>)
 800172c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001730:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001744:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800177c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001748:	f7ff ffea 	bl	8001720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800174c:	480c      	ldr	r0, [pc, #48]	@ (8001780 <LoopForever+0x6>)
  ldr r1, =_edata
 800174e:	490d      	ldr	r1, [pc, #52]	@ (8001784 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001750:	4a0d      	ldr	r2, [pc, #52]	@ (8001788 <LoopForever+0xe>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001754:	e002      	b.n	800175c <LoopCopyDataInit>

08001756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175a:	3304      	adds	r3, #4

0800175c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800175c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001760:	d3f9      	bcc.n	8001756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001762:	4a0a      	ldr	r2, [pc, #40]	@ (800178c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001764:	4c0a      	ldr	r4, [pc, #40]	@ (8001790 <LoopForever+0x16>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001768:	e001      	b.n	800176e <LoopFillZerobss>

0800176a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800176c:	3204      	adds	r2, #4

0800176e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001770:	d3fb      	bcc.n	800176a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001772:	f003 ff25 	bl	80055c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001776:	f7ff fca7 	bl	80010c8 <main>

0800177a <LoopForever>:

LoopForever:
    b LoopForever
 800177a:	e7fe      	b.n	800177a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800177c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001784:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001788:	08007ab0 	.word	0x08007ab0
  ldr r2, =_sbss
 800178c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001790:	20000444 	.word	0x20000444

08001794 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC1_IRQHandler>
	...

08001798 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179c:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <HAL_Init+0x28>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a07      	ldr	r2, [pc, #28]	@ (80017c0 <HAL_Init+0x28>)
 80017a2:	f043 0310 	orr.w	r3, r3, #16
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f000 f92b 	bl	8001a04 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ae:	200f      	movs	r0, #15
 80017b0:	f000 f808 	bl	80017c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b4:	f7ff fe0e 	bl	80013d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40022000 	.word	0x40022000

080017c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017cc:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <HAL_InitTick+0x54>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b12      	ldr	r3, [pc, #72]	@ (800181c <HAL_InitTick+0x58>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017da:	fbb3 f3f1 	udiv	r3, r3, r1
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f943 	bl	8001a6e <HAL_SYSTICK_Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00e      	b.n	8001810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	d80a      	bhi.n	800180e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f8:	2200      	movs	r2, #0
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f000 f90b 	bl	8001a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001804:	4a06      	ldr	r2, [pc, #24]	@ (8001820 <HAL_InitTick+0x5c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e000      	b.n	8001810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000000 	.word	0x20000000
 800181c:	20000008 	.word	0x20000008
 8001820:	20000004 	.word	0x20000004

08001824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_IncTick+0x20>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <HAL_IncTick+0x24>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4413      	add	r3, r2
 8001834:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <HAL_IncTick+0x24>)
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000008 	.word	0x20000008
 8001848:	200002f4 	.word	0x200002f4

0800184c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001850:	4b03      	ldr	r3, [pc, #12]	@ (8001860 <HAL_GetTick+0x14>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	200002f4 	.word	0x200002f4

08001864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001874:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001880:	4013      	ands	r3, r2
 8001882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800188c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001896:	4a04      	ldr	r2, [pc, #16]	@ (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	60d3      	str	r3, [r2, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b0:	4b04      	ldr	r3, [pc, #16]	@ (80018c4 <__NVIC_GetPriorityGrouping+0x18>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	0a1b      	lsrs	r3, r3, #8
 80018b6:	f003 0307 	and.w	r3, r3, #7
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	db0b      	blt.n	80018f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	f003 021f 	and.w	r2, r3, #31
 80018e0:	4907      	ldr	r1, [pc, #28]	@ (8001900 <__NVIC_EnableIRQ+0x38>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	095b      	lsrs	r3, r3, #5
 80018e8:	2001      	movs	r0, #1
 80018ea:	fa00 f202 	lsl.w	r2, r0, r2
 80018ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000e100 	.word	0xe000e100

08001904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	2b00      	cmp	r3, #0
 8001916:	db0a      	blt.n	800192e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	490c      	ldr	r1, [pc, #48]	@ (8001950 <__NVIC_SetPriority+0x4c>)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	440b      	add	r3, r1
 8001928:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800192c:	e00a      	b.n	8001944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4908      	ldr	r1, [pc, #32]	@ (8001954 <__NVIC_SetPriority+0x50>)
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	3b04      	subs	r3, #4
 800193c:	0112      	lsls	r2, r2, #4
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	440b      	add	r3, r1
 8001942:	761a      	strb	r2, [r3, #24]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000e100 	.word	0xe000e100
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	@ 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f1c3 0307 	rsb	r3, r3, #7
 8001972:	2b04      	cmp	r3, #4
 8001974:	bf28      	it	cs
 8001976:	2304      	movcs	r3, #4
 8001978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3304      	adds	r3, #4
 800197e:	2b06      	cmp	r3, #6
 8001980:	d902      	bls.n	8001988 <NVIC_EncodePriority+0x30>
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3b03      	subs	r3, #3
 8001986:	e000      	b.n	800198a <NVIC_EncodePriority+0x32>
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	f04f 32ff 	mov.w	r2, #4294967295
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43da      	mvns	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	401a      	ands	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a0:	f04f 31ff 	mov.w	r1, #4294967295
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43d9      	mvns	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	4313      	orrs	r3, r2
         );
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3724      	adds	r7, #36	@ 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019d0:	d301      	bcc.n	80019d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00f      	b.n	80019f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a00 <SysTick_Config+0x40>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019de:	210f      	movs	r1, #15
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	f7ff ff8e 	bl	8001904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e8:	4b05      	ldr	r3, [pc, #20]	@ (8001a00 <SysTick_Config+0x40>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ee:	4b04      	ldr	r3, [pc, #16]	@ (8001a00 <SysTick_Config+0x40>)
 80019f0:	2207      	movs	r2, #7
 80019f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	e000e010 	.word	0xe000e010

08001a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ff29 	bl	8001864 <__NVIC_SetPriorityGrouping>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4603      	mov	r3, r0
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a2c:	f7ff ff3e 	bl	80018ac <__NVIC_GetPriorityGrouping>
 8001a30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	68b9      	ldr	r1, [r7, #8]
 8001a36:	6978      	ldr	r0, [r7, #20]
 8001a38:	f7ff ff8e 	bl	8001958 <NVIC_EncodePriority>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a42:	4611      	mov	r1, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff5d 	bl	8001904 <__NVIC_SetPriority>
}
 8001a4a:	bf00      	nop
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff31 	bl	80018c8 <__NVIC_EnableIRQ>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ffa2 	bl	80019c0 <SysTick_Config>
 8001a7c:	4603      	mov	r3, r0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b087      	sub	sp, #28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a96:	e14e      	b.n	8001d36 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 8140 	beq.w	8001d30 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d005      	beq.n	8001ac8 <HAL_GPIO_Init+0x40>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d130      	bne.n	8001b2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	68da      	ldr	r2, [r3, #12]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001afe:	2201      	movs	r2, #1
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	091b      	lsrs	r3, r3, #4
 8001b14:	f003 0201 	and.w	r2, r3, #1
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d017      	beq.n	8001b66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	2203      	movs	r2, #3
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d123      	bne.n	8001bba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	08da      	lsrs	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3208      	adds	r2, #8
 8001b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	220f      	movs	r2, #15
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	691a      	ldr	r2, [r3, #16]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	08da      	lsrs	r2, r3, #3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3208      	adds	r2, #8
 8001bb4:	6939      	ldr	r1, [r7, #16]
 8001bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0203 	and.w	r2, r3, #3
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 809a 	beq.w	8001d30 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfc:	4b55      	ldr	r3, [pc, #340]	@ (8001d54 <HAL_GPIO_Init+0x2cc>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	4a54      	ldr	r2, [pc, #336]	@ (8001d54 <HAL_GPIO_Init+0x2cc>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6193      	str	r3, [r2, #24]
 8001c08:	4b52      	ldr	r3, [pc, #328]	@ (8001d54 <HAL_GPIO_Init+0x2cc>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c14:	4a50      	ldr	r2, [pc, #320]	@ (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	089b      	lsrs	r3, r3, #2
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	220f      	movs	r2, #15
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c3e:	d013      	beq.n	8001c68 <HAL_GPIO_Init+0x1e0>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a46      	ldr	r2, [pc, #280]	@ (8001d5c <HAL_GPIO_Init+0x2d4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d00d      	beq.n	8001c64 <HAL_GPIO_Init+0x1dc>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a45      	ldr	r2, [pc, #276]	@ (8001d60 <HAL_GPIO_Init+0x2d8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d007      	beq.n	8001c60 <HAL_GPIO_Init+0x1d8>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a44      	ldr	r2, [pc, #272]	@ (8001d64 <HAL_GPIO_Init+0x2dc>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d101      	bne.n	8001c5c <HAL_GPIO_Init+0x1d4>
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e006      	b.n	8001c6a <HAL_GPIO_Init+0x1e2>
 8001c5c:	2305      	movs	r3, #5
 8001c5e:	e004      	b.n	8001c6a <HAL_GPIO_Init+0x1e2>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e002      	b.n	8001c6a <HAL_GPIO_Init+0x1e2>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <HAL_GPIO_Init+0x1e2>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	f002 0203 	and.w	r2, r2, #3
 8001c70:	0092      	lsls	r2, r2, #2
 8001c72:	4093      	lsls	r3, r2
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c7a:	4937      	ldr	r1, [pc, #220]	@ (8001d58 <HAL_GPIO_Init+0x2d0>)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	089b      	lsrs	r3, r3, #2
 8001c80:	3302      	adds	r3, #2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c88:	4b37      	ldr	r3, [pc, #220]	@ (8001d68 <HAL_GPIO_Init+0x2e0>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cac:	4a2e      	ldr	r2, [pc, #184]	@ (8001d68 <HAL_GPIO_Init+0x2e0>)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d68 <HAL_GPIO_Init+0x2e0>)
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cd6:	4a24      	ldr	r2, [pc, #144]	@ (8001d68 <HAL_GPIO_Init+0x2e0>)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cdc:	4b22      	ldr	r3, [pc, #136]	@ (8001d68 <HAL_GPIO_Init+0x2e0>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d00:	4a19      	ldr	r2, [pc, #100]	@ (8001d68 <HAL_GPIO_Init+0x2e0>)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d06:	4b18      	ldr	r3, [pc, #96]	@ (8001d68 <HAL_GPIO_Init+0x2e0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d2a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d68 <HAL_GPIO_Init+0x2e0>)
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	3301      	adds	r3, #1
 8001d34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f47f aea9 	bne.w	8001a98 <HAL_GPIO_Init+0x10>
  }
}
 8001d46:	bf00      	nop
 8001d48:	bf00      	nop
 8001d4a:	371c      	adds	r7, #28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40010000 	.word	0x40010000
 8001d5c:	48000400 	.word	0x48000400
 8001d60:	48000800 	.word	0x48000800
 8001d64:	48000c00 	.word	0x48000c00
 8001d68:	40010400 	.word	0x40010400

08001d6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d76:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d006      	beq.n	8001d90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d82:	4a05      	ldr	r2, [pc, #20]	@ (8001d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d88:	88fb      	ldrh	r3, [r7, #6]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff f988 	bl	80010a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40010400 	.word	0x40010400

08001d9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e08d      	b.n	8001eca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d106      	bne.n	8001dc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff fb2a 	bl	800141c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2224      	movs	r2, #36	@ 0x24
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001dec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d107      	bne.n	8001e16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	e006      	b.n	8001e24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d108      	bne.n	8001e3e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	e007      	b.n	8001e4e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69d9      	ldr	r1, [r3, #28]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1a      	ldr	r2, [r3, #32]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	4608      	mov	r0, r1
 8001ede:	4611      	mov	r1, r2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	817b      	strh	r3, [r7, #10]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	813b      	strh	r3, [r7, #8]
 8001eea:	4613      	mov	r3, r2
 8001eec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b20      	cmp	r3, #32
 8001ef8:	f040 80f9 	bne.w	80020ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <HAL_I2C_Mem_Write+0x34>
 8001f02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f0e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0ed      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_I2C_Mem_Write+0x4e>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e0e6      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f2a:	f7ff fc8f 	bl	800184c <HAL_GetTick>
 8001f2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2319      	movs	r3, #25
 8001f36:	2201      	movs	r2, #1
 8001f38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 fac3 	bl	80024c8 <I2C_WaitOnFlagUntilTimeout>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0d1      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2221      	movs	r2, #33	@ 0x21
 8001f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2240      	movs	r2, #64	@ 0x40
 8001f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a3a      	ldr	r2, [r7, #32]
 8001f66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f74:	88f8      	ldrh	r0, [r7, #6]
 8001f76:	893a      	ldrh	r2, [r7, #8]
 8001f78:	8979      	ldrh	r1, [r7, #10]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	4603      	mov	r3, r0
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 f9d3 	bl	8002330 <I2C_RequestMemoryWrite>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0a9      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2bff      	cmp	r3, #255	@ 0xff
 8001fa4:	d90e      	bls.n	8001fc4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	22ff      	movs	r2, #255	@ 0xff
 8001faa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	8979      	ldrh	r1, [r7, #10]
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 fc47 	bl	8002850 <I2C_TransferConfig>
 8001fc2:	e00f      	b.n	8001fe4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	8979      	ldrh	r1, [r7, #10]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 fc36 	bl	8002850 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 fac6 	bl	800257a <I2C_WaitOnTXISFlagUntilTimeout>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e07b      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffc:	781a      	ldrb	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002012:	b29b      	uxth	r3, r3
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002020:	3b01      	subs	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800202c:	b29b      	uxth	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d034      	beq.n	800209c <HAL_I2C_Mem_Write+0x1c8>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002036:	2b00      	cmp	r3, #0
 8002038:	d130      	bne.n	800209c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002040:	2200      	movs	r2, #0
 8002042:	2180      	movs	r1, #128	@ 0x80
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 fa3f 	bl	80024c8 <I2C_WaitOnFlagUntilTimeout>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e04d      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002058:	b29b      	uxth	r3, r3
 800205a:	2bff      	cmp	r3, #255	@ 0xff
 800205c:	d90e      	bls.n	800207c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	22ff      	movs	r2, #255	@ 0xff
 8002062:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002068:	b2da      	uxtb	r2, r3
 800206a:	8979      	ldrh	r1, [r7, #10]
 800206c:	2300      	movs	r3, #0
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 fbeb 	bl	8002850 <I2C_TransferConfig>
 800207a:	e00f      	b.n	800209c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002080:	b29a      	uxth	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800208a:	b2da      	uxtb	r2, r3
 800208c:	8979      	ldrh	r1, [r7, #10]
 800208e:	2300      	movs	r3, #0
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 fbda 	bl	8002850 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d19e      	bne.n	8001fe4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 faac 	bl	8002608 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e01a      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2220      	movs	r2, #32
 80020c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b0a      	ldr	r3, [pc, #40]	@ (80020f8 <HAL_I2C_Mem_Write+0x224>)
 80020ce:	400b      	ands	r3, r1
 80020d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2220      	movs	r2, #32
 80020d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e000      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80020ee:	2302      	movs	r3, #2
  }
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	fe00e800 	.word	0xfe00e800

080020fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af02      	add	r7, sp, #8
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	4608      	mov	r0, r1
 8002106:	4611      	mov	r1, r2
 8002108:	461a      	mov	r2, r3
 800210a:	4603      	mov	r3, r0
 800210c:	817b      	strh	r3, [r7, #10]
 800210e:	460b      	mov	r3, r1
 8002110:	813b      	strh	r3, [r7, #8]
 8002112:	4613      	mov	r3, r2
 8002114:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b20      	cmp	r3, #32
 8002120:	f040 80fd 	bne.w	800231e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <HAL_I2C_Mem_Read+0x34>
 800212a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800212c:	2b00      	cmp	r3, #0
 800212e:	d105      	bne.n	800213c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002136:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0f1      	b.n	8002320 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_I2C_Mem_Read+0x4e>
 8002146:	2302      	movs	r3, #2
 8002148:	e0ea      	b.n	8002320 <HAL_I2C_Mem_Read+0x224>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002152:	f7ff fb7b 	bl	800184c <HAL_GetTick>
 8002156:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	2319      	movs	r3, #25
 800215e:	2201      	movs	r2, #1
 8002160:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 f9af 	bl	80024c8 <I2C_WaitOnFlagUntilTimeout>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0d5      	b.n	8002320 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2222      	movs	r2, #34	@ 0x22
 8002178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2240      	movs	r2, #64	@ 0x40
 8002180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a3a      	ldr	r2, [r7, #32]
 800218e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002194:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800219c:	88f8      	ldrh	r0, [r7, #6]
 800219e:	893a      	ldrh	r2, [r7, #8]
 80021a0:	8979      	ldrh	r1, [r7, #10]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	4603      	mov	r3, r0
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 f913 	bl	80023d8 <I2C_RequestMemoryRead>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0ad      	b.n	8002320 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	2bff      	cmp	r3, #255	@ 0xff
 80021cc:	d90e      	bls.n	80021ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2201      	movs	r2, #1
 80021d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	8979      	ldrh	r1, [r7, #10]
 80021dc:	4b52      	ldr	r3, [pc, #328]	@ (8002328 <HAL_I2C_Mem_Read+0x22c>)
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 fb33 	bl	8002850 <I2C_TransferConfig>
 80021ea:	e00f      	b.n	800220c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	8979      	ldrh	r1, [r7, #10]
 80021fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002328 <HAL_I2C_Mem_Read+0x22c>)
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 fb22 	bl	8002850 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002212:	2200      	movs	r2, #0
 8002214:	2104      	movs	r1, #4
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f956 	bl	80024c8 <I2C_WaitOnFlagUntilTimeout>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e07c      	b.n	8002320 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800224e:	b29b      	uxth	r3, r3
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800225c:	b29b      	uxth	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d034      	beq.n	80022cc <HAL_I2C_Mem_Read+0x1d0>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002266:	2b00      	cmp	r3, #0
 8002268:	d130      	bne.n	80022cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002270:	2200      	movs	r2, #0
 8002272:	2180      	movs	r1, #128	@ 0x80
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 f927 	bl	80024c8 <I2C_WaitOnFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e04d      	b.n	8002320 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002288:	b29b      	uxth	r3, r3
 800228a:	2bff      	cmp	r3, #255	@ 0xff
 800228c:	d90e      	bls.n	80022ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2201      	movs	r2, #1
 8002292:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002298:	b2da      	uxtb	r2, r3
 800229a:	8979      	ldrh	r1, [r7, #10]
 800229c:	2300      	movs	r3, #0
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 fad3 	bl	8002850 <I2C_TransferConfig>
 80022aa:	e00f      	b.n	80022cc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	8979      	ldrh	r1, [r7, #10]
 80022be:	2300      	movs	r3, #0
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 fac2 	bl	8002850 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d19a      	bne.n	800220c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f994 	bl	8002608 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e01a      	b.n	8002320 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2220      	movs	r2, #32
 80022f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b0b      	ldr	r3, [pc, #44]	@ (800232c <HAL_I2C_Mem_Read+0x230>)
 80022fe:	400b      	ands	r3, r1
 8002300:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2220      	movs	r2, #32
 8002306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	e000      	b.n	8002320 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800231e:	2302      	movs	r3, #2
  }
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	80002400 	.word	0x80002400
 800232c:	fe00e800 	.word	0xfe00e800

08002330 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	4608      	mov	r0, r1
 800233a:	4611      	mov	r1, r2
 800233c:	461a      	mov	r2, r3
 800233e:	4603      	mov	r3, r0
 8002340:	817b      	strh	r3, [r7, #10]
 8002342:	460b      	mov	r3, r1
 8002344:	813b      	strh	r3, [r7, #8]
 8002346:	4613      	mov	r3, r2
 8002348:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	b2da      	uxtb	r2, r3
 800234e:	8979      	ldrh	r1, [r7, #10]
 8002350:	4b20      	ldr	r3, [pc, #128]	@ (80023d4 <I2C_RequestMemoryWrite+0xa4>)
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 fa79 	bl	8002850 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	69b9      	ldr	r1, [r7, #24]
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f909 	bl	800257a <I2C_WaitOnTXISFlagUntilTimeout>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e02c      	b.n	80023cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002372:	88fb      	ldrh	r3, [r7, #6]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d105      	bne.n	8002384 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002378:	893b      	ldrh	r3, [r7, #8]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	629a      	str	r2, [r3, #40]	@ 0x28
 8002382:	e015      	b.n	80023b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002384:	893b      	ldrh	r3, [r7, #8]
 8002386:	0a1b      	lsrs	r3, r3, #8
 8002388:	b29b      	uxth	r3, r3
 800238a:	b2da      	uxtb	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002392:	69fa      	ldr	r2, [r7, #28]
 8002394:	69b9      	ldr	r1, [r7, #24]
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 f8ef 	bl	800257a <I2C_WaitOnTXISFlagUntilTimeout>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e012      	b.n	80023cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023a6:	893b      	ldrh	r3, [r7, #8]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	2200      	movs	r2, #0
 80023b8:	2180      	movs	r1, #128	@ 0x80
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 f884 	bl	80024c8 <I2C_WaitOnFlagUntilTimeout>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	80002000 	.word	0x80002000

080023d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af02      	add	r7, sp, #8
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	4608      	mov	r0, r1
 80023e2:	4611      	mov	r1, r2
 80023e4:	461a      	mov	r2, r3
 80023e6:	4603      	mov	r3, r0
 80023e8:	817b      	strh	r3, [r7, #10]
 80023ea:	460b      	mov	r3, r1
 80023ec:	813b      	strh	r3, [r7, #8]
 80023ee:	4613      	mov	r3, r2
 80023f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	8979      	ldrh	r1, [r7, #10]
 80023f8:	4b20      	ldr	r3, [pc, #128]	@ (800247c <I2C_RequestMemoryRead+0xa4>)
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2300      	movs	r3, #0
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 fa26 	bl	8002850 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002404:	69fa      	ldr	r2, [r7, #28]
 8002406:	69b9      	ldr	r1, [r7, #24]
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f8b6 	bl	800257a <I2C_WaitOnTXISFlagUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e02c      	b.n	8002472 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002418:	88fb      	ldrh	r3, [r7, #6]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d105      	bne.n	800242a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800241e:	893b      	ldrh	r3, [r7, #8]
 8002420:	b2da      	uxtb	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	629a      	str	r2, [r3, #40]	@ 0x28
 8002428:	e015      	b.n	8002456 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800242a:	893b      	ldrh	r3, [r7, #8]
 800242c:	0a1b      	lsrs	r3, r3, #8
 800242e:	b29b      	uxth	r3, r3
 8002430:	b2da      	uxtb	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002438:	69fa      	ldr	r2, [r7, #28]
 800243a:	69b9      	ldr	r1, [r7, #24]
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f89c 	bl	800257a <I2C_WaitOnTXISFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e012      	b.n	8002472 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800244c:	893b      	ldrh	r3, [r7, #8]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	2200      	movs	r2, #0
 800245e:	2140      	movs	r1, #64	@ 0x40
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f831 	bl	80024c8 <I2C_WaitOnFlagUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	80002000 	.word	0x80002000

08002480 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b02      	cmp	r3, #2
 8002494:	d103      	bne.n	800249e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2200      	movs	r2, #0
 800249c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d007      	beq.n	80024bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699a      	ldr	r2, [r3, #24]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	619a      	str	r2, [r3, #24]
  }
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	4613      	mov	r3, r2
 80024d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024d8:	e03b      	b.n	8002552 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	6839      	ldr	r1, [r7, #0]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f8d6 	bl	8002690 <I2C_IsErrorOccurred>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e041      	b.n	8002572 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f4:	d02d      	beq.n	8002552 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024f6:	f7ff f9a9 	bl	800184c <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d302      	bcc.n	800250c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d122      	bne.n	8002552 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	4013      	ands	r3, r2
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	429a      	cmp	r2, r3
 800251a:	bf0c      	ite	eq
 800251c:	2301      	moveq	r3, #1
 800251e:	2300      	movne	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	461a      	mov	r2, r3
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	429a      	cmp	r2, r3
 8002528:	d113      	bne.n	8002552 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252e:	f043 0220 	orr.w	r2, r3, #32
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e00f      	b.n	8002572 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699a      	ldr	r2, [r3, #24]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	4013      	ands	r3, r2
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	429a      	cmp	r2, r3
 8002560:	bf0c      	ite	eq
 8002562:	2301      	moveq	r3, #1
 8002564:	2300      	movne	r3, #0
 8002566:	b2db      	uxtb	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	429a      	cmp	r2, r3
 800256e:	d0b4      	beq.n	80024da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002586:	e033      	b.n	80025f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f87f 	bl	8002690 <I2C_IsErrorOccurred>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e031      	b.n	8002600 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a2:	d025      	beq.n	80025f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a4:	f7ff f952 	bl	800184c <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d302      	bcc.n	80025ba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d11a      	bne.n	80025f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d013      	beq.n	80025f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025cc:	f043 0220 	orr.w	r2, r3, #32
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e007      	b.n	8002600 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d1c4      	bne.n	8002588 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002614:	e02f      	b.n	8002676 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68b9      	ldr	r1, [r7, #8]
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f838 	bl	8002690 <I2C_IsErrorOccurred>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e02d      	b.n	8002686 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262a:	f7ff f90f 	bl	800184c <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	429a      	cmp	r2, r3
 8002638:	d302      	bcc.n	8002640 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d11a      	bne.n	8002676 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f003 0320 	and.w	r3, r3, #32
 800264a:	2b20      	cmp	r3, #32
 800264c:	d013      	beq.n	8002676 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002652:	f043 0220 	orr.w	r2, r3, #32
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e007      	b.n	8002686 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b20      	cmp	r3, #32
 8002682:	d1c8      	bne.n	8002616 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	@ 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d068      	beq.n	800278e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2210      	movs	r2, #16
 80026c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026c4:	e049      	b.n	800275a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d045      	beq.n	800275a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026ce:	f7ff f8bd 	bl	800184c <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d302      	bcc.n	80026e4 <I2C_IsErrorOccurred+0x54>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d13a      	bne.n	800275a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002702:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002706:	d121      	bne.n	800274c <I2C_IsErrorOccurred+0xbc>
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800270e:	d01d      	beq.n	800274c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002710:	7cfb      	ldrb	r3, [r7, #19]
 8002712:	2b20      	cmp	r3, #32
 8002714:	d01a      	beq.n	800274c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002724:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002726:	f7ff f891 	bl	800184c <HAL_GetTick>
 800272a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800272c:	e00e      	b.n	800274c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800272e:	f7ff f88d 	bl	800184c <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b19      	cmp	r3, #25
 800273a:	d907      	bls.n	800274c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	f043 0320 	orr.w	r3, r3, #32
 8002742:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800274a:	e006      	b.n	800275a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	2b20      	cmp	r3, #32
 8002758:	d1e9      	bne.n	800272e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f003 0320 	and.w	r3, r3, #32
 8002764:	2b20      	cmp	r3, #32
 8002766:	d003      	beq.n	8002770 <I2C_IsErrorOccurred+0xe0>
 8002768:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0aa      	beq.n	80026c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002770:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002774:	2b00      	cmp	r3, #0
 8002776:	d103      	bne.n	8002780 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2220      	movs	r2, #32
 800277e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00b      	beq.n	80027b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	f043 0308 	orr.w	r3, r3, #8
 80027c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00b      	beq.n	80027fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	f043 0302 	orr.w	r3, r3, #2
 80027ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80027fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002800:	2b00      	cmp	r3, #0
 8002802:	d01c      	beq.n	800283e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f7ff fe3b 	bl	8002480 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b0d      	ldr	r3, [pc, #52]	@ (800284c <I2C_IsErrorOccurred+0x1bc>)
 8002816:	400b      	ands	r3, r1
 8002818:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	431a      	orrs	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800283e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002842:	4618      	mov	r0, r3
 8002844:	3728      	adds	r7, #40	@ 0x28
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	fe00e800 	.word	0xfe00e800

08002850 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	607b      	str	r3, [r7, #4]
 800285a:	460b      	mov	r3, r1
 800285c:	817b      	strh	r3, [r7, #10]
 800285e:	4613      	mov	r3, r2
 8002860:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002862:	897b      	ldrh	r3, [r7, #10]
 8002864:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002868:	7a7b      	ldrb	r3, [r7, #9]
 800286a:	041b      	lsls	r3, r3, #16
 800286c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002870:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	4313      	orrs	r3, r2
 800287a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800287e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	0d5b      	lsrs	r3, r3, #21
 800288a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800288e:	4b08      	ldr	r3, [pc, #32]	@ (80028b0 <I2C_TransferConfig+0x60>)
 8002890:	430b      	orrs	r3, r1
 8002892:	43db      	mvns	r3, r3
 8002894:	ea02 0103 	and.w	r1, r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	430a      	orrs	r2, r1
 80028a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028a2:	bf00      	nop
 80028a4:	371c      	adds	r7, #28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	03ff63ff 	.word	0x03ff63ff

080028b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b20      	cmp	r3, #32
 80028c8:	d138      	bne.n	800293c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e032      	b.n	800293e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2224      	movs	r2, #36	@ 0x24
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0201 	bic.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002906:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6819      	ldr	r1, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	e000      	b.n	800293e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800293c:	2302      	movs	r3, #2
  }
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800294a:	b480      	push	{r7}
 800294c:	b085      	sub	sp, #20
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b20      	cmp	r3, #32
 800295e:	d139      	bne.n	80029d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800296a:	2302      	movs	r3, #2
 800296c:	e033      	b.n	80029d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2224      	movs	r2, #36	@ 0x24
 800297a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0201 	bic.w	r2, r2, #1
 800298c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800299c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e000      	b.n	80029d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029d4:	2302      	movs	r3, #2
  }
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029f4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d102      	bne.n	8002a0a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	f001 b823 	b.w	8003a50 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 817d 	beq.w	8002d1a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a20:	4bbc      	ldr	r3, [pc, #752]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 030c 	and.w	r3, r3, #12
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d00c      	beq.n	8002a46 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a2c:	4bb9      	ldr	r3, [pc, #740]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d15c      	bne.n	8002af2 <HAL_RCC_OscConfig+0x10e>
 8002a38:	4bb6      	ldr	r3, [pc, #728]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a44:	d155      	bne.n	8002af2 <HAL_RCC_OscConfig+0x10e>
 8002a46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a4a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5e:	fab3 f383 	clz	r3, r3
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d102      	bne.n	8002a78 <HAL_RCC_OscConfig+0x94>
 8002a72:	4ba8      	ldr	r3, [pc, #672]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	e015      	b.n	8002aa4 <HAL_RCC_OscConfig+0xc0>
 8002a78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a7c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002a8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a90:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002a94:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002a98:	fa93 f3a3 	rbit	r3, r3
 8002a9c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002aa0:	4b9c      	ldr	r3, [pc, #624]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002aa8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002aac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002ab0:	fa92 f2a2 	rbit	r2, r2
 8002ab4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002ab8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002abc:	fab2 f282 	clz	r2, r2
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	f042 0220 	orr.w	r2, r2, #32
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	f002 021f 	and.w	r2, r2, #31
 8002acc:	2101      	movs	r1, #1
 8002ace:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 811f 	beq.w	8002d18 <HAL_RCC_OscConfig+0x334>
 8002ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ade:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 8116 	bne.w	8002d18 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	f000 bfaf 	b.w	8003a50 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b02:	d106      	bne.n	8002b12 <HAL_RCC_OscConfig+0x12e>
 8002b04:	4b83      	ldr	r3, [pc, #524]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a82      	ldr	r2, [pc, #520]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002b0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	e036      	b.n	8002b80 <HAL_RCC_OscConfig+0x19c>
 8002b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x158>
 8002b22:	4b7c      	ldr	r3, [pc, #496]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a7b      	ldr	r2, [pc, #492]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002b28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	4b79      	ldr	r3, [pc, #484]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a78      	ldr	r2, [pc, #480]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002b34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	e021      	b.n	8002b80 <HAL_RCC_OscConfig+0x19c>
 8002b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x184>
 8002b4e:	4b71      	ldr	r3, [pc, #452]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a70      	ldr	r2, [pc, #448]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002b54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	4b6e      	ldr	r3, [pc, #440]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a6d      	ldr	r2, [pc, #436]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	e00b      	b.n	8002b80 <HAL_RCC_OscConfig+0x19c>
 8002b68:	4b6a      	ldr	r3, [pc, #424]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a69      	ldr	r2, [pc, #420]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002b6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	4b67      	ldr	r3, [pc, #412]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a66      	ldr	r2, [pc, #408]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002b7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b7e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b80:	4b64      	ldr	r3, [pc, #400]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b84:	f023 020f 	bic.w	r2, r3, #15
 8002b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	495f      	ldr	r1, [pc, #380]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d059      	beq.n	8002c5e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002baa:	f7fe fe4f 	bl	800184c <HAL_GetTick>
 8002bae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb4:	f7fe fe4a 	bl	800184c <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b64      	cmp	r3, #100	@ 0x64
 8002bc2:	d902      	bls.n	8002bca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	f000 bf43 	b.w	8003a50 <HAL_RCC_OscConfig+0x106c>
 8002bca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bce:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002bde:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	095b      	lsrs	r3, r3, #5
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d102      	bne.n	8002bfc <HAL_RCC_OscConfig+0x218>
 8002bf6:	4b47      	ldr	r3, [pc, #284]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	e015      	b.n	8002c28 <HAL_RCC_OscConfig+0x244>
 8002bfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c00:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002c08:	fa93 f3a3 	rbit	r3, r3
 8002c0c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002c10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c14:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002c18:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002c24:	4b3b      	ldr	r3, [pc, #236]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c28:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c2c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002c30:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002c34:	fa92 f2a2 	rbit	r2, r2
 8002c38:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002c3c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002c40:	fab2 f282 	clz	r2, r2
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	f042 0220 	orr.w	r2, r2, #32
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	f002 021f 	and.w	r2, r2, #31
 8002c50:	2101      	movs	r1, #1
 8002c52:	fa01 f202 	lsl.w	r2, r1, r2
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0ab      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x1d0>
 8002c5c:	e05d      	b.n	8002d1a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5e:	f7fe fdf5 	bl	800184c <HAL_GetTick>
 8002c62:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c68:	f7fe fdf0 	bl	800184c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b64      	cmp	r3, #100	@ 0x64
 8002c76:	d902      	bls.n	8002c7e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	f000 bee9 	b.w	8003a50 <HAL_RCC_OscConfig+0x106c>
 8002c7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c82:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002c92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d102      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x2cc>
 8002caa:	4b1a      	ldr	r3, [pc, #104]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	e015      	b.n	8002cdc <HAL_RCC_OscConfig+0x2f8>
 8002cb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cb4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002cc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cc8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002ccc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002d14 <HAL_RCC_OscConfig+0x330>)
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cdc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ce0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002ce4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002ce8:	fa92 f2a2 	rbit	r2, r2
 8002cec:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002cf0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002cf4:	fab2 f282 	clz	r2, r2
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	f042 0220 	orr.w	r2, r2, #32
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	f002 021f 	and.w	r2, r2, #31
 8002d04:	2101      	movs	r1, #1
 8002d06:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1ab      	bne.n	8002c68 <HAL_RCC_OscConfig+0x284>
 8002d10:	e003      	b.n	8002d1a <HAL_RCC_OscConfig+0x336>
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 817d 	beq.w	800302a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d30:	4ba6      	ldr	r3, [pc, #664]	@ (8002fcc <HAL_RCC_OscConfig+0x5e8>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00b      	beq.n	8002d54 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d3c:	4ba3      	ldr	r3, [pc, #652]	@ (8002fcc <HAL_RCC_OscConfig+0x5e8>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 030c 	and.w	r3, r3, #12
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d172      	bne.n	8002e2e <HAL_RCC_OscConfig+0x44a>
 8002d48:	4ba0      	ldr	r3, [pc, #640]	@ (8002fcc <HAL_RCC_OscConfig+0x5e8>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d16c      	bne.n	8002e2e <HAL_RCC_OscConfig+0x44a>
 8002d54:	2302      	movs	r3, #2
 8002d56:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002d66:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	095b      	lsrs	r3, r3, #5
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d102      	bne.n	8002d84 <HAL_RCC_OscConfig+0x3a0>
 8002d7e:	4b93      	ldr	r3, [pc, #588]	@ (8002fcc <HAL_RCC_OscConfig+0x5e8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	e013      	b.n	8002dac <HAL_RCC_OscConfig+0x3c8>
 8002d84:	2302      	movs	r3, #2
 8002d86:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002d96:	2302      	movs	r3, #2
 8002d98:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002d9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002da0:	fa93 f3a3 	rbit	r3, r3
 8002da4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002da8:	4b88      	ldr	r3, [pc, #544]	@ (8002fcc <HAL_RCC_OscConfig+0x5e8>)
 8002daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dac:	2202      	movs	r2, #2
 8002dae:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002db2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002db6:	fa92 f2a2 	rbit	r2, r2
 8002dba:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002dbe:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002dc2:	fab2 f282 	clz	r2, r2
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	f042 0220 	orr.w	r2, r2, #32
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	f002 021f 	and.w	r2, r2, #31
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_RCC_OscConfig+0x410>
 8002dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d002      	beq.n	8002df4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	f000 be2e 	b.w	8003a50 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df4:	4b75      	ldr	r3, [pc, #468]	@ (8002fcc <HAL_RCC_OscConfig+0x5e8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	21f8      	movs	r1, #248	@ 0xf8
 8002e0a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002e12:	fa91 f1a1 	rbit	r1, r1
 8002e16:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002e1a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002e1e:	fab1 f181 	clz	r1, r1
 8002e22:	b2c9      	uxtb	r1, r1
 8002e24:	408b      	lsls	r3, r1
 8002e26:	4969      	ldr	r1, [pc, #420]	@ (8002fcc <HAL_RCC_OscConfig+0x5e8>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2c:	e0fd      	b.n	800302a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 8088 	beq.w	8002f50 <HAL_RCC_OscConfig+0x56c>
 8002e40:	2301      	movs	r3, #1
 8002e42:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e46:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002e4a:	fa93 f3a3 	rbit	r3, r3
 8002e4e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002e52:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e56:	fab3 f383 	clz	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e60:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	461a      	mov	r2, r3
 8002e68:	2301      	movs	r3, #1
 8002e6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6c:	f7fe fcee 	bl	800184c <HAL_GetTick>
 8002e70:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e74:	e00a      	b.n	8002e8c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e76:	f7fe fce9 	bl	800184c <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d902      	bls.n	8002e8c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	f000 bde2 	b.w	8003a50 <HAL_RCC_OscConfig+0x106c>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002e9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea2:	fab3 f383 	clz	r3, r3
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	095b      	lsrs	r3, r3, #5
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d102      	bne.n	8002ebc <HAL_RCC_OscConfig+0x4d8>
 8002eb6:	4b45      	ldr	r3, [pc, #276]	@ (8002fcc <HAL_RCC_OscConfig+0x5e8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	e013      	b.n	8002ee4 <HAL_RCC_OscConfig+0x500>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002ec6:	fa93 f3a3 	rbit	r3, r3
 8002eca:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002ece:	2302      	movs	r3, #2
 8002ed0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002ed4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002ed8:	fa93 f3a3 	rbit	r3, r3
 8002edc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002ee0:	4b3a      	ldr	r3, [pc, #232]	@ (8002fcc <HAL_RCC_OscConfig+0x5e8>)
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002eea:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002eee:	fa92 f2a2 	rbit	r2, r2
 8002ef2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002ef6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002efa:	fab2 f282 	clz	r2, r2
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	f042 0220 	orr.w	r2, r2, #32
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	f002 021f 	and.w	r2, r2, #31
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0af      	beq.n	8002e76 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f16:	4b2d      	ldr	r3, [pc, #180]	@ (8002fcc <HAL_RCC_OscConfig+0x5e8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	21f8      	movs	r1, #248	@ 0xf8
 8002f2c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002f34:	fa91 f1a1 	rbit	r1, r1
 8002f38:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002f3c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002f40:	fab1 f181 	clz	r1, r1
 8002f44:	b2c9      	uxtb	r1, r1
 8002f46:	408b      	lsls	r3, r1
 8002f48:	4920      	ldr	r1, [pc, #128]	@ (8002fcc <HAL_RCC_OscConfig+0x5e8>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]
 8002f4e:	e06c      	b.n	800302a <HAL_RCC_OscConfig+0x646>
 8002f50:	2301      	movs	r3, #1
 8002f52:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002f5a:	fa93 f3a3 	rbit	r3, r3
 8002f5e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002f62:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f70:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	461a      	mov	r2, r3
 8002f78:	2300      	movs	r3, #0
 8002f7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7c:	f7fe fc66 	bl	800184c <HAL_GetTick>
 8002f80:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f84:	e00a      	b.n	8002f9c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f86:	f7fe fc61 	bl	800184c <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d902      	bls.n	8002f9c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	f000 bd5a 	b.w	8003a50 <HAL_RCC_OscConfig+0x106c>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002fa6:	fa93 f3a3 	rbit	r3, r3
 8002faa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb2:	fab3 f383 	clz	r3, r3
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	095b      	lsrs	r3, r3, #5
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d104      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x5ec>
 8002fc6:	4b01      	ldr	r3, [pc, #4]	@ (8002fcc <HAL_RCC_OscConfig+0x5e8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	e015      	b.n	8002ff8 <HAL_RCC_OscConfig+0x614>
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002fe8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002ff4:	4bc8      	ldr	r3, [pc, #800]	@ (8003318 <HAL_RCC_OscConfig+0x934>)
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002ffe:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003002:	fa92 f2a2 	rbit	r2, r2
 8003006:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800300a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800300e:	fab2 f282 	clz	r2, r2
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	f042 0220 	orr.w	r2, r2, #32
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	f002 021f 	and.w	r2, r2, #31
 800301e:	2101      	movs	r1, #1
 8003020:	fa01 f202 	lsl.w	r2, r1, r2
 8003024:	4013      	ands	r3, r2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1ad      	bne.n	8002f86 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 8110 	beq.w	8003260 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003044:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d079      	beq.n	8003144 <HAL_RCC_OscConfig+0x760>
 8003050:	2301      	movs	r3, #1
 8003052:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003062:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	461a      	mov	r2, r3
 800306e:	4bab      	ldr	r3, [pc, #684]	@ (800331c <HAL_RCC_OscConfig+0x938>)
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	461a      	mov	r2, r3
 8003076:	2301      	movs	r3, #1
 8003078:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307a:	f7fe fbe7 	bl	800184c <HAL_GetTick>
 800307e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003082:	e00a      	b.n	800309a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003084:	f7fe fbe2 	bl	800184c <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d902      	bls.n	800309a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	f000 bcdb 	b.w	8003a50 <HAL_RCC_OscConfig+0x106c>
 800309a:	2302      	movs	r3, #2
 800309c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80030a4:	fa93 f3a3 	rbit	r3, r3
 80030a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80030ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80030b4:	2202      	movs	r2, #2
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	fa93 f2a3 	rbit	r2, r3
 80030c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80030d8:	2202      	movs	r2, #2
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	fa93 f2a3 	rbit	r2, r3
 80030ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80030f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f4:	4b88      	ldr	r3, [pc, #544]	@ (8003318 <HAL_RCC_OscConfig+0x934>)
 80030f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003100:	2102      	movs	r1, #2
 8003102:	6019      	str	r1, [r3, #0]
 8003104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003108:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	fa93 f1a3 	rbit	r1, r3
 8003112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003116:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800311a:	6019      	str	r1, [r3, #0]
  return result;
 800311c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003120:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	fab3 f383 	clz	r3, r3
 800312a:	b2db      	uxtb	r3, r3
 800312c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003130:	b2db      	uxtb	r3, r3
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	2101      	movs	r1, #1
 8003138:	fa01 f303 	lsl.w	r3, r1, r3
 800313c:	4013      	ands	r3, r2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0a0      	beq.n	8003084 <HAL_RCC_OscConfig+0x6a0>
 8003142:	e08d      	b.n	8003260 <HAL_RCC_OscConfig+0x87c>
 8003144:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003148:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800314c:	2201      	movs	r2, #1
 800314e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003154:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	fa93 f2a3 	rbit	r2, r3
 800315e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003162:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003166:	601a      	str	r2, [r3, #0]
  return result;
 8003168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003170:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	4b68      	ldr	r3, [pc, #416]	@ (800331c <HAL_RCC_OscConfig+0x938>)
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	461a      	mov	r2, r3
 8003182:	2300      	movs	r3, #0
 8003184:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003186:	f7fe fb61 	bl	800184c <HAL_GetTick>
 800318a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003190:	f7fe fb5c 	bl	800184c <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d902      	bls.n	80031a6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	f000 bc55 	b.w	8003a50 <HAL_RCC_OscConfig+0x106c>
 80031a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031aa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80031ae:	2202      	movs	r2, #2
 80031b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	fa93 f2a3 	rbit	r2, r3
 80031c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80031d2:	2202      	movs	r2, #2
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031da:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	fa93 f2a3 	rbit	r2, r3
 80031e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80031f6:	2202      	movs	r2, #2
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	fa93 f2a3 	rbit	r2, r3
 8003208:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003210:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003212:	4b41      	ldr	r3, [pc, #260]	@ (8003318 <HAL_RCC_OscConfig+0x934>)
 8003214:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800321a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800321e:	2102      	movs	r1, #2
 8003220:	6019      	str	r1, [r3, #0]
 8003222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003226:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	fa93 f1a3 	rbit	r1, r3
 8003230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003234:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003238:	6019      	str	r1, [r3, #0]
  return result;
 800323a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800324e:	b2db      	uxtb	r3, r3
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	2101      	movs	r1, #1
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d197      	bne.n	8003190 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003264:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 81a1 	beq.w	80035b8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003276:	2300      	movs	r3, #0
 8003278:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800327c:	4b26      	ldr	r3, [pc, #152]	@ (8003318 <HAL_RCC_OscConfig+0x934>)
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d116      	bne.n	80032b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003288:	4b23      	ldr	r3, [pc, #140]	@ (8003318 <HAL_RCC_OscConfig+0x934>)
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	4a22      	ldr	r2, [pc, #136]	@ (8003318 <HAL_RCC_OscConfig+0x934>)
 800328e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003292:	61d3      	str	r3, [r2, #28]
 8003294:	4b20      	ldr	r3, [pc, #128]	@ (8003318 <HAL_RCC_OscConfig+0x934>)
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800329c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032aa:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80032ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80032b0:	2301      	movs	r3, #1
 80032b2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003320 <HAL_RCC_OscConfig+0x93c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d11a      	bne.n	80032f8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032c2:	4b17      	ldr	r3, [pc, #92]	@ (8003320 <HAL_RCC_OscConfig+0x93c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a16      	ldr	r2, [pc, #88]	@ (8003320 <HAL_RCC_OscConfig+0x93c>)
 80032c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ce:	f7fe fabd 	bl	800184c <HAL_GetTick>
 80032d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d6:	e009      	b.n	80032ec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d8:	f7fe fab8 	bl	800184c <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b64      	cmp	r3, #100	@ 0x64
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e3b1      	b.n	8003a50 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003320 <HAL_RCC_OscConfig+0x93c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0ef      	beq.n	80032d8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d10d      	bne.n	8003324 <HAL_RCC_OscConfig+0x940>
 8003308:	4b03      	ldr	r3, [pc, #12]	@ (8003318 <HAL_RCC_OscConfig+0x934>)
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	4a02      	ldr	r2, [pc, #8]	@ (8003318 <HAL_RCC_OscConfig+0x934>)
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	6213      	str	r3, [r2, #32]
 8003314:	e03c      	b.n	8003390 <HAL_RCC_OscConfig+0x9ac>
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000
 800331c:	10908120 	.word	0x10908120
 8003320:	40007000 	.word	0x40007000
 8003324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003328:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10c      	bne.n	800334e <HAL_RCC_OscConfig+0x96a>
 8003334:	4bc1      	ldr	r3, [pc, #772]	@ (800363c <HAL_RCC_OscConfig+0xc58>)
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	4ac0      	ldr	r2, [pc, #768]	@ (800363c <HAL_RCC_OscConfig+0xc58>)
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	6213      	str	r3, [r2, #32]
 8003340:	4bbe      	ldr	r3, [pc, #760]	@ (800363c <HAL_RCC_OscConfig+0xc58>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	4abd      	ldr	r2, [pc, #756]	@ (800363c <HAL_RCC_OscConfig+0xc58>)
 8003346:	f023 0304 	bic.w	r3, r3, #4
 800334a:	6213      	str	r3, [r2, #32]
 800334c:	e020      	b.n	8003390 <HAL_RCC_OscConfig+0x9ac>
 800334e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003352:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	2b05      	cmp	r3, #5
 800335c:	d10c      	bne.n	8003378 <HAL_RCC_OscConfig+0x994>
 800335e:	4bb7      	ldr	r3, [pc, #732]	@ (800363c <HAL_RCC_OscConfig+0xc58>)
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	4ab6      	ldr	r2, [pc, #728]	@ (800363c <HAL_RCC_OscConfig+0xc58>)
 8003364:	f043 0304 	orr.w	r3, r3, #4
 8003368:	6213      	str	r3, [r2, #32]
 800336a:	4bb4      	ldr	r3, [pc, #720]	@ (800363c <HAL_RCC_OscConfig+0xc58>)
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	4ab3      	ldr	r2, [pc, #716]	@ (800363c <HAL_RCC_OscConfig+0xc58>)
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	6213      	str	r3, [r2, #32]
 8003376:	e00b      	b.n	8003390 <HAL_RCC_OscConfig+0x9ac>
 8003378:	4bb0      	ldr	r3, [pc, #704]	@ (800363c <HAL_RCC_OscConfig+0xc58>)
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	4aaf      	ldr	r2, [pc, #700]	@ (800363c <HAL_RCC_OscConfig+0xc58>)
 800337e:	f023 0301 	bic.w	r3, r3, #1
 8003382:	6213      	str	r3, [r2, #32]
 8003384:	4bad      	ldr	r3, [pc, #692]	@ (800363c <HAL_RCC_OscConfig+0xc58>)
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	4aac      	ldr	r2, [pc, #688]	@ (800363c <HAL_RCC_OscConfig+0xc58>)
 800338a:	f023 0304 	bic.w	r3, r3, #4
 800338e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003394:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 8081 	beq.w	80034a4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a2:	f7fe fa53 	bl	800184c <HAL_GetTick>
 80033a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033aa:	e00b      	b.n	80033c4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ac:	f7fe fa4e 	bl	800184c <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033bc:	4293      	cmp	r3, r2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e345      	b.n	8003a50 <HAL_RCC_OscConfig+0x106c>
 80033c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033cc:	2202      	movs	r2, #2
 80033ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033d4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	fa93 f2a3 	rbit	r2, r3
 80033de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80033f0:	2202      	movs	r2, #2
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	fa93 f2a3 	rbit	r2, r3
 8003402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003406:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800340a:	601a      	str	r2, [r3, #0]
  return result;
 800340c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003410:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003414:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003416:	fab3 f383 	clz	r3, r3
 800341a:	b2db      	uxtb	r3, r3
 800341c:	095b      	lsrs	r3, r3, #5
 800341e:	b2db      	uxtb	r3, r3
 8003420:	f043 0302 	orr.w	r3, r3, #2
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d102      	bne.n	8003430 <HAL_RCC_OscConfig+0xa4c>
 800342a:	4b84      	ldr	r3, [pc, #528]	@ (800363c <HAL_RCC_OscConfig+0xc58>)
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	e013      	b.n	8003458 <HAL_RCC_OscConfig+0xa74>
 8003430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003434:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003438:	2202      	movs	r2, #2
 800343a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003440:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	fa93 f2a3 	rbit	r2, r3
 800344a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	4b79      	ldr	r3, [pc, #484]	@ (800363c <HAL_RCC_OscConfig+0xc58>)
 8003456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003458:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800345c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003460:	2102      	movs	r1, #2
 8003462:	6011      	str	r1, [r2, #0]
 8003464:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003468:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	fa92 f1a2 	rbit	r1, r2
 8003472:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003476:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800347a:	6011      	str	r1, [r2, #0]
  return result;
 800347c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003480:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	fab2 f282 	clz	r2, r2
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	f002 021f 	and.w	r2, r2, #31
 8003496:	2101      	movs	r1, #1
 8003498:	fa01 f202 	lsl.w	r2, r1, r2
 800349c:	4013      	ands	r3, r2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d084      	beq.n	80033ac <HAL_RCC_OscConfig+0x9c8>
 80034a2:	e07f      	b.n	80035a4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a4:	f7fe f9d2 	bl	800184c <HAL_GetTick>
 80034a8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ac:	e00b      	b.n	80034c6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ae:	f7fe f9cd 	bl	800184c <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e2c4      	b.n	8003a50 <HAL_RCC_OscConfig+0x106c>
 80034c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ca:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80034ce:	2202      	movs	r2, #2
 80034d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	fa93 f2a3 	rbit	r2, r3
 80034e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ee:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80034f2:	2202      	movs	r2, #2
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034fa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	fa93 f2a3 	rbit	r2, r3
 8003504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003508:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800350c:	601a      	str	r2, [r3, #0]
  return result;
 800350e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003512:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003516:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003518:	fab3 f383 	clz	r3, r3
 800351c:	b2db      	uxtb	r3, r3
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	b2db      	uxtb	r3, r3
 8003522:	f043 0302 	orr.w	r3, r3, #2
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d102      	bne.n	8003532 <HAL_RCC_OscConfig+0xb4e>
 800352c:	4b43      	ldr	r3, [pc, #268]	@ (800363c <HAL_RCC_OscConfig+0xc58>)
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	e013      	b.n	800355a <HAL_RCC_OscConfig+0xb76>
 8003532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003536:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800353a:	2202      	movs	r2, #2
 800353c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003542:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	fa93 f2a3 	rbit	r2, r3
 800354c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003550:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	4b39      	ldr	r3, [pc, #228]	@ (800363c <HAL_RCC_OscConfig+0xc58>)
 8003558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800355e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003562:	2102      	movs	r1, #2
 8003564:	6011      	str	r1, [r2, #0]
 8003566:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800356a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	fa92 f1a2 	rbit	r1, r2
 8003574:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003578:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800357c:	6011      	str	r1, [r2, #0]
  return result;
 800357e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003582:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003586:	6812      	ldr	r2, [r2, #0]
 8003588:	fab2 f282 	clz	r2, r2
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	f002 021f 	and.w	r2, r2, #31
 8003598:	2101      	movs	r1, #1
 800359a:	fa01 f202 	lsl.w	r2, r1, r2
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d184      	bne.n	80034ae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d105      	bne.n	80035b8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ac:	4b23      	ldr	r3, [pc, #140]	@ (800363c <HAL_RCC_OscConfig+0xc58>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	4a22      	ldr	r2, [pc, #136]	@ (800363c <HAL_RCC_OscConfig+0xc58>)
 80035b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8242 	beq.w	8003a4e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035ca:	4b1c      	ldr	r3, [pc, #112]	@ (800363c <HAL_RCC_OscConfig+0xc58>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f003 030c 	and.w	r3, r3, #12
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	f000 8213 	beq.w	80039fe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	f040 8162 	bne.w	80038ae <HAL_RCC_OscConfig+0xeca>
 80035ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ee:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80035f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035fc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	fa93 f2a3 	rbit	r2, r3
 8003606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800360a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800360e:	601a      	str	r2, [r3, #0]
  return result;
 8003610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003614:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003618:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361a:	fab3 f383 	clz	r3, r3
 800361e:	b2db      	uxtb	r3, r3
 8003620:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003624:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	461a      	mov	r2, r3
 800362c:	2300      	movs	r3, #0
 800362e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003630:	f7fe f90c 	bl	800184c <HAL_GetTick>
 8003634:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003638:	e00c      	b.n	8003654 <HAL_RCC_OscConfig+0xc70>
 800363a:	bf00      	nop
 800363c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003640:	f7fe f904 	bl	800184c <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e1fd      	b.n	8003a50 <HAL_RCC_OscConfig+0x106c>
 8003654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003658:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800365c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003660:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003666:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	fa93 f2a3 	rbit	r2, r3
 8003670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003674:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003678:	601a      	str	r2, [r3, #0]
  return result;
 800367a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800367e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003682:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003684:	fab3 f383 	clz	r3, r3
 8003688:	b2db      	uxtb	r3, r3
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b01      	cmp	r3, #1
 8003696:	d102      	bne.n	800369e <HAL_RCC_OscConfig+0xcba>
 8003698:	4bb0      	ldr	r3, [pc, #704]	@ (800395c <HAL_RCC_OscConfig+0xf78>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	e027      	b.n	80036ee <HAL_RCC_OscConfig+0xd0a>
 800369e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80036a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	fa93 f2a3 	rbit	r2, r3
 80036ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036be:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80036cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	fa93 f2a3 	rbit	r2, r3
 80036e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	4b9c      	ldr	r3, [pc, #624]	@ (800395c <HAL_RCC_OscConfig+0xf78>)
 80036ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036f2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80036f6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80036fa:	6011      	str	r1, [r2, #0]
 80036fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003700:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003704:	6812      	ldr	r2, [r2, #0]
 8003706:	fa92 f1a2 	rbit	r1, r2
 800370a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800370e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003712:	6011      	str	r1, [r2, #0]
  return result;
 8003714:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003718:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	fab2 f282 	clz	r2, r2
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	f042 0220 	orr.w	r2, r2, #32
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	f002 021f 	and.w	r2, r2, #31
 800372e:	2101      	movs	r1, #1
 8003730:	fa01 f202 	lsl.w	r2, r1, r2
 8003734:	4013      	ands	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d182      	bne.n	8003640 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800373a:	4b88      	ldr	r3, [pc, #544]	@ (800395c <HAL_RCC_OscConfig+0xf78>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003742:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003746:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800374e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003752:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	430b      	orrs	r3, r1
 800375c:	497f      	ldr	r1, [pc, #508]	@ (800395c <HAL_RCC_OscConfig+0xf78>)
 800375e:	4313      	orrs	r3, r2
 8003760:	604b      	str	r3, [r1, #4]
 8003762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003766:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800376a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800376e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003770:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003774:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	fa93 f2a3 	rbit	r2, r3
 800377e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003782:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003786:	601a      	str	r2, [r3, #0]
  return result;
 8003788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800378c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003790:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003792:	fab3 f383 	clz	r3, r3
 8003796:	b2db      	uxtb	r3, r3
 8003798:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800379c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	461a      	mov	r2, r3
 80037a4:	2301      	movs	r3, #1
 80037a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a8:	f7fe f850 	bl	800184c <HAL_GetTick>
 80037ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037b0:	e009      	b.n	80037c6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b2:	f7fe f84b 	bl	800184c <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e144      	b.n	8003a50 <HAL_RCC_OscConfig+0x106c>
 80037c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ca:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80037ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	fa93 f2a3 	rbit	r2, r3
 80037e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80037ea:	601a      	str	r2, [r3, #0]
  return result;
 80037ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80037f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037f6:	fab3 f383 	clz	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	095b      	lsrs	r3, r3, #5
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b01      	cmp	r3, #1
 8003808:	d102      	bne.n	8003810 <HAL_RCC_OscConfig+0xe2c>
 800380a:	4b54      	ldr	r3, [pc, #336]	@ (800395c <HAL_RCC_OscConfig+0xf78>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	e027      	b.n	8003860 <HAL_RCC_OscConfig+0xe7c>
 8003810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003814:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003818:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800381c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003822:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	fa93 f2a3 	rbit	r2, r3
 800382c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003830:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800383a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800383e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003848:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	fa93 f2a3 	rbit	r2, r3
 8003852:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003856:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	4b3f      	ldr	r3, [pc, #252]	@ (800395c <HAL_RCC_OscConfig+0xf78>)
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003864:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003868:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800386c:	6011      	str	r1, [r2, #0]
 800386e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003872:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	fa92 f1a2 	rbit	r1, r2
 800387c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003880:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003884:	6011      	str	r1, [r2, #0]
  return result;
 8003886:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800388a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800388e:	6812      	ldr	r2, [r2, #0]
 8003890:	fab2 f282 	clz	r2, r2
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	f042 0220 	orr.w	r2, r2, #32
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	f002 021f 	and.w	r2, r2, #31
 80038a0:	2101      	movs	r1, #1
 80038a2:	fa01 f202 	lsl.w	r2, r1, r2
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d082      	beq.n	80037b2 <HAL_RCC_OscConfig+0xdce>
 80038ac:	e0cf      	b.n	8003a4e <HAL_RCC_OscConfig+0x106a>
 80038ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038b2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80038b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038c0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	fa93 f2a3 	rbit	r2, r3
 80038ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ce:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80038d2:	601a      	str	r2, [r3, #0]
  return result;
 80038d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80038dc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80038e8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	461a      	mov	r2, r3
 80038f0:	2300      	movs	r3, #0
 80038f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f4:	f7fd ffaa 	bl	800184c <HAL_GetTick>
 80038f8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038fc:	e009      	b.n	8003912 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038fe:	f7fd ffa5 	bl	800184c <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e09e      	b.n	8003a50 <HAL_RCC_OscConfig+0x106c>
 8003912:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003916:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800391a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800391e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003924:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	fa93 f2a3 	rbit	r2, r3
 800392e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003932:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003936:	601a      	str	r2, [r3, #0]
  return result;
 8003938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800393c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003940:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003942:	fab3 f383 	clz	r3, r3
 8003946:	b2db      	uxtb	r3, r3
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b01      	cmp	r3, #1
 8003954:	d104      	bne.n	8003960 <HAL_RCC_OscConfig+0xf7c>
 8003956:	4b01      	ldr	r3, [pc, #4]	@ (800395c <HAL_RCC_OscConfig+0xf78>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	e029      	b.n	80039b0 <HAL_RCC_OscConfig+0xfcc>
 800395c:	40021000 	.word	0x40021000
 8003960:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003964:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003968:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800396c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003972:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	fa93 f2a3 	rbit	r2, r3
 800397c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003980:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800398a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800398e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003998:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	fa93 f2a3 	rbit	r2, r3
 80039a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039a6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	4b2b      	ldr	r3, [pc, #172]	@ (8003a5c <HAL_RCC_OscConfig+0x1078>)
 80039ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039b4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80039b8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80039bc:	6011      	str	r1, [r2, #0]
 80039be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039c2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80039c6:	6812      	ldr	r2, [r2, #0]
 80039c8:	fa92 f1a2 	rbit	r1, r2
 80039cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039d0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80039d4:	6011      	str	r1, [r2, #0]
  return result;
 80039d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039da:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80039de:	6812      	ldr	r2, [r2, #0]
 80039e0:	fab2 f282 	clz	r2, r2
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	f042 0220 	orr.w	r2, r2, #32
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	f002 021f 	and.w	r2, r2, #31
 80039f0:	2101      	movs	r1, #1
 80039f2:	fa01 f202 	lsl.w	r2, r1, r2
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d180      	bne.n	80038fe <HAL_RCC_OscConfig+0xf1a>
 80039fc:	e027      	b.n	8003a4e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e01e      	b.n	8003a50 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a12:	4b12      	ldr	r3, [pc, #72]	@ (8003a5c <HAL_RCC_OscConfig+0x1078>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003a1e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d10b      	bne.n	8003a4a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003a32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003a36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d001      	beq.n	8003a4e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40021000 	.word	0x40021000

08003a60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b09e      	sub	sp, #120	@ 0x78
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e162      	b.n	8003d3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a78:	4b90      	ldr	r3, [pc, #576]	@ (8003cbc <HAL_RCC_ClockConfig+0x25c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d910      	bls.n	8003aa8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a86:	4b8d      	ldr	r3, [pc, #564]	@ (8003cbc <HAL_RCC_ClockConfig+0x25c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f023 0207 	bic.w	r2, r3, #7
 8003a8e:	498b      	ldr	r1, [pc, #556]	@ (8003cbc <HAL_RCC_ClockConfig+0x25c>)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a96:	4b89      	ldr	r3, [pc, #548]	@ (8003cbc <HAL_RCC_ClockConfig+0x25c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e14a      	b.n	8003d3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab4:	4b82      	ldr	r3, [pc, #520]	@ (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	497f      	ldr	r1, [pc, #508]	@ (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 80dc 	beq.w	8003c8c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d13c      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xf6>
 8003adc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ae0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ae4:	fa93 f3a3 	rbit	r3, r3
 8003ae8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003aea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aec:	fab3 f383 	clz	r3, r3
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d102      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xa6>
 8003b00:	4b6f      	ldr	r3, [pc, #444]	@ (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	e00f      	b.n	8003b26 <HAL_RCC_ClockConfig+0xc6>
 8003b06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b0a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b0e:	fa93 f3a3 	rbit	r3, r3
 8003b12:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b18:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b1c:	fa93 f3a3 	rbit	r3, r3
 8003b20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b22:	4b67      	ldr	r3, [pc, #412]	@ (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b2a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b2e:	fa92 f2a2 	rbit	r2, r2
 8003b32:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003b34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003b36:	fab2 f282 	clz	r2, r2
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	f042 0220 	orr.w	r2, r2, #32
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	f002 021f 	and.w	r2, r2, #31
 8003b46:	2101      	movs	r1, #1
 8003b48:	fa01 f202 	lsl.w	r2, r1, r2
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d17b      	bne.n	8003c4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e0f3      	b.n	8003d3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d13c      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0x178>
 8003b5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b62:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b66:	fa93 f3a3 	rbit	r3, r3
 8003b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003b6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b6e:	fab3 f383 	clz	r3, r3
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	095b      	lsrs	r3, r3, #5
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d102      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x128>
 8003b82:	4b4f      	ldr	r3, [pc, #316]	@ (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	e00f      	b.n	8003ba8 <HAL_RCC_ClockConfig+0x148>
 8003b88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b90:	fa93 f3a3 	rbit	r3, r3
 8003b94:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b9e:	fa93 f3a3 	rbit	r3, r3
 8003ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ba4:	4b46      	ldr	r3, [pc, #280]	@ (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bac:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003bae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003bb0:	fa92 f2a2 	rbit	r2, r2
 8003bb4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003bb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bb8:	fab2 f282 	clz	r2, r2
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	f042 0220 	orr.w	r2, r2, #32
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	f002 021f 	and.w	r2, r2, #31
 8003bc8:	2101      	movs	r1, #1
 8003bca:	fa01 f202 	lsl.w	r2, r1, r2
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d13a      	bne.n	8003c4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0b2      	b.n	8003d3e <HAL_RCC_ClockConfig+0x2de>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bde:	fa93 f3a3 	rbit	r3, r3
 8003be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be6:	fab3 f383 	clz	r3, r3
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d102      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x1a0>
 8003bfa:	4b31      	ldr	r3, [pc, #196]	@ (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	e00d      	b.n	8003c1c <HAL_RCC_ClockConfig+0x1bc>
 8003c00:	2302      	movs	r3, #2
 8003c02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	623b      	str	r3, [r7, #32]
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	fa93 f3a3 	rbit	r3, r3
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	4b29      	ldr	r3, [pc, #164]	@ (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	61ba      	str	r2, [r7, #24]
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	fa92 f2a2 	rbit	r2, r2
 8003c26:	617a      	str	r2, [r7, #20]
  return result;
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	fab2 f282 	clz	r2, r2
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	f042 0220 	orr.w	r2, r2, #32
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	f002 021f 	and.w	r2, r2, #31
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e079      	b.n	8003d3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f023 0203 	bic.w	r2, r3, #3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	491a      	ldr	r1, [pc, #104]	@ (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c5c:	f7fd fdf6 	bl	800184c <HAL_GetTick>
 8003c60:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c62:	e00a      	b.n	8003c7a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c64:	f7fd fdf2 	bl	800184c <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e061      	b.n	8003d3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7a:	4b11      	ldr	r3, [pc, #68]	@ (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f003 020c 	and.w	r2, r3, #12
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d1eb      	bne.n	8003c64 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003cbc <HAL_RCC_ClockConfig+0x25c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d214      	bcs.n	8003cc4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9a:	4b08      	ldr	r3, [pc, #32]	@ (8003cbc <HAL_RCC_ClockConfig+0x25c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f023 0207 	bic.w	r2, r3, #7
 8003ca2:	4906      	ldr	r1, [pc, #24]	@ (8003cbc <HAL_RCC_ClockConfig+0x25c>)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003caa:	4b04      	ldr	r3, [pc, #16]	@ (8003cbc <HAL_RCC_ClockConfig+0x25c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d005      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e040      	b.n	8003d3e <HAL_RCC_ClockConfig+0x2de>
 8003cbc:	40022000 	.word	0x40022000
 8003cc0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d008      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d48 <HAL_RCC_ClockConfig+0x2e8>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	491a      	ldr	r1, [pc, #104]	@ (8003d48 <HAL_RCC_ClockConfig+0x2e8>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d009      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cee:	4b16      	ldr	r3, [pc, #88]	@ (8003d48 <HAL_RCC_ClockConfig+0x2e8>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4912      	ldr	r1, [pc, #72]	@ (8003d48 <HAL_RCC_ClockConfig+0x2e8>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d02:	f000 f829 	bl	8003d58 <HAL_RCC_GetSysClockFreq>
 8003d06:	4601      	mov	r1, r0
 8003d08:	4b0f      	ldr	r3, [pc, #60]	@ (8003d48 <HAL_RCC_ClockConfig+0x2e8>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d10:	22f0      	movs	r2, #240	@ 0xf0
 8003d12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	fa92 f2a2 	rbit	r2, r2
 8003d1a:	60fa      	str	r2, [r7, #12]
  return result;
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	fab2 f282 	clz	r2, r2
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	40d3      	lsrs	r3, r2
 8003d26:	4a09      	ldr	r2, [pc, #36]	@ (8003d4c <HAL_RCC_ClockConfig+0x2ec>)
 8003d28:	5cd3      	ldrb	r3, [r2, r3]
 8003d2a:	fa21 f303 	lsr.w	r3, r1, r3
 8003d2e:	4a08      	ldr	r2, [pc, #32]	@ (8003d50 <HAL_RCC_ClockConfig+0x2f0>)
 8003d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d32:	4b08      	ldr	r3, [pc, #32]	@ (8003d54 <HAL_RCC_ClockConfig+0x2f4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fd fd44 	bl	80017c4 <HAL_InitTick>
  
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3778      	adds	r7, #120	@ 0x78
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	080076f8 	.word	0x080076f8
 8003d50:	20000000 	.word	0x20000000
 8003d54:	20000004 	.word	0x20000004

08003d58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	2300      	movs	r3, #0
 8003d64:	60bb      	str	r3, [r7, #8]
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003d72:	4b1e      	ldr	r3, [pc, #120]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x94>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d002      	beq.n	8003d88 <HAL_RCC_GetSysClockFreq+0x30>
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d003      	beq.n	8003d8e <HAL_RCC_GetSysClockFreq+0x36>
 8003d86:	e026      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d88:	4b19      	ldr	r3, [pc, #100]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d8a:	613b      	str	r3, [r7, #16]
      break;
 8003d8c:	e026      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	0c9b      	lsrs	r3, r3, #18
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	4a17      	ldr	r2, [pc, #92]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d98:	5cd3      	ldrb	r3, [r2, r3]
 8003d9a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003d9c:	4b13      	ldr	r3, [pc, #76]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x94>)
 8003d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	4a14      	ldr	r2, [pc, #80]	@ (8003df8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003da6:	5cd3      	ldrb	r3, [r2, r3]
 8003da8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003db4:	4a0e      	ldr	r2, [pc, #56]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	fb02 f303 	mul.w	r3, r2, r3
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	e004      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003dca:	fb02 f303 	mul.w	r3, r2, r3
 8003dce:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	613b      	str	r3, [r7, #16]
      break;
 8003dd4:	e002      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dd6:	4b06      	ldr	r3, [pc, #24]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dd8:	613b      	str	r3, [r7, #16]
      break;
 8003dda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ddc:	693b      	ldr	r3, [r7, #16]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	371c      	adds	r7, #28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40021000 	.word	0x40021000
 8003df0:	007a1200 	.word	0x007a1200
 8003df4:	08007710 	.word	0x08007710
 8003df8:	08007720 	.word	0x08007720
 8003dfc:	003d0900 	.word	0x003d0900

08003e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e04:	4b03      	ldr	r3, [pc, #12]	@ (8003e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e06:	681b      	ldr	r3, [r3, #0]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	20000000 	.word	0x20000000

08003e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003e1e:	f7ff ffef 	bl	8003e00 <HAL_RCC_GetHCLKFreq>
 8003e22:	4601      	mov	r1, r0
 8003e24:	4b0b      	ldr	r3, [pc, #44]	@ (8003e54 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e2c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003e30:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	fa92 f2a2 	rbit	r2, r2
 8003e38:	603a      	str	r2, [r7, #0]
  return result;
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	fab2 f282 	clz	r2, r2
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	40d3      	lsrs	r3, r2
 8003e44:	4a04      	ldr	r2, [pc, #16]	@ (8003e58 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003e46:	5cd3      	ldrb	r3, [r2, r3]
 8003e48:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40021000 	.word	0x40021000
 8003e58:	08007708 	.word	0x08007708

08003e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003e62:	f7ff ffcd 	bl	8003e00 <HAL_RCC_GetHCLKFreq>
 8003e66:	4601      	mov	r1, r0
 8003e68:	4b0b      	ldr	r3, [pc, #44]	@ (8003e98 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003e70:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003e74:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	fa92 f2a2 	rbit	r2, r2
 8003e7c:	603a      	str	r2, [r7, #0]
  return result;
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	fab2 f282 	clz	r2, r2
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	40d3      	lsrs	r3, r2
 8003e88:	4a04      	ldr	r2, [pc, #16]	@ (8003e9c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003e8a:	5cd3      	ldrb	r3, [r2, r3]
 8003e8c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003e90:	4618      	mov	r0, r3
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	08007708 	.word	0x08007708

08003ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b092      	sub	sp, #72	@ 0x48
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80d4 	beq.w	800406c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ec4:	4b4e      	ldr	r3, [pc, #312]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10e      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ed0:	4b4b      	ldr	r3, [pc, #300]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	4a4a      	ldr	r2, [pc, #296]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eda:	61d3      	str	r3, [r2, #28]
 8003edc:	4b48      	ldr	r3, [pc, #288]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eee:	4b45      	ldr	r3, [pc, #276]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d118      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003efa:	4b42      	ldr	r3, [pc, #264]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a41      	ldr	r2, [pc, #260]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f04:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f06:	f7fd fca1 	bl	800184c <HAL_GetTick>
 8003f0a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0c:	e008      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f0e:	f7fd fc9d 	bl	800184c <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b64      	cmp	r3, #100	@ 0x64
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e14b      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f20:	4b38      	ldr	r3, [pc, #224]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f2c:	4b34      	ldr	r3, [pc, #208]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 8084 	beq.w	8004046 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f46:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d07c      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f4c:	4b2c      	ldr	r3, [pc, #176]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f56:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003f5a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5e:	fa93 f3a3 	rbit	r3, r3
 8003f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f66:	fab3 f383 	clz	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4b26      	ldr	r3, [pc, #152]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f70:	4413      	add	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	461a      	mov	r2, r3
 8003f76:	2301      	movs	r3, #1
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f82:	fa93 f3a3 	rbit	r3, r3
 8003f86:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f8a:	fab3 f383 	clz	r3, r3
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	4b1d      	ldr	r3, [pc, #116]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f94:	4413      	add	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	461a      	mov	r2, r3
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f9e:	4a18      	ldr	r2, [pc, #96]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fa2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d04b      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fae:	f7fd fc4d 	bl	800184c <HAL_GetTick>
 8003fb2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb4:	e00a      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb6:	f7fd fc49 	bl	800184c <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e0f5      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd2:	fa93 f3a3 	rbit	r3, r3
 8003fd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fd8:	2302      	movs	r3, #2
 8003fda:	623b      	str	r3, [r7, #32]
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	fa93 f3a3 	rbit	r3, r3
 8003fe2:	61fb      	str	r3, [r7, #28]
  return result;
 8003fe4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe6:	fab3 f383 	clz	r3, r3
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	095b      	lsrs	r3, r3, #5
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	f043 0302 	orr.w	r3, r3, #2
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d108      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003ffa:	4b01      	ldr	r3, [pc, #4]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	e00d      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004000:	40021000 	.word	0x40021000
 8004004:	40007000 	.word	0x40007000
 8004008:	10908100 	.word	0x10908100
 800400c:	2302      	movs	r3, #2
 800400e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	fa93 f3a3 	rbit	r3, r3
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	4b69      	ldr	r3, [pc, #420]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	2202      	movs	r2, #2
 800401e:	613a      	str	r2, [r7, #16]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	fa92 f2a2 	rbit	r2, r2
 8004026:	60fa      	str	r2, [r7, #12]
  return result;
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	fab2 f282 	clz	r2, r2
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	f002 021f 	and.w	r2, r2, #31
 800403a:	2101      	movs	r1, #1
 800403c:	fa01 f202 	lsl.w	r2, r1, r2
 8004040:	4013      	ands	r3, r2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0b7      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004046:	4b5e      	ldr	r3, [pc, #376]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	495b      	ldr	r1, [pc, #364]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004054:	4313      	orrs	r3, r2
 8004056:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004058:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800405c:	2b01      	cmp	r3, #1
 800405e:	d105      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004060:	4b57      	ldr	r3, [pc, #348]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	4a56      	ldr	r2, [pc, #344]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004066:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800406a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004078:	4b51      	ldr	r3, [pc, #324]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800407a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407c:	f023 0203 	bic.w	r2, r3, #3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	494e      	ldr	r1, [pc, #312]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004086:	4313      	orrs	r3, r2
 8004088:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0320 	and.w	r3, r3, #32
 8004092:	2b00      	cmp	r3, #0
 8004094:	d008      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004096:	4b4a      	ldr	r3, [pc, #296]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409a:	f023 0210 	bic.w	r2, r3, #16
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	4947      	ldr	r1, [pc, #284]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80040b4:	4b42      	ldr	r3, [pc, #264]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c0:	493f      	ldr	r1, [pc, #252]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040d2:	4b3b      	ldr	r3, [pc, #236]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d6:	f023 0220 	bic.w	r2, r3, #32
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	4938      	ldr	r1, [pc, #224]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d008      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040f0:	4b33      	ldr	r3, [pc, #204]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	4930      	ldr	r1, [pc, #192]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800410a:	2b00      	cmp	r3, #0
 800410c:	d008      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800410e:	4b2c      	ldr	r3, [pc, #176]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	4929      	ldr	r1, [pc, #164]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800411c:	4313      	orrs	r3, r2
 800411e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004128:	2b00      	cmp	r3, #0
 800412a:	d008      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800412c:	4b24      	ldr	r3, [pc, #144]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800412e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004130:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	4921      	ldr	r1, [pc, #132]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800413a:	4313      	orrs	r3, r2
 800413c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d008      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800414a:	4b1d      	ldr	r3, [pc, #116]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800414c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	491a      	ldr	r1, [pc, #104]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004158:	4313      	orrs	r3, r2
 800415a:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004168:	4b15      	ldr	r3, [pc, #84]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800416a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004174:	4912      	ldr	r1, [pc, #72]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004176:	4313      	orrs	r3, r2
 8004178:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d008      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004186:	4b0e      	ldr	r3, [pc, #56]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004192:	490b      	ldr	r1, [pc, #44]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004194:	4313      	orrs	r3, r2
 8004196:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d008      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80041a4:	4b06      	ldr	r3, [pc, #24]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b0:	4903      	ldr	r1, [pc, #12]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3748      	adds	r7, #72	@ 0x48
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40021000 	.word	0x40021000

080041c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e040      	b.n	8004258 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d106      	bne.n	80041ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7fd f95c 	bl	80014a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2224      	movs	r2, #36	@ 0x24
 80041f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0201 	bic.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f9e8 	bl	80045e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f8af 	bl	8004374 <UART_SetConfig>
 8004216:	4603      	mov	r3, r0
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e01b      	b.n	8004258 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800422e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800423e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0201 	orr.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 fa67 	bl	8004724 <UART_CheckIdleState>
 8004256:	4603      	mov	r3, r0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08a      	sub	sp, #40	@ 0x28
 8004264:	af02      	add	r7, sp, #8
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	4613      	mov	r3, r2
 800426e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004274:	2b20      	cmp	r3, #32
 8004276:	d177      	bne.n	8004368 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <HAL_UART_Transmit+0x24>
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e070      	b.n	800436a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2221      	movs	r2, #33	@ 0x21
 8004294:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004296:	f7fd fad9 	bl	800184c <HAL_GetTick>
 800429a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	88fa      	ldrh	r2, [r7, #6]
 80042a0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	88fa      	ldrh	r2, [r7, #6]
 80042a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042b4:	d108      	bne.n	80042c8 <HAL_UART_Transmit+0x68>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d104      	bne.n	80042c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	61bb      	str	r3, [r7, #24]
 80042c6:	e003      	b.n	80042d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042d0:	e02f      	b.n	8004332 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2200      	movs	r2, #0
 80042da:	2180      	movs	r1, #128	@ 0x80
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 fac9 	bl	8004874 <UART_WaitOnFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d004      	beq.n	80042f2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2220      	movs	r2, #32
 80042ec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e03b      	b.n	800436a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10b      	bne.n	8004310 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	881a      	ldrh	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004304:	b292      	uxth	r2, r2
 8004306:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	3302      	adds	r3, #2
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	e007      	b.n	8004320 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	781a      	ldrb	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	3301      	adds	r3, #1
 800431e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1c9      	bne.n	80042d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2200      	movs	r2, #0
 8004346:	2140      	movs	r1, #64	@ 0x40
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 fa93 	bl	8004874 <UART_WaitOnFlagUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d004      	beq.n	800435e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e005      	b.n	800436a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	e000      	b.n	800436a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004368:	2302      	movs	r3, #2
  }
}
 800436a:	4618      	mov	r0, r3
 800436c:	3720      	adds	r7, #32
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800437c:	2300      	movs	r3, #0
 800437e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	4313      	orrs	r3, r2
 8004396:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	4b8a      	ldr	r3, [pc, #552]	@ (80045c8 <UART_SetConfig+0x254>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6812      	ldr	r2, [r2, #0]
 80043a6:	6979      	ldr	r1, [r7, #20]
 80043a8:	430b      	orrs	r3, r1
 80043aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a78      	ldr	r2, [pc, #480]	@ (80045cc <UART_SetConfig+0x258>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d120      	bne.n	8004432 <UART_SetConfig+0xbe>
 80043f0:	4b77      	ldr	r3, [pc, #476]	@ (80045d0 <UART_SetConfig+0x25c>)
 80043f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f4:	f003 0303 	and.w	r3, r3, #3
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d817      	bhi.n	800442c <UART_SetConfig+0xb8>
 80043fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004404 <UART_SetConfig+0x90>)
 80043fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004402:	bf00      	nop
 8004404:	08004415 	.word	0x08004415
 8004408:	08004421 	.word	0x08004421
 800440c:	08004427 	.word	0x08004427
 8004410:	0800441b 	.word	0x0800441b
 8004414:	2300      	movs	r3, #0
 8004416:	77fb      	strb	r3, [r7, #31]
 8004418:	e01d      	b.n	8004456 <UART_SetConfig+0xe2>
 800441a:	2302      	movs	r3, #2
 800441c:	77fb      	strb	r3, [r7, #31]
 800441e:	e01a      	b.n	8004456 <UART_SetConfig+0xe2>
 8004420:	2304      	movs	r3, #4
 8004422:	77fb      	strb	r3, [r7, #31]
 8004424:	e017      	b.n	8004456 <UART_SetConfig+0xe2>
 8004426:	2308      	movs	r3, #8
 8004428:	77fb      	strb	r3, [r7, #31]
 800442a:	e014      	b.n	8004456 <UART_SetConfig+0xe2>
 800442c:	2310      	movs	r3, #16
 800442e:	77fb      	strb	r3, [r7, #31]
 8004430:	e011      	b.n	8004456 <UART_SetConfig+0xe2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a67      	ldr	r2, [pc, #412]	@ (80045d4 <UART_SetConfig+0x260>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d102      	bne.n	8004442 <UART_SetConfig+0xce>
 800443c:	2300      	movs	r3, #0
 800443e:	77fb      	strb	r3, [r7, #31]
 8004440:	e009      	b.n	8004456 <UART_SetConfig+0xe2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a64      	ldr	r2, [pc, #400]	@ (80045d8 <UART_SetConfig+0x264>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d102      	bne.n	8004452 <UART_SetConfig+0xde>
 800444c:	2300      	movs	r3, #0
 800444e:	77fb      	strb	r3, [r7, #31]
 8004450:	e001      	b.n	8004456 <UART_SetConfig+0xe2>
 8004452:	2310      	movs	r3, #16
 8004454:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800445e:	d15a      	bne.n	8004516 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004460:	7ffb      	ldrb	r3, [r7, #31]
 8004462:	2b08      	cmp	r3, #8
 8004464:	d827      	bhi.n	80044b6 <UART_SetConfig+0x142>
 8004466:	a201      	add	r2, pc, #4	@ (adr r2, 800446c <UART_SetConfig+0xf8>)
 8004468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446c:	08004491 	.word	0x08004491
 8004470:	08004499 	.word	0x08004499
 8004474:	080044a1 	.word	0x080044a1
 8004478:	080044b7 	.word	0x080044b7
 800447c:	080044a7 	.word	0x080044a7
 8004480:	080044b7 	.word	0x080044b7
 8004484:	080044b7 	.word	0x080044b7
 8004488:	080044b7 	.word	0x080044b7
 800448c:	080044af 	.word	0x080044af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004490:	f7ff fcc2 	bl	8003e18 <HAL_RCC_GetPCLK1Freq>
 8004494:	61b8      	str	r0, [r7, #24]
        break;
 8004496:	e013      	b.n	80044c0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004498:	f7ff fce0 	bl	8003e5c <HAL_RCC_GetPCLK2Freq>
 800449c:	61b8      	str	r0, [r7, #24]
        break;
 800449e:	e00f      	b.n	80044c0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044a0:	4b4e      	ldr	r3, [pc, #312]	@ (80045dc <UART_SetConfig+0x268>)
 80044a2:	61bb      	str	r3, [r7, #24]
        break;
 80044a4:	e00c      	b.n	80044c0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044a6:	f7ff fc57 	bl	8003d58 <HAL_RCC_GetSysClockFreq>
 80044aa:	61b8      	str	r0, [r7, #24]
        break;
 80044ac:	e008      	b.n	80044c0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044b2:	61bb      	str	r3, [r7, #24]
        break;
 80044b4:	e004      	b.n	80044c0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	77bb      	strb	r3, [r7, #30]
        break;
 80044be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d074      	beq.n	80045b0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	005a      	lsls	r2, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	085b      	lsrs	r3, r3, #1
 80044d0:	441a      	add	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	2b0f      	cmp	r3, #15
 80044e0:	d916      	bls.n	8004510 <UART_SetConfig+0x19c>
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044e8:	d212      	bcs.n	8004510 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f023 030f 	bic.w	r3, r3, #15
 80044f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	085b      	lsrs	r3, r3, #1
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	b29a      	uxth	r2, r3
 8004500:	89fb      	ldrh	r3, [r7, #14]
 8004502:	4313      	orrs	r3, r2
 8004504:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	89fa      	ldrh	r2, [r7, #14]
 800450c:	60da      	str	r2, [r3, #12]
 800450e:	e04f      	b.n	80045b0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	77bb      	strb	r3, [r7, #30]
 8004514:	e04c      	b.n	80045b0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004516:	7ffb      	ldrb	r3, [r7, #31]
 8004518:	2b08      	cmp	r3, #8
 800451a:	d828      	bhi.n	800456e <UART_SetConfig+0x1fa>
 800451c:	a201      	add	r2, pc, #4	@ (adr r2, 8004524 <UART_SetConfig+0x1b0>)
 800451e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004522:	bf00      	nop
 8004524:	08004549 	.word	0x08004549
 8004528:	08004551 	.word	0x08004551
 800452c:	08004559 	.word	0x08004559
 8004530:	0800456f 	.word	0x0800456f
 8004534:	0800455f 	.word	0x0800455f
 8004538:	0800456f 	.word	0x0800456f
 800453c:	0800456f 	.word	0x0800456f
 8004540:	0800456f 	.word	0x0800456f
 8004544:	08004567 	.word	0x08004567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004548:	f7ff fc66 	bl	8003e18 <HAL_RCC_GetPCLK1Freq>
 800454c:	61b8      	str	r0, [r7, #24]
        break;
 800454e:	e013      	b.n	8004578 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004550:	f7ff fc84 	bl	8003e5c <HAL_RCC_GetPCLK2Freq>
 8004554:	61b8      	str	r0, [r7, #24]
        break;
 8004556:	e00f      	b.n	8004578 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004558:	4b20      	ldr	r3, [pc, #128]	@ (80045dc <UART_SetConfig+0x268>)
 800455a:	61bb      	str	r3, [r7, #24]
        break;
 800455c:	e00c      	b.n	8004578 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800455e:	f7ff fbfb 	bl	8003d58 <HAL_RCC_GetSysClockFreq>
 8004562:	61b8      	str	r0, [r7, #24]
        break;
 8004564:	e008      	b.n	8004578 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004566:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800456a:	61bb      	str	r3, [r7, #24]
        break;
 800456c:	e004      	b.n	8004578 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	77bb      	strb	r3, [r7, #30]
        break;
 8004576:	bf00      	nop
    }

    if (pclk != 0U)
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d018      	beq.n	80045b0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	085a      	lsrs	r2, r3, #1
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	441a      	add	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004590:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	2b0f      	cmp	r3, #15
 8004596:	d909      	bls.n	80045ac <UART_SetConfig+0x238>
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800459e:	d205      	bcs.n	80045ac <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60da      	str	r2, [r3, #12]
 80045aa:	e001      	b.n	80045b0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80045bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3720      	adds	r7, #32
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	efff69f3 	.word	0xefff69f3
 80045cc:	40013800 	.word	0x40013800
 80045d0:	40021000 	.word	0x40021000
 80045d4:	40004400 	.word	0x40004400
 80045d8:	40004800 	.word	0x40004800
 80045dc:	007a1200 	.word	0x007a1200

080045e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01a      	beq.n	80046f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046de:	d10a      	bne.n	80046f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	605a      	str	r2, [r3, #4]
  }
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b098      	sub	sp, #96	@ 0x60
 8004728:	af02      	add	r7, sp, #8
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004734:	f7fd f88a 	bl	800184c <HAL_GetTick>
 8004738:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b08      	cmp	r3, #8
 8004746:	d12e      	bne.n	80047a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004748:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004750:	2200      	movs	r2, #0
 8004752:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f88c 	bl	8004874 <UART_WaitOnFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d021      	beq.n	80047a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800476a:	e853 3f00 	ldrex	r3, [r3]
 800476e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004772:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004776:	653b      	str	r3, [r7, #80]	@ 0x50
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004780:	647b      	str	r3, [r7, #68]	@ 0x44
 8004782:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004784:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004786:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004788:	e841 2300 	strex	r3, r2, [r1]
 800478c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800478e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1e6      	bne.n	8004762 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2220      	movs	r2, #32
 8004798:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e062      	b.n	800486c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d149      	bne.n	8004848 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047bc:	2200      	movs	r2, #0
 80047be:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f856 	bl	8004874 <UART_WaitOnFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d03c      	beq.n	8004848 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d6:	e853 3f00 	ldrex	r3, [r3]
 80047da:	623b      	str	r3, [r7, #32]
   return(result);
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	461a      	mov	r2, r3
 80047ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80047ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047f4:	e841 2300 	strex	r3, r2, [r1]
 80047f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1e6      	bne.n	80047ce <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3308      	adds	r3, #8
 8004806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	e853 3f00 	ldrex	r3, [r3]
 800480e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0301 	bic.w	r3, r3, #1
 8004816:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3308      	adds	r3, #8
 800481e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004820:	61fa      	str	r2, [r7, #28]
 8004822:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	69b9      	ldr	r1, [r7, #24]
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	e841 2300 	strex	r3, r2, [r1]
 800482c:	617b      	str	r3, [r7, #20]
   return(result);
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e5      	bne.n	8004800 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2220      	movs	r2, #32
 8004838:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e011      	b.n	800486c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3758      	adds	r7, #88	@ 0x58
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	603b      	str	r3, [r7, #0]
 8004880:	4613      	mov	r3, r2
 8004882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004884:	e04f      	b.n	8004926 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488c:	d04b      	beq.n	8004926 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488e:	f7fc ffdd 	bl	800184c <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	429a      	cmp	r2, r3
 800489c:	d302      	bcc.n	80048a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e04e      	b.n	8004946 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d037      	beq.n	8004926 <UART_WaitOnFlagUntilTimeout+0xb2>
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b80      	cmp	r3, #128	@ 0x80
 80048ba:	d034      	beq.n	8004926 <UART_WaitOnFlagUntilTimeout+0xb2>
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2b40      	cmp	r3, #64	@ 0x40
 80048c0:	d031      	beq.n	8004926 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d110      	bne.n	80048f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2208      	movs	r2, #8
 80048d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 f838 	bl	800494e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2208      	movs	r2, #8
 80048e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e029      	b.n	8004946 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004900:	d111      	bne.n	8004926 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800490a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 f81e 	bl	800494e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2220      	movs	r2, #32
 8004916:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e00f      	b.n	8004946 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69da      	ldr	r2, [r3, #28]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	4013      	ands	r3, r2
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	429a      	cmp	r2, r3
 8004934:	bf0c      	ite	eq
 8004936:	2301      	moveq	r3, #1
 8004938:	2300      	movne	r3, #0
 800493a:	b2db      	uxtb	r3, r3
 800493c:	461a      	mov	r2, r3
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	429a      	cmp	r2, r3
 8004942:	d0a0      	beq.n	8004886 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800494e:	b480      	push	{r7}
 8004950:	b095      	sub	sp, #84	@ 0x54
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800495e:	e853 3f00 	ldrex	r3, [r3]
 8004962:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004966:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800496a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	461a      	mov	r2, r3
 8004972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004974:	643b      	str	r3, [r7, #64]	@ 0x40
 8004976:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004978:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800497a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800497c:	e841 2300 	strex	r3, r2, [r1]
 8004980:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1e6      	bne.n	8004956 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3308      	adds	r3, #8
 800498e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	e853 3f00 	ldrex	r3, [r3]
 8004996:	61fb      	str	r3, [r7, #28]
   return(result);
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	f023 0301 	bic.w	r3, r3, #1
 800499e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3308      	adds	r3, #8
 80049a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049b0:	e841 2300 	strex	r3, r2, [r1]
 80049b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1e5      	bne.n	8004988 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d118      	bne.n	80049f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	e853 3f00 	ldrex	r3, [r3]
 80049d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f023 0310 	bic.w	r3, r3, #16
 80049d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049e2:	61bb      	str	r3, [r7, #24]
 80049e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e6:	6979      	ldr	r1, [r7, #20]
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	613b      	str	r3, [r7, #16]
   return(result);
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e6      	bne.n	80049c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a0a:	bf00      	nop
 8004a0c:	3754      	adds	r7, #84	@ 0x54
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <__cvt>:
 8004a16:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a1a:	ec57 6b10 	vmov	r6, r7, d0
 8004a1e:	2f00      	cmp	r7, #0
 8004a20:	460c      	mov	r4, r1
 8004a22:	4619      	mov	r1, r3
 8004a24:	463b      	mov	r3, r7
 8004a26:	bfbb      	ittet	lt
 8004a28:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004a2c:	461f      	movlt	r7, r3
 8004a2e:	2300      	movge	r3, #0
 8004a30:	232d      	movlt	r3, #45	@ 0x2d
 8004a32:	700b      	strb	r3, [r1, #0]
 8004a34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a36:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004a3a:	4691      	mov	r9, r2
 8004a3c:	f023 0820 	bic.w	r8, r3, #32
 8004a40:	bfbc      	itt	lt
 8004a42:	4632      	movlt	r2, r6
 8004a44:	4616      	movlt	r6, r2
 8004a46:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a4a:	d005      	beq.n	8004a58 <__cvt+0x42>
 8004a4c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004a50:	d100      	bne.n	8004a54 <__cvt+0x3e>
 8004a52:	3401      	adds	r4, #1
 8004a54:	2102      	movs	r1, #2
 8004a56:	e000      	b.n	8004a5a <__cvt+0x44>
 8004a58:	2103      	movs	r1, #3
 8004a5a:	ab03      	add	r3, sp, #12
 8004a5c:	9301      	str	r3, [sp, #4]
 8004a5e:	ab02      	add	r3, sp, #8
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	ec47 6b10 	vmov	d0, r6, r7
 8004a66:	4653      	mov	r3, sl
 8004a68:	4622      	mov	r2, r4
 8004a6a:	f000 fe59 	bl	8005720 <_dtoa_r>
 8004a6e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004a72:	4605      	mov	r5, r0
 8004a74:	d119      	bne.n	8004aaa <__cvt+0x94>
 8004a76:	f019 0f01 	tst.w	r9, #1
 8004a7a:	d00e      	beq.n	8004a9a <__cvt+0x84>
 8004a7c:	eb00 0904 	add.w	r9, r0, r4
 8004a80:	2200      	movs	r2, #0
 8004a82:	2300      	movs	r3, #0
 8004a84:	4630      	mov	r0, r6
 8004a86:	4639      	mov	r1, r7
 8004a88:	f7fc f81e 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a8c:	b108      	cbz	r0, 8004a92 <__cvt+0x7c>
 8004a8e:	f8cd 900c 	str.w	r9, [sp, #12]
 8004a92:	2230      	movs	r2, #48	@ 0x30
 8004a94:	9b03      	ldr	r3, [sp, #12]
 8004a96:	454b      	cmp	r3, r9
 8004a98:	d31e      	bcc.n	8004ad8 <__cvt+0xc2>
 8004a9a:	9b03      	ldr	r3, [sp, #12]
 8004a9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004a9e:	1b5b      	subs	r3, r3, r5
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	b004      	add	sp, #16
 8004aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aaa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004aae:	eb00 0904 	add.w	r9, r0, r4
 8004ab2:	d1e5      	bne.n	8004a80 <__cvt+0x6a>
 8004ab4:	7803      	ldrb	r3, [r0, #0]
 8004ab6:	2b30      	cmp	r3, #48	@ 0x30
 8004ab8:	d10a      	bne.n	8004ad0 <__cvt+0xba>
 8004aba:	2200      	movs	r2, #0
 8004abc:	2300      	movs	r3, #0
 8004abe:	4630      	mov	r0, r6
 8004ac0:	4639      	mov	r1, r7
 8004ac2:	f7fc f801 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ac6:	b918      	cbnz	r0, 8004ad0 <__cvt+0xba>
 8004ac8:	f1c4 0401 	rsb	r4, r4, #1
 8004acc:	f8ca 4000 	str.w	r4, [sl]
 8004ad0:	f8da 3000 	ldr.w	r3, [sl]
 8004ad4:	4499      	add	r9, r3
 8004ad6:	e7d3      	b.n	8004a80 <__cvt+0x6a>
 8004ad8:	1c59      	adds	r1, r3, #1
 8004ada:	9103      	str	r1, [sp, #12]
 8004adc:	701a      	strb	r2, [r3, #0]
 8004ade:	e7d9      	b.n	8004a94 <__cvt+0x7e>

08004ae0 <__exponent>:
 8004ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ae2:	2900      	cmp	r1, #0
 8004ae4:	bfba      	itte	lt
 8004ae6:	4249      	neglt	r1, r1
 8004ae8:	232d      	movlt	r3, #45	@ 0x2d
 8004aea:	232b      	movge	r3, #43	@ 0x2b
 8004aec:	2909      	cmp	r1, #9
 8004aee:	7002      	strb	r2, [r0, #0]
 8004af0:	7043      	strb	r3, [r0, #1]
 8004af2:	dd29      	ble.n	8004b48 <__exponent+0x68>
 8004af4:	f10d 0307 	add.w	r3, sp, #7
 8004af8:	461d      	mov	r5, r3
 8004afa:	270a      	movs	r7, #10
 8004afc:	461a      	mov	r2, r3
 8004afe:	fbb1 f6f7 	udiv	r6, r1, r7
 8004b02:	fb07 1416 	mls	r4, r7, r6, r1
 8004b06:	3430      	adds	r4, #48	@ 0x30
 8004b08:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004b0c:	460c      	mov	r4, r1
 8004b0e:	2c63      	cmp	r4, #99	@ 0x63
 8004b10:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b14:	4631      	mov	r1, r6
 8004b16:	dcf1      	bgt.n	8004afc <__exponent+0x1c>
 8004b18:	3130      	adds	r1, #48	@ 0x30
 8004b1a:	1e94      	subs	r4, r2, #2
 8004b1c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004b20:	1c41      	adds	r1, r0, #1
 8004b22:	4623      	mov	r3, r4
 8004b24:	42ab      	cmp	r3, r5
 8004b26:	d30a      	bcc.n	8004b3e <__exponent+0x5e>
 8004b28:	f10d 0309 	add.w	r3, sp, #9
 8004b2c:	1a9b      	subs	r3, r3, r2
 8004b2e:	42ac      	cmp	r4, r5
 8004b30:	bf88      	it	hi
 8004b32:	2300      	movhi	r3, #0
 8004b34:	3302      	adds	r3, #2
 8004b36:	4403      	add	r3, r0
 8004b38:	1a18      	subs	r0, r3, r0
 8004b3a:	b003      	add	sp, #12
 8004b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b3e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004b42:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004b46:	e7ed      	b.n	8004b24 <__exponent+0x44>
 8004b48:	2330      	movs	r3, #48	@ 0x30
 8004b4a:	3130      	adds	r1, #48	@ 0x30
 8004b4c:	7083      	strb	r3, [r0, #2]
 8004b4e:	70c1      	strb	r1, [r0, #3]
 8004b50:	1d03      	adds	r3, r0, #4
 8004b52:	e7f1      	b.n	8004b38 <__exponent+0x58>

08004b54 <_printf_float>:
 8004b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b58:	b08d      	sub	sp, #52	@ 0x34
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004b60:	4616      	mov	r6, r2
 8004b62:	461f      	mov	r7, r3
 8004b64:	4605      	mov	r5, r0
 8004b66:	f000 fcdb 	bl	8005520 <_localeconv_r>
 8004b6a:	6803      	ldr	r3, [r0, #0]
 8004b6c:	9304      	str	r3, [sp, #16]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fb fb7e 	bl	8000270 <strlen>
 8004b74:	2300      	movs	r3, #0
 8004b76:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b78:	f8d8 3000 	ldr.w	r3, [r8]
 8004b7c:	9005      	str	r0, [sp, #20]
 8004b7e:	3307      	adds	r3, #7
 8004b80:	f023 0307 	bic.w	r3, r3, #7
 8004b84:	f103 0208 	add.w	r2, r3, #8
 8004b88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004b8c:	f8d4 b000 	ldr.w	fp, [r4]
 8004b90:	f8c8 2000 	str.w	r2, [r8]
 8004b94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004b9c:	9307      	str	r3, [sp, #28]
 8004b9e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ba2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004ba6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004baa:	4b9c      	ldr	r3, [pc, #624]	@ (8004e1c <_printf_float+0x2c8>)
 8004bac:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb0:	f7fb ffbc 	bl	8000b2c <__aeabi_dcmpun>
 8004bb4:	bb70      	cbnz	r0, 8004c14 <_printf_float+0xc0>
 8004bb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bba:	4b98      	ldr	r3, [pc, #608]	@ (8004e1c <_printf_float+0x2c8>)
 8004bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc0:	f7fb ff96 	bl	8000af0 <__aeabi_dcmple>
 8004bc4:	bb30      	cbnz	r0, 8004c14 <_printf_float+0xc0>
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	2300      	movs	r3, #0
 8004bca:	4640      	mov	r0, r8
 8004bcc:	4649      	mov	r1, r9
 8004bce:	f7fb ff85 	bl	8000adc <__aeabi_dcmplt>
 8004bd2:	b110      	cbz	r0, 8004bda <_printf_float+0x86>
 8004bd4:	232d      	movs	r3, #45	@ 0x2d
 8004bd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bda:	4a91      	ldr	r2, [pc, #580]	@ (8004e20 <_printf_float+0x2cc>)
 8004bdc:	4b91      	ldr	r3, [pc, #580]	@ (8004e24 <_printf_float+0x2d0>)
 8004bde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004be2:	bf94      	ite	ls
 8004be4:	4690      	movls	r8, r2
 8004be6:	4698      	movhi	r8, r3
 8004be8:	2303      	movs	r3, #3
 8004bea:	6123      	str	r3, [r4, #16]
 8004bec:	f02b 0304 	bic.w	r3, fp, #4
 8004bf0:	6023      	str	r3, [r4, #0]
 8004bf2:	f04f 0900 	mov.w	r9, #0
 8004bf6:	9700      	str	r7, [sp, #0]
 8004bf8:	4633      	mov	r3, r6
 8004bfa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	4628      	mov	r0, r5
 8004c00:	f000 f9d2 	bl	8004fa8 <_printf_common>
 8004c04:	3001      	adds	r0, #1
 8004c06:	f040 808d 	bne.w	8004d24 <_printf_float+0x1d0>
 8004c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c0e:	b00d      	add	sp, #52	@ 0x34
 8004c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c14:	4642      	mov	r2, r8
 8004c16:	464b      	mov	r3, r9
 8004c18:	4640      	mov	r0, r8
 8004c1a:	4649      	mov	r1, r9
 8004c1c:	f7fb ff86 	bl	8000b2c <__aeabi_dcmpun>
 8004c20:	b140      	cbz	r0, 8004c34 <_printf_float+0xe0>
 8004c22:	464b      	mov	r3, r9
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	bfbc      	itt	lt
 8004c28:	232d      	movlt	r3, #45	@ 0x2d
 8004c2a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004c2e:	4a7e      	ldr	r2, [pc, #504]	@ (8004e28 <_printf_float+0x2d4>)
 8004c30:	4b7e      	ldr	r3, [pc, #504]	@ (8004e2c <_printf_float+0x2d8>)
 8004c32:	e7d4      	b.n	8004bde <_printf_float+0x8a>
 8004c34:	6863      	ldr	r3, [r4, #4]
 8004c36:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004c3a:	9206      	str	r2, [sp, #24]
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	d13b      	bne.n	8004cb8 <_printf_float+0x164>
 8004c40:	2306      	movs	r3, #6
 8004c42:	6063      	str	r3, [r4, #4]
 8004c44:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004c48:	2300      	movs	r3, #0
 8004c4a:	6022      	str	r2, [r4, #0]
 8004c4c:	9303      	str	r3, [sp, #12]
 8004c4e:	ab0a      	add	r3, sp, #40	@ 0x28
 8004c50:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004c54:	ab09      	add	r3, sp, #36	@ 0x24
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	6861      	ldr	r1, [r4, #4]
 8004c5a:	ec49 8b10 	vmov	d0, r8, r9
 8004c5e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004c62:	4628      	mov	r0, r5
 8004c64:	f7ff fed7 	bl	8004a16 <__cvt>
 8004c68:	9b06      	ldr	r3, [sp, #24]
 8004c6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004c6c:	2b47      	cmp	r3, #71	@ 0x47
 8004c6e:	4680      	mov	r8, r0
 8004c70:	d129      	bne.n	8004cc6 <_printf_float+0x172>
 8004c72:	1cc8      	adds	r0, r1, #3
 8004c74:	db02      	blt.n	8004c7c <_printf_float+0x128>
 8004c76:	6863      	ldr	r3, [r4, #4]
 8004c78:	4299      	cmp	r1, r3
 8004c7a:	dd41      	ble.n	8004d00 <_printf_float+0x1ac>
 8004c7c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004c80:	fa5f fa8a 	uxtb.w	sl, sl
 8004c84:	3901      	subs	r1, #1
 8004c86:	4652      	mov	r2, sl
 8004c88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004c8c:	9109      	str	r1, [sp, #36]	@ 0x24
 8004c8e:	f7ff ff27 	bl	8004ae0 <__exponent>
 8004c92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c94:	1813      	adds	r3, r2, r0
 8004c96:	2a01      	cmp	r2, #1
 8004c98:	4681      	mov	r9, r0
 8004c9a:	6123      	str	r3, [r4, #16]
 8004c9c:	dc02      	bgt.n	8004ca4 <_printf_float+0x150>
 8004c9e:	6822      	ldr	r2, [r4, #0]
 8004ca0:	07d2      	lsls	r2, r2, #31
 8004ca2:	d501      	bpl.n	8004ca8 <_printf_float+0x154>
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	6123      	str	r3, [r4, #16]
 8004ca8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0a2      	beq.n	8004bf6 <_printf_float+0xa2>
 8004cb0:	232d      	movs	r3, #45	@ 0x2d
 8004cb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cb6:	e79e      	b.n	8004bf6 <_printf_float+0xa2>
 8004cb8:	9a06      	ldr	r2, [sp, #24]
 8004cba:	2a47      	cmp	r2, #71	@ 0x47
 8004cbc:	d1c2      	bne.n	8004c44 <_printf_float+0xf0>
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1c0      	bne.n	8004c44 <_printf_float+0xf0>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e7bd      	b.n	8004c42 <_printf_float+0xee>
 8004cc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004cca:	d9db      	bls.n	8004c84 <_printf_float+0x130>
 8004ccc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004cd0:	d118      	bne.n	8004d04 <_printf_float+0x1b0>
 8004cd2:	2900      	cmp	r1, #0
 8004cd4:	6863      	ldr	r3, [r4, #4]
 8004cd6:	dd0b      	ble.n	8004cf0 <_printf_float+0x19c>
 8004cd8:	6121      	str	r1, [r4, #16]
 8004cda:	b913      	cbnz	r3, 8004ce2 <_printf_float+0x18e>
 8004cdc:	6822      	ldr	r2, [r4, #0]
 8004cde:	07d0      	lsls	r0, r2, #31
 8004ce0:	d502      	bpl.n	8004ce8 <_printf_float+0x194>
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	440b      	add	r3, r1
 8004ce6:	6123      	str	r3, [r4, #16]
 8004ce8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004cea:	f04f 0900 	mov.w	r9, #0
 8004cee:	e7db      	b.n	8004ca8 <_printf_float+0x154>
 8004cf0:	b913      	cbnz	r3, 8004cf8 <_printf_float+0x1a4>
 8004cf2:	6822      	ldr	r2, [r4, #0]
 8004cf4:	07d2      	lsls	r2, r2, #31
 8004cf6:	d501      	bpl.n	8004cfc <_printf_float+0x1a8>
 8004cf8:	3302      	adds	r3, #2
 8004cfa:	e7f4      	b.n	8004ce6 <_printf_float+0x192>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e7f2      	b.n	8004ce6 <_printf_float+0x192>
 8004d00:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d06:	4299      	cmp	r1, r3
 8004d08:	db05      	blt.n	8004d16 <_printf_float+0x1c2>
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	6121      	str	r1, [r4, #16]
 8004d0e:	07d8      	lsls	r0, r3, #31
 8004d10:	d5ea      	bpl.n	8004ce8 <_printf_float+0x194>
 8004d12:	1c4b      	adds	r3, r1, #1
 8004d14:	e7e7      	b.n	8004ce6 <_printf_float+0x192>
 8004d16:	2900      	cmp	r1, #0
 8004d18:	bfd4      	ite	le
 8004d1a:	f1c1 0202 	rsble	r2, r1, #2
 8004d1e:	2201      	movgt	r2, #1
 8004d20:	4413      	add	r3, r2
 8004d22:	e7e0      	b.n	8004ce6 <_printf_float+0x192>
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	055a      	lsls	r2, r3, #21
 8004d28:	d407      	bmi.n	8004d3a <_printf_float+0x1e6>
 8004d2a:	6923      	ldr	r3, [r4, #16]
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	4631      	mov	r1, r6
 8004d30:	4628      	mov	r0, r5
 8004d32:	47b8      	blx	r7
 8004d34:	3001      	adds	r0, #1
 8004d36:	d12b      	bne.n	8004d90 <_printf_float+0x23c>
 8004d38:	e767      	b.n	8004c0a <_printf_float+0xb6>
 8004d3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d3e:	f240 80dd 	bls.w	8004efc <_printf_float+0x3a8>
 8004d42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d46:	2200      	movs	r2, #0
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f7fb febd 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	d033      	beq.n	8004dba <_printf_float+0x266>
 8004d52:	4a37      	ldr	r2, [pc, #220]	@ (8004e30 <_printf_float+0x2dc>)
 8004d54:	2301      	movs	r3, #1
 8004d56:	4631      	mov	r1, r6
 8004d58:	4628      	mov	r0, r5
 8004d5a:	47b8      	blx	r7
 8004d5c:	3001      	adds	r0, #1
 8004d5e:	f43f af54 	beq.w	8004c0a <_printf_float+0xb6>
 8004d62:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004d66:	4543      	cmp	r3, r8
 8004d68:	db02      	blt.n	8004d70 <_printf_float+0x21c>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	07d8      	lsls	r0, r3, #31
 8004d6e:	d50f      	bpl.n	8004d90 <_printf_float+0x23c>
 8004d70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d74:	4631      	mov	r1, r6
 8004d76:	4628      	mov	r0, r5
 8004d78:	47b8      	blx	r7
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	f43f af45 	beq.w	8004c0a <_printf_float+0xb6>
 8004d80:	f04f 0900 	mov.w	r9, #0
 8004d84:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d88:	f104 0a1a 	add.w	sl, r4, #26
 8004d8c:	45c8      	cmp	r8, r9
 8004d8e:	dc09      	bgt.n	8004da4 <_printf_float+0x250>
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	079b      	lsls	r3, r3, #30
 8004d94:	f100 8103 	bmi.w	8004f9e <_printf_float+0x44a>
 8004d98:	68e0      	ldr	r0, [r4, #12]
 8004d9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d9c:	4298      	cmp	r0, r3
 8004d9e:	bfb8      	it	lt
 8004da0:	4618      	movlt	r0, r3
 8004da2:	e734      	b.n	8004c0e <_printf_float+0xba>
 8004da4:	2301      	movs	r3, #1
 8004da6:	4652      	mov	r2, sl
 8004da8:	4631      	mov	r1, r6
 8004daa:	4628      	mov	r0, r5
 8004dac:	47b8      	blx	r7
 8004dae:	3001      	adds	r0, #1
 8004db0:	f43f af2b 	beq.w	8004c0a <_printf_float+0xb6>
 8004db4:	f109 0901 	add.w	r9, r9, #1
 8004db8:	e7e8      	b.n	8004d8c <_printf_float+0x238>
 8004dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	dc39      	bgt.n	8004e34 <_printf_float+0x2e0>
 8004dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8004e30 <_printf_float+0x2dc>)
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	4631      	mov	r1, r6
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	47b8      	blx	r7
 8004dca:	3001      	adds	r0, #1
 8004dcc:	f43f af1d 	beq.w	8004c0a <_printf_float+0xb6>
 8004dd0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004dd4:	ea59 0303 	orrs.w	r3, r9, r3
 8004dd8:	d102      	bne.n	8004de0 <_printf_float+0x28c>
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	07d9      	lsls	r1, r3, #31
 8004dde:	d5d7      	bpl.n	8004d90 <_printf_float+0x23c>
 8004de0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004de4:	4631      	mov	r1, r6
 8004de6:	4628      	mov	r0, r5
 8004de8:	47b8      	blx	r7
 8004dea:	3001      	adds	r0, #1
 8004dec:	f43f af0d 	beq.w	8004c0a <_printf_float+0xb6>
 8004df0:	f04f 0a00 	mov.w	sl, #0
 8004df4:	f104 0b1a 	add.w	fp, r4, #26
 8004df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dfa:	425b      	negs	r3, r3
 8004dfc:	4553      	cmp	r3, sl
 8004dfe:	dc01      	bgt.n	8004e04 <_printf_float+0x2b0>
 8004e00:	464b      	mov	r3, r9
 8004e02:	e793      	b.n	8004d2c <_printf_float+0x1d8>
 8004e04:	2301      	movs	r3, #1
 8004e06:	465a      	mov	r2, fp
 8004e08:	4631      	mov	r1, r6
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	47b8      	blx	r7
 8004e0e:	3001      	adds	r0, #1
 8004e10:	f43f aefb 	beq.w	8004c0a <_printf_float+0xb6>
 8004e14:	f10a 0a01 	add.w	sl, sl, #1
 8004e18:	e7ee      	b.n	8004df8 <_printf_float+0x2a4>
 8004e1a:	bf00      	nop
 8004e1c:	7fefffff 	.word	0x7fefffff
 8004e20:	08007730 	.word	0x08007730
 8004e24:	08007734 	.word	0x08007734
 8004e28:	08007738 	.word	0x08007738
 8004e2c:	0800773c 	.word	0x0800773c
 8004e30:	08007740 	.word	0x08007740
 8004e34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004e3a:	4553      	cmp	r3, sl
 8004e3c:	bfa8      	it	ge
 8004e3e:	4653      	movge	r3, sl
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	4699      	mov	r9, r3
 8004e44:	dc36      	bgt.n	8004eb4 <_printf_float+0x360>
 8004e46:	f04f 0b00 	mov.w	fp, #0
 8004e4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e4e:	f104 021a 	add.w	r2, r4, #26
 8004e52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e54:	9306      	str	r3, [sp, #24]
 8004e56:	eba3 0309 	sub.w	r3, r3, r9
 8004e5a:	455b      	cmp	r3, fp
 8004e5c:	dc31      	bgt.n	8004ec2 <_printf_float+0x36e>
 8004e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e60:	459a      	cmp	sl, r3
 8004e62:	dc3a      	bgt.n	8004eda <_printf_float+0x386>
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	07da      	lsls	r2, r3, #31
 8004e68:	d437      	bmi.n	8004eda <_printf_float+0x386>
 8004e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e6c:	ebaa 0903 	sub.w	r9, sl, r3
 8004e70:	9b06      	ldr	r3, [sp, #24]
 8004e72:	ebaa 0303 	sub.w	r3, sl, r3
 8004e76:	4599      	cmp	r9, r3
 8004e78:	bfa8      	it	ge
 8004e7a:	4699      	movge	r9, r3
 8004e7c:	f1b9 0f00 	cmp.w	r9, #0
 8004e80:	dc33      	bgt.n	8004eea <_printf_float+0x396>
 8004e82:	f04f 0800 	mov.w	r8, #0
 8004e86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e8a:	f104 0b1a 	add.w	fp, r4, #26
 8004e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e90:	ebaa 0303 	sub.w	r3, sl, r3
 8004e94:	eba3 0309 	sub.w	r3, r3, r9
 8004e98:	4543      	cmp	r3, r8
 8004e9a:	f77f af79 	ble.w	8004d90 <_printf_float+0x23c>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	465a      	mov	r2, fp
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	47b8      	blx	r7
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	f43f aeae 	beq.w	8004c0a <_printf_float+0xb6>
 8004eae:	f108 0801 	add.w	r8, r8, #1
 8004eb2:	e7ec      	b.n	8004e8e <_printf_float+0x33a>
 8004eb4:	4642      	mov	r2, r8
 8004eb6:	4631      	mov	r1, r6
 8004eb8:	4628      	mov	r0, r5
 8004eba:	47b8      	blx	r7
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	d1c2      	bne.n	8004e46 <_printf_float+0x2f2>
 8004ec0:	e6a3      	b.n	8004c0a <_printf_float+0xb6>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	4631      	mov	r1, r6
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	9206      	str	r2, [sp, #24]
 8004eca:	47b8      	blx	r7
 8004ecc:	3001      	adds	r0, #1
 8004ece:	f43f ae9c 	beq.w	8004c0a <_printf_float+0xb6>
 8004ed2:	9a06      	ldr	r2, [sp, #24]
 8004ed4:	f10b 0b01 	add.w	fp, fp, #1
 8004ed8:	e7bb      	b.n	8004e52 <_printf_float+0x2fe>
 8004eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ede:	4631      	mov	r1, r6
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	47b8      	blx	r7
 8004ee4:	3001      	adds	r0, #1
 8004ee6:	d1c0      	bne.n	8004e6a <_printf_float+0x316>
 8004ee8:	e68f      	b.n	8004c0a <_printf_float+0xb6>
 8004eea:	9a06      	ldr	r2, [sp, #24]
 8004eec:	464b      	mov	r3, r9
 8004eee:	4442      	add	r2, r8
 8004ef0:	4631      	mov	r1, r6
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	47b8      	blx	r7
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	d1c3      	bne.n	8004e82 <_printf_float+0x32e>
 8004efa:	e686      	b.n	8004c0a <_printf_float+0xb6>
 8004efc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004f00:	f1ba 0f01 	cmp.w	sl, #1
 8004f04:	dc01      	bgt.n	8004f0a <_printf_float+0x3b6>
 8004f06:	07db      	lsls	r3, r3, #31
 8004f08:	d536      	bpl.n	8004f78 <_printf_float+0x424>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	4642      	mov	r2, r8
 8004f0e:	4631      	mov	r1, r6
 8004f10:	4628      	mov	r0, r5
 8004f12:	47b8      	blx	r7
 8004f14:	3001      	adds	r0, #1
 8004f16:	f43f ae78 	beq.w	8004c0a <_printf_float+0xb6>
 8004f1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f1e:	4631      	mov	r1, r6
 8004f20:	4628      	mov	r0, r5
 8004f22:	47b8      	blx	r7
 8004f24:	3001      	adds	r0, #1
 8004f26:	f43f ae70 	beq.w	8004c0a <_printf_float+0xb6>
 8004f2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f2e:	2200      	movs	r2, #0
 8004f30:	2300      	movs	r3, #0
 8004f32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f36:	f7fb fdc7 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f3a:	b9c0      	cbnz	r0, 8004f6e <_printf_float+0x41a>
 8004f3c:	4653      	mov	r3, sl
 8004f3e:	f108 0201 	add.w	r2, r8, #1
 8004f42:	4631      	mov	r1, r6
 8004f44:	4628      	mov	r0, r5
 8004f46:	47b8      	blx	r7
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d10c      	bne.n	8004f66 <_printf_float+0x412>
 8004f4c:	e65d      	b.n	8004c0a <_printf_float+0xb6>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	465a      	mov	r2, fp
 8004f52:	4631      	mov	r1, r6
 8004f54:	4628      	mov	r0, r5
 8004f56:	47b8      	blx	r7
 8004f58:	3001      	adds	r0, #1
 8004f5a:	f43f ae56 	beq.w	8004c0a <_printf_float+0xb6>
 8004f5e:	f108 0801 	add.w	r8, r8, #1
 8004f62:	45d0      	cmp	r8, sl
 8004f64:	dbf3      	blt.n	8004f4e <_printf_float+0x3fa>
 8004f66:	464b      	mov	r3, r9
 8004f68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004f6c:	e6df      	b.n	8004d2e <_printf_float+0x1da>
 8004f6e:	f04f 0800 	mov.w	r8, #0
 8004f72:	f104 0b1a 	add.w	fp, r4, #26
 8004f76:	e7f4      	b.n	8004f62 <_printf_float+0x40e>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	4642      	mov	r2, r8
 8004f7c:	e7e1      	b.n	8004f42 <_printf_float+0x3ee>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	464a      	mov	r2, r9
 8004f82:	4631      	mov	r1, r6
 8004f84:	4628      	mov	r0, r5
 8004f86:	47b8      	blx	r7
 8004f88:	3001      	adds	r0, #1
 8004f8a:	f43f ae3e 	beq.w	8004c0a <_printf_float+0xb6>
 8004f8e:	f108 0801 	add.w	r8, r8, #1
 8004f92:	68e3      	ldr	r3, [r4, #12]
 8004f94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004f96:	1a5b      	subs	r3, r3, r1
 8004f98:	4543      	cmp	r3, r8
 8004f9a:	dcf0      	bgt.n	8004f7e <_printf_float+0x42a>
 8004f9c:	e6fc      	b.n	8004d98 <_printf_float+0x244>
 8004f9e:	f04f 0800 	mov.w	r8, #0
 8004fa2:	f104 0919 	add.w	r9, r4, #25
 8004fa6:	e7f4      	b.n	8004f92 <_printf_float+0x43e>

08004fa8 <_printf_common>:
 8004fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fac:	4616      	mov	r6, r2
 8004fae:	4698      	mov	r8, r3
 8004fb0:	688a      	ldr	r2, [r1, #8]
 8004fb2:	690b      	ldr	r3, [r1, #16]
 8004fb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	bfb8      	it	lt
 8004fbc:	4613      	movlt	r3, r2
 8004fbe:	6033      	str	r3, [r6, #0]
 8004fc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004fc4:	4607      	mov	r7, r0
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	b10a      	cbz	r2, 8004fce <_printf_common+0x26>
 8004fca:	3301      	adds	r3, #1
 8004fcc:	6033      	str	r3, [r6, #0]
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	0699      	lsls	r1, r3, #26
 8004fd2:	bf42      	ittt	mi
 8004fd4:	6833      	ldrmi	r3, [r6, #0]
 8004fd6:	3302      	addmi	r3, #2
 8004fd8:	6033      	strmi	r3, [r6, #0]
 8004fda:	6825      	ldr	r5, [r4, #0]
 8004fdc:	f015 0506 	ands.w	r5, r5, #6
 8004fe0:	d106      	bne.n	8004ff0 <_printf_common+0x48>
 8004fe2:	f104 0a19 	add.w	sl, r4, #25
 8004fe6:	68e3      	ldr	r3, [r4, #12]
 8004fe8:	6832      	ldr	r2, [r6, #0]
 8004fea:	1a9b      	subs	r3, r3, r2
 8004fec:	42ab      	cmp	r3, r5
 8004fee:	dc26      	bgt.n	800503e <_printf_common+0x96>
 8004ff0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ff4:	6822      	ldr	r2, [r4, #0]
 8004ff6:	3b00      	subs	r3, #0
 8004ff8:	bf18      	it	ne
 8004ffa:	2301      	movne	r3, #1
 8004ffc:	0692      	lsls	r2, r2, #26
 8004ffe:	d42b      	bmi.n	8005058 <_printf_common+0xb0>
 8005000:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005004:	4641      	mov	r1, r8
 8005006:	4638      	mov	r0, r7
 8005008:	47c8      	blx	r9
 800500a:	3001      	adds	r0, #1
 800500c:	d01e      	beq.n	800504c <_printf_common+0xa4>
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	6922      	ldr	r2, [r4, #16]
 8005012:	f003 0306 	and.w	r3, r3, #6
 8005016:	2b04      	cmp	r3, #4
 8005018:	bf02      	ittt	eq
 800501a:	68e5      	ldreq	r5, [r4, #12]
 800501c:	6833      	ldreq	r3, [r6, #0]
 800501e:	1aed      	subeq	r5, r5, r3
 8005020:	68a3      	ldr	r3, [r4, #8]
 8005022:	bf0c      	ite	eq
 8005024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005028:	2500      	movne	r5, #0
 800502a:	4293      	cmp	r3, r2
 800502c:	bfc4      	itt	gt
 800502e:	1a9b      	subgt	r3, r3, r2
 8005030:	18ed      	addgt	r5, r5, r3
 8005032:	2600      	movs	r6, #0
 8005034:	341a      	adds	r4, #26
 8005036:	42b5      	cmp	r5, r6
 8005038:	d11a      	bne.n	8005070 <_printf_common+0xc8>
 800503a:	2000      	movs	r0, #0
 800503c:	e008      	b.n	8005050 <_printf_common+0xa8>
 800503e:	2301      	movs	r3, #1
 8005040:	4652      	mov	r2, sl
 8005042:	4641      	mov	r1, r8
 8005044:	4638      	mov	r0, r7
 8005046:	47c8      	blx	r9
 8005048:	3001      	adds	r0, #1
 800504a:	d103      	bne.n	8005054 <_printf_common+0xac>
 800504c:	f04f 30ff 	mov.w	r0, #4294967295
 8005050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005054:	3501      	adds	r5, #1
 8005056:	e7c6      	b.n	8004fe6 <_printf_common+0x3e>
 8005058:	18e1      	adds	r1, r4, r3
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	2030      	movs	r0, #48	@ 0x30
 800505e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005062:	4422      	add	r2, r4
 8005064:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005068:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800506c:	3302      	adds	r3, #2
 800506e:	e7c7      	b.n	8005000 <_printf_common+0x58>
 8005070:	2301      	movs	r3, #1
 8005072:	4622      	mov	r2, r4
 8005074:	4641      	mov	r1, r8
 8005076:	4638      	mov	r0, r7
 8005078:	47c8      	blx	r9
 800507a:	3001      	adds	r0, #1
 800507c:	d0e6      	beq.n	800504c <_printf_common+0xa4>
 800507e:	3601      	adds	r6, #1
 8005080:	e7d9      	b.n	8005036 <_printf_common+0x8e>
	...

08005084 <_printf_i>:
 8005084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005088:	7e0f      	ldrb	r7, [r1, #24]
 800508a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800508c:	2f78      	cmp	r7, #120	@ 0x78
 800508e:	4691      	mov	r9, r2
 8005090:	4680      	mov	r8, r0
 8005092:	460c      	mov	r4, r1
 8005094:	469a      	mov	sl, r3
 8005096:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800509a:	d807      	bhi.n	80050ac <_printf_i+0x28>
 800509c:	2f62      	cmp	r7, #98	@ 0x62
 800509e:	d80a      	bhi.n	80050b6 <_printf_i+0x32>
 80050a0:	2f00      	cmp	r7, #0
 80050a2:	f000 80d2 	beq.w	800524a <_printf_i+0x1c6>
 80050a6:	2f58      	cmp	r7, #88	@ 0x58
 80050a8:	f000 80b9 	beq.w	800521e <_printf_i+0x19a>
 80050ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050b4:	e03a      	b.n	800512c <_printf_i+0xa8>
 80050b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050ba:	2b15      	cmp	r3, #21
 80050bc:	d8f6      	bhi.n	80050ac <_printf_i+0x28>
 80050be:	a101      	add	r1, pc, #4	@ (adr r1, 80050c4 <_printf_i+0x40>)
 80050c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050c4:	0800511d 	.word	0x0800511d
 80050c8:	08005131 	.word	0x08005131
 80050cc:	080050ad 	.word	0x080050ad
 80050d0:	080050ad 	.word	0x080050ad
 80050d4:	080050ad 	.word	0x080050ad
 80050d8:	080050ad 	.word	0x080050ad
 80050dc:	08005131 	.word	0x08005131
 80050e0:	080050ad 	.word	0x080050ad
 80050e4:	080050ad 	.word	0x080050ad
 80050e8:	080050ad 	.word	0x080050ad
 80050ec:	080050ad 	.word	0x080050ad
 80050f0:	08005231 	.word	0x08005231
 80050f4:	0800515b 	.word	0x0800515b
 80050f8:	080051eb 	.word	0x080051eb
 80050fc:	080050ad 	.word	0x080050ad
 8005100:	080050ad 	.word	0x080050ad
 8005104:	08005253 	.word	0x08005253
 8005108:	080050ad 	.word	0x080050ad
 800510c:	0800515b 	.word	0x0800515b
 8005110:	080050ad 	.word	0x080050ad
 8005114:	080050ad 	.word	0x080050ad
 8005118:	080051f3 	.word	0x080051f3
 800511c:	6833      	ldr	r3, [r6, #0]
 800511e:	1d1a      	adds	r2, r3, #4
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6032      	str	r2, [r6, #0]
 8005124:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005128:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800512c:	2301      	movs	r3, #1
 800512e:	e09d      	b.n	800526c <_printf_i+0x1e8>
 8005130:	6833      	ldr	r3, [r6, #0]
 8005132:	6820      	ldr	r0, [r4, #0]
 8005134:	1d19      	adds	r1, r3, #4
 8005136:	6031      	str	r1, [r6, #0]
 8005138:	0606      	lsls	r6, r0, #24
 800513a:	d501      	bpl.n	8005140 <_printf_i+0xbc>
 800513c:	681d      	ldr	r5, [r3, #0]
 800513e:	e003      	b.n	8005148 <_printf_i+0xc4>
 8005140:	0645      	lsls	r5, r0, #25
 8005142:	d5fb      	bpl.n	800513c <_printf_i+0xb8>
 8005144:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005148:	2d00      	cmp	r5, #0
 800514a:	da03      	bge.n	8005154 <_printf_i+0xd0>
 800514c:	232d      	movs	r3, #45	@ 0x2d
 800514e:	426d      	negs	r5, r5
 8005150:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005154:	4859      	ldr	r0, [pc, #356]	@ (80052bc <_printf_i+0x238>)
 8005156:	230a      	movs	r3, #10
 8005158:	e011      	b.n	800517e <_printf_i+0xfa>
 800515a:	6821      	ldr	r1, [r4, #0]
 800515c:	6833      	ldr	r3, [r6, #0]
 800515e:	0608      	lsls	r0, r1, #24
 8005160:	f853 5b04 	ldr.w	r5, [r3], #4
 8005164:	d402      	bmi.n	800516c <_printf_i+0xe8>
 8005166:	0649      	lsls	r1, r1, #25
 8005168:	bf48      	it	mi
 800516a:	b2ad      	uxthmi	r5, r5
 800516c:	2f6f      	cmp	r7, #111	@ 0x6f
 800516e:	4853      	ldr	r0, [pc, #332]	@ (80052bc <_printf_i+0x238>)
 8005170:	6033      	str	r3, [r6, #0]
 8005172:	bf14      	ite	ne
 8005174:	230a      	movne	r3, #10
 8005176:	2308      	moveq	r3, #8
 8005178:	2100      	movs	r1, #0
 800517a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800517e:	6866      	ldr	r6, [r4, #4]
 8005180:	60a6      	str	r6, [r4, #8]
 8005182:	2e00      	cmp	r6, #0
 8005184:	bfa2      	ittt	ge
 8005186:	6821      	ldrge	r1, [r4, #0]
 8005188:	f021 0104 	bicge.w	r1, r1, #4
 800518c:	6021      	strge	r1, [r4, #0]
 800518e:	b90d      	cbnz	r5, 8005194 <_printf_i+0x110>
 8005190:	2e00      	cmp	r6, #0
 8005192:	d04b      	beq.n	800522c <_printf_i+0x1a8>
 8005194:	4616      	mov	r6, r2
 8005196:	fbb5 f1f3 	udiv	r1, r5, r3
 800519a:	fb03 5711 	mls	r7, r3, r1, r5
 800519e:	5dc7      	ldrb	r7, [r0, r7]
 80051a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051a4:	462f      	mov	r7, r5
 80051a6:	42bb      	cmp	r3, r7
 80051a8:	460d      	mov	r5, r1
 80051aa:	d9f4      	bls.n	8005196 <_printf_i+0x112>
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d10b      	bne.n	80051c8 <_printf_i+0x144>
 80051b0:	6823      	ldr	r3, [r4, #0]
 80051b2:	07df      	lsls	r7, r3, #31
 80051b4:	d508      	bpl.n	80051c8 <_printf_i+0x144>
 80051b6:	6923      	ldr	r3, [r4, #16]
 80051b8:	6861      	ldr	r1, [r4, #4]
 80051ba:	4299      	cmp	r1, r3
 80051bc:	bfde      	ittt	le
 80051be:	2330      	movle	r3, #48	@ 0x30
 80051c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051c8:	1b92      	subs	r2, r2, r6
 80051ca:	6122      	str	r2, [r4, #16]
 80051cc:	f8cd a000 	str.w	sl, [sp]
 80051d0:	464b      	mov	r3, r9
 80051d2:	aa03      	add	r2, sp, #12
 80051d4:	4621      	mov	r1, r4
 80051d6:	4640      	mov	r0, r8
 80051d8:	f7ff fee6 	bl	8004fa8 <_printf_common>
 80051dc:	3001      	adds	r0, #1
 80051de:	d14a      	bne.n	8005276 <_printf_i+0x1f2>
 80051e0:	f04f 30ff 	mov.w	r0, #4294967295
 80051e4:	b004      	add	sp, #16
 80051e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	f043 0320 	orr.w	r3, r3, #32
 80051f0:	6023      	str	r3, [r4, #0]
 80051f2:	4833      	ldr	r0, [pc, #204]	@ (80052c0 <_printf_i+0x23c>)
 80051f4:	2778      	movs	r7, #120	@ 0x78
 80051f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	6831      	ldr	r1, [r6, #0]
 80051fe:	061f      	lsls	r7, r3, #24
 8005200:	f851 5b04 	ldr.w	r5, [r1], #4
 8005204:	d402      	bmi.n	800520c <_printf_i+0x188>
 8005206:	065f      	lsls	r7, r3, #25
 8005208:	bf48      	it	mi
 800520a:	b2ad      	uxthmi	r5, r5
 800520c:	6031      	str	r1, [r6, #0]
 800520e:	07d9      	lsls	r1, r3, #31
 8005210:	bf44      	itt	mi
 8005212:	f043 0320 	orrmi.w	r3, r3, #32
 8005216:	6023      	strmi	r3, [r4, #0]
 8005218:	b11d      	cbz	r5, 8005222 <_printf_i+0x19e>
 800521a:	2310      	movs	r3, #16
 800521c:	e7ac      	b.n	8005178 <_printf_i+0xf4>
 800521e:	4827      	ldr	r0, [pc, #156]	@ (80052bc <_printf_i+0x238>)
 8005220:	e7e9      	b.n	80051f6 <_printf_i+0x172>
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	f023 0320 	bic.w	r3, r3, #32
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	e7f6      	b.n	800521a <_printf_i+0x196>
 800522c:	4616      	mov	r6, r2
 800522e:	e7bd      	b.n	80051ac <_printf_i+0x128>
 8005230:	6833      	ldr	r3, [r6, #0]
 8005232:	6825      	ldr	r5, [r4, #0]
 8005234:	6961      	ldr	r1, [r4, #20]
 8005236:	1d18      	adds	r0, r3, #4
 8005238:	6030      	str	r0, [r6, #0]
 800523a:	062e      	lsls	r6, r5, #24
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	d501      	bpl.n	8005244 <_printf_i+0x1c0>
 8005240:	6019      	str	r1, [r3, #0]
 8005242:	e002      	b.n	800524a <_printf_i+0x1c6>
 8005244:	0668      	lsls	r0, r5, #25
 8005246:	d5fb      	bpl.n	8005240 <_printf_i+0x1bc>
 8005248:	8019      	strh	r1, [r3, #0]
 800524a:	2300      	movs	r3, #0
 800524c:	6123      	str	r3, [r4, #16]
 800524e:	4616      	mov	r6, r2
 8005250:	e7bc      	b.n	80051cc <_printf_i+0x148>
 8005252:	6833      	ldr	r3, [r6, #0]
 8005254:	1d1a      	adds	r2, r3, #4
 8005256:	6032      	str	r2, [r6, #0]
 8005258:	681e      	ldr	r6, [r3, #0]
 800525a:	6862      	ldr	r2, [r4, #4]
 800525c:	2100      	movs	r1, #0
 800525e:	4630      	mov	r0, r6
 8005260:	f7fa ffb6 	bl	80001d0 <memchr>
 8005264:	b108      	cbz	r0, 800526a <_printf_i+0x1e6>
 8005266:	1b80      	subs	r0, r0, r6
 8005268:	6060      	str	r0, [r4, #4]
 800526a:	6863      	ldr	r3, [r4, #4]
 800526c:	6123      	str	r3, [r4, #16]
 800526e:	2300      	movs	r3, #0
 8005270:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005274:	e7aa      	b.n	80051cc <_printf_i+0x148>
 8005276:	6923      	ldr	r3, [r4, #16]
 8005278:	4632      	mov	r2, r6
 800527a:	4649      	mov	r1, r9
 800527c:	4640      	mov	r0, r8
 800527e:	47d0      	blx	sl
 8005280:	3001      	adds	r0, #1
 8005282:	d0ad      	beq.n	80051e0 <_printf_i+0x15c>
 8005284:	6823      	ldr	r3, [r4, #0]
 8005286:	079b      	lsls	r3, r3, #30
 8005288:	d413      	bmi.n	80052b2 <_printf_i+0x22e>
 800528a:	68e0      	ldr	r0, [r4, #12]
 800528c:	9b03      	ldr	r3, [sp, #12]
 800528e:	4298      	cmp	r0, r3
 8005290:	bfb8      	it	lt
 8005292:	4618      	movlt	r0, r3
 8005294:	e7a6      	b.n	80051e4 <_printf_i+0x160>
 8005296:	2301      	movs	r3, #1
 8005298:	4632      	mov	r2, r6
 800529a:	4649      	mov	r1, r9
 800529c:	4640      	mov	r0, r8
 800529e:	47d0      	blx	sl
 80052a0:	3001      	adds	r0, #1
 80052a2:	d09d      	beq.n	80051e0 <_printf_i+0x15c>
 80052a4:	3501      	adds	r5, #1
 80052a6:	68e3      	ldr	r3, [r4, #12]
 80052a8:	9903      	ldr	r1, [sp, #12]
 80052aa:	1a5b      	subs	r3, r3, r1
 80052ac:	42ab      	cmp	r3, r5
 80052ae:	dcf2      	bgt.n	8005296 <_printf_i+0x212>
 80052b0:	e7eb      	b.n	800528a <_printf_i+0x206>
 80052b2:	2500      	movs	r5, #0
 80052b4:	f104 0619 	add.w	r6, r4, #25
 80052b8:	e7f5      	b.n	80052a6 <_printf_i+0x222>
 80052ba:	bf00      	nop
 80052bc:	08007742 	.word	0x08007742
 80052c0:	08007753 	.word	0x08007753

080052c4 <std>:
 80052c4:	2300      	movs	r3, #0
 80052c6:	b510      	push	{r4, lr}
 80052c8:	4604      	mov	r4, r0
 80052ca:	e9c0 3300 	strd	r3, r3, [r0]
 80052ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052d2:	6083      	str	r3, [r0, #8]
 80052d4:	8181      	strh	r1, [r0, #12]
 80052d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80052d8:	81c2      	strh	r2, [r0, #14]
 80052da:	6183      	str	r3, [r0, #24]
 80052dc:	4619      	mov	r1, r3
 80052de:	2208      	movs	r2, #8
 80052e0:	305c      	adds	r0, #92	@ 0x5c
 80052e2:	f000 f914 	bl	800550e <memset>
 80052e6:	4b0d      	ldr	r3, [pc, #52]	@ (800531c <std+0x58>)
 80052e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80052ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005320 <std+0x5c>)
 80052ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80052ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005324 <std+0x60>)
 80052f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80052f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005328 <std+0x64>)
 80052f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80052f6:	4b0d      	ldr	r3, [pc, #52]	@ (800532c <std+0x68>)
 80052f8:	6224      	str	r4, [r4, #32]
 80052fa:	429c      	cmp	r4, r3
 80052fc:	d006      	beq.n	800530c <std+0x48>
 80052fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005302:	4294      	cmp	r4, r2
 8005304:	d002      	beq.n	800530c <std+0x48>
 8005306:	33d0      	adds	r3, #208	@ 0xd0
 8005308:	429c      	cmp	r4, r3
 800530a:	d105      	bne.n	8005318 <std+0x54>
 800530c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005314:	f000 b978 	b.w	8005608 <__retarget_lock_init_recursive>
 8005318:	bd10      	pop	{r4, pc}
 800531a:	bf00      	nop
 800531c:	08005489 	.word	0x08005489
 8005320:	080054ab 	.word	0x080054ab
 8005324:	080054e3 	.word	0x080054e3
 8005328:	08005507 	.word	0x08005507
 800532c:	200002f8 	.word	0x200002f8

08005330 <stdio_exit_handler>:
 8005330:	4a02      	ldr	r2, [pc, #8]	@ (800533c <stdio_exit_handler+0xc>)
 8005332:	4903      	ldr	r1, [pc, #12]	@ (8005340 <stdio_exit_handler+0x10>)
 8005334:	4803      	ldr	r0, [pc, #12]	@ (8005344 <stdio_exit_handler+0x14>)
 8005336:	f000 b869 	b.w	800540c <_fwalk_sglue>
 800533a:	bf00      	nop
 800533c:	2000000c 	.word	0x2000000c
 8005340:	08006f65 	.word	0x08006f65
 8005344:	2000001c 	.word	0x2000001c

08005348 <cleanup_stdio>:
 8005348:	6841      	ldr	r1, [r0, #4]
 800534a:	4b0c      	ldr	r3, [pc, #48]	@ (800537c <cleanup_stdio+0x34>)
 800534c:	4299      	cmp	r1, r3
 800534e:	b510      	push	{r4, lr}
 8005350:	4604      	mov	r4, r0
 8005352:	d001      	beq.n	8005358 <cleanup_stdio+0x10>
 8005354:	f001 fe06 	bl	8006f64 <_fflush_r>
 8005358:	68a1      	ldr	r1, [r4, #8]
 800535a:	4b09      	ldr	r3, [pc, #36]	@ (8005380 <cleanup_stdio+0x38>)
 800535c:	4299      	cmp	r1, r3
 800535e:	d002      	beq.n	8005366 <cleanup_stdio+0x1e>
 8005360:	4620      	mov	r0, r4
 8005362:	f001 fdff 	bl	8006f64 <_fflush_r>
 8005366:	68e1      	ldr	r1, [r4, #12]
 8005368:	4b06      	ldr	r3, [pc, #24]	@ (8005384 <cleanup_stdio+0x3c>)
 800536a:	4299      	cmp	r1, r3
 800536c:	d004      	beq.n	8005378 <cleanup_stdio+0x30>
 800536e:	4620      	mov	r0, r4
 8005370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005374:	f001 bdf6 	b.w	8006f64 <_fflush_r>
 8005378:	bd10      	pop	{r4, pc}
 800537a:	bf00      	nop
 800537c:	200002f8 	.word	0x200002f8
 8005380:	20000360 	.word	0x20000360
 8005384:	200003c8 	.word	0x200003c8

08005388 <global_stdio_init.part.0>:
 8005388:	b510      	push	{r4, lr}
 800538a:	4b0b      	ldr	r3, [pc, #44]	@ (80053b8 <global_stdio_init.part.0+0x30>)
 800538c:	4c0b      	ldr	r4, [pc, #44]	@ (80053bc <global_stdio_init.part.0+0x34>)
 800538e:	4a0c      	ldr	r2, [pc, #48]	@ (80053c0 <global_stdio_init.part.0+0x38>)
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	4620      	mov	r0, r4
 8005394:	2200      	movs	r2, #0
 8005396:	2104      	movs	r1, #4
 8005398:	f7ff ff94 	bl	80052c4 <std>
 800539c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053a0:	2201      	movs	r2, #1
 80053a2:	2109      	movs	r1, #9
 80053a4:	f7ff ff8e 	bl	80052c4 <std>
 80053a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053ac:	2202      	movs	r2, #2
 80053ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053b2:	2112      	movs	r1, #18
 80053b4:	f7ff bf86 	b.w	80052c4 <std>
 80053b8:	20000430 	.word	0x20000430
 80053bc:	200002f8 	.word	0x200002f8
 80053c0:	08005331 	.word	0x08005331

080053c4 <__sfp_lock_acquire>:
 80053c4:	4801      	ldr	r0, [pc, #4]	@ (80053cc <__sfp_lock_acquire+0x8>)
 80053c6:	f000 b920 	b.w	800560a <__retarget_lock_acquire_recursive>
 80053ca:	bf00      	nop
 80053cc:	20000439 	.word	0x20000439

080053d0 <__sfp_lock_release>:
 80053d0:	4801      	ldr	r0, [pc, #4]	@ (80053d8 <__sfp_lock_release+0x8>)
 80053d2:	f000 b91b 	b.w	800560c <__retarget_lock_release_recursive>
 80053d6:	bf00      	nop
 80053d8:	20000439 	.word	0x20000439

080053dc <__sinit>:
 80053dc:	b510      	push	{r4, lr}
 80053de:	4604      	mov	r4, r0
 80053e0:	f7ff fff0 	bl	80053c4 <__sfp_lock_acquire>
 80053e4:	6a23      	ldr	r3, [r4, #32]
 80053e6:	b11b      	cbz	r3, 80053f0 <__sinit+0x14>
 80053e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053ec:	f7ff bff0 	b.w	80053d0 <__sfp_lock_release>
 80053f0:	4b04      	ldr	r3, [pc, #16]	@ (8005404 <__sinit+0x28>)
 80053f2:	6223      	str	r3, [r4, #32]
 80053f4:	4b04      	ldr	r3, [pc, #16]	@ (8005408 <__sinit+0x2c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1f5      	bne.n	80053e8 <__sinit+0xc>
 80053fc:	f7ff ffc4 	bl	8005388 <global_stdio_init.part.0>
 8005400:	e7f2      	b.n	80053e8 <__sinit+0xc>
 8005402:	bf00      	nop
 8005404:	08005349 	.word	0x08005349
 8005408:	20000430 	.word	0x20000430

0800540c <_fwalk_sglue>:
 800540c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005410:	4607      	mov	r7, r0
 8005412:	4688      	mov	r8, r1
 8005414:	4614      	mov	r4, r2
 8005416:	2600      	movs	r6, #0
 8005418:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800541c:	f1b9 0901 	subs.w	r9, r9, #1
 8005420:	d505      	bpl.n	800542e <_fwalk_sglue+0x22>
 8005422:	6824      	ldr	r4, [r4, #0]
 8005424:	2c00      	cmp	r4, #0
 8005426:	d1f7      	bne.n	8005418 <_fwalk_sglue+0xc>
 8005428:	4630      	mov	r0, r6
 800542a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800542e:	89ab      	ldrh	r3, [r5, #12]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d907      	bls.n	8005444 <_fwalk_sglue+0x38>
 8005434:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005438:	3301      	adds	r3, #1
 800543a:	d003      	beq.n	8005444 <_fwalk_sglue+0x38>
 800543c:	4629      	mov	r1, r5
 800543e:	4638      	mov	r0, r7
 8005440:	47c0      	blx	r8
 8005442:	4306      	orrs	r6, r0
 8005444:	3568      	adds	r5, #104	@ 0x68
 8005446:	e7e9      	b.n	800541c <_fwalk_sglue+0x10>

08005448 <siprintf>:
 8005448:	b40e      	push	{r1, r2, r3}
 800544a:	b500      	push	{lr}
 800544c:	b09c      	sub	sp, #112	@ 0x70
 800544e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005450:	9002      	str	r0, [sp, #8]
 8005452:	9006      	str	r0, [sp, #24]
 8005454:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005458:	4809      	ldr	r0, [pc, #36]	@ (8005480 <siprintf+0x38>)
 800545a:	9107      	str	r1, [sp, #28]
 800545c:	9104      	str	r1, [sp, #16]
 800545e:	4909      	ldr	r1, [pc, #36]	@ (8005484 <siprintf+0x3c>)
 8005460:	f853 2b04 	ldr.w	r2, [r3], #4
 8005464:	9105      	str	r1, [sp, #20]
 8005466:	6800      	ldr	r0, [r0, #0]
 8005468:	9301      	str	r3, [sp, #4]
 800546a:	a902      	add	r1, sp, #8
 800546c:	f001 fbfa 	bl	8006c64 <_svfiprintf_r>
 8005470:	9b02      	ldr	r3, [sp, #8]
 8005472:	2200      	movs	r2, #0
 8005474:	701a      	strb	r2, [r3, #0]
 8005476:	b01c      	add	sp, #112	@ 0x70
 8005478:	f85d eb04 	ldr.w	lr, [sp], #4
 800547c:	b003      	add	sp, #12
 800547e:	4770      	bx	lr
 8005480:	20000018 	.word	0x20000018
 8005484:	ffff0208 	.word	0xffff0208

08005488 <__sread>:
 8005488:	b510      	push	{r4, lr}
 800548a:	460c      	mov	r4, r1
 800548c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005490:	f000 f86c 	bl	800556c <_read_r>
 8005494:	2800      	cmp	r0, #0
 8005496:	bfab      	itete	ge
 8005498:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800549a:	89a3      	ldrhlt	r3, [r4, #12]
 800549c:	181b      	addge	r3, r3, r0
 800549e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80054a2:	bfac      	ite	ge
 80054a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80054a6:	81a3      	strhlt	r3, [r4, #12]
 80054a8:	bd10      	pop	{r4, pc}

080054aa <__swrite>:
 80054aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ae:	461f      	mov	r7, r3
 80054b0:	898b      	ldrh	r3, [r1, #12]
 80054b2:	05db      	lsls	r3, r3, #23
 80054b4:	4605      	mov	r5, r0
 80054b6:	460c      	mov	r4, r1
 80054b8:	4616      	mov	r6, r2
 80054ba:	d505      	bpl.n	80054c8 <__swrite+0x1e>
 80054bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054c0:	2302      	movs	r3, #2
 80054c2:	2200      	movs	r2, #0
 80054c4:	f000 f840 	bl	8005548 <_lseek_r>
 80054c8:	89a3      	ldrh	r3, [r4, #12]
 80054ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054d2:	81a3      	strh	r3, [r4, #12]
 80054d4:	4632      	mov	r2, r6
 80054d6:	463b      	mov	r3, r7
 80054d8:	4628      	mov	r0, r5
 80054da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054de:	f000 b857 	b.w	8005590 <_write_r>

080054e2 <__sseek>:
 80054e2:	b510      	push	{r4, lr}
 80054e4:	460c      	mov	r4, r1
 80054e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ea:	f000 f82d 	bl	8005548 <_lseek_r>
 80054ee:	1c43      	adds	r3, r0, #1
 80054f0:	89a3      	ldrh	r3, [r4, #12]
 80054f2:	bf15      	itete	ne
 80054f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80054f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80054fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80054fe:	81a3      	strheq	r3, [r4, #12]
 8005500:	bf18      	it	ne
 8005502:	81a3      	strhne	r3, [r4, #12]
 8005504:	bd10      	pop	{r4, pc}

08005506 <__sclose>:
 8005506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800550a:	f000 b80d 	b.w	8005528 <_close_r>

0800550e <memset>:
 800550e:	4402      	add	r2, r0
 8005510:	4603      	mov	r3, r0
 8005512:	4293      	cmp	r3, r2
 8005514:	d100      	bne.n	8005518 <memset+0xa>
 8005516:	4770      	bx	lr
 8005518:	f803 1b01 	strb.w	r1, [r3], #1
 800551c:	e7f9      	b.n	8005512 <memset+0x4>
	...

08005520 <_localeconv_r>:
 8005520:	4800      	ldr	r0, [pc, #0]	@ (8005524 <_localeconv_r+0x4>)
 8005522:	4770      	bx	lr
 8005524:	20000158 	.word	0x20000158

08005528 <_close_r>:
 8005528:	b538      	push	{r3, r4, r5, lr}
 800552a:	4d06      	ldr	r5, [pc, #24]	@ (8005544 <_close_r+0x1c>)
 800552c:	2300      	movs	r3, #0
 800552e:	4604      	mov	r4, r0
 8005530:	4608      	mov	r0, r1
 8005532:	602b      	str	r3, [r5, #0]
 8005534:	f7fc f88a 	bl	800164c <_close>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	d102      	bne.n	8005542 <_close_r+0x1a>
 800553c:	682b      	ldr	r3, [r5, #0]
 800553e:	b103      	cbz	r3, 8005542 <_close_r+0x1a>
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	bd38      	pop	{r3, r4, r5, pc}
 8005544:	20000434 	.word	0x20000434

08005548 <_lseek_r>:
 8005548:	b538      	push	{r3, r4, r5, lr}
 800554a:	4d07      	ldr	r5, [pc, #28]	@ (8005568 <_lseek_r+0x20>)
 800554c:	4604      	mov	r4, r0
 800554e:	4608      	mov	r0, r1
 8005550:	4611      	mov	r1, r2
 8005552:	2200      	movs	r2, #0
 8005554:	602a      	str	r2, [r5, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	f7fc f89f 	bl	800169a <_lseek>
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	d102      	bne.n	8005566 <_lseek_r+0x1e>
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	b103      	cbz	r3, 8005566 <_lseek_r+0x1e>
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	bd38      	pop	{r3, r4, r5, pc}
 8005568:	20000434 	.word	0x20000434

0800556c <_read_r>:
 800556c:	b538      	push	{r3, r4, r5, lr}
 800556e:	4d07      	ldr	r5, [pc, #28]	@ (800558c <_read_r+0x20>)
 8005570:	4604      	mov	r4, r0
 8005572:	4608      	mov	r0, r1
 8005574:	4611      	mov	r1, r2
 8005576:	2200      	movs	r2, #0
 8005578:	602a      	str	r2, [r5, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	f7fc f82d 	bl	80015da <_read>
 8005580:	1c43      	adds	r3, r0, #1
 8005582:	d102      	bne.n	800558a <_read_r+0x1e>
 8005584:	682b      	ldr	r3, [r5, #0]
 8005586:	b103      	cbz	r3, 800558a <_read_r+0x1e>
 8005588:	6023      	str	r3, [r4, #0]
 800558a:	bd38      	pop	{r3, r4, r5, pc}
 800558c:	20000434 	.word	0x20000434

08005590 <_write_r>:
 8005590:	b538      	push	{r3, r4, r5, lr}
 8005592:	4d07      	ldr	r5, [pc, #28]	@ (80055b0 <_write_r+0x20>)
 8005594:	4604      	mov	r4, r0
 8005596:	4608      	mov	r0, r1
 8005598:	4611      	mov	r1, r2
 800559a:	2200      	movs	r2, #0
 800559c:	602a      	str	r2, [r5, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	f7fc f838 	bl	8001614 <_write>
 80055a4:	1c43      	adds	r3, r0, #1
 80055a6:	d102      	bne.n	80055ae <_write_r+0x1e>
 80055a8:	682b      	ldr	r3, [r5, #0]
 80055aa:	b103      	cbz	r3, 80055ae <_write_r+0x1e>
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	bd38      	pop	{r3, r4, r5, pc}
 80055b0:	20000434 	.word	0x20000434

080055b4 <__errno>:
 80055b4:	4b01      	ldr	r3, [pc, #4]	@ (80055bc <__errno+0x8>)
 80055b6:	6818      	ldr	r0, [r3, #0]
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	20000018 	.word	0x20000018

080055c0 <__libc_init_array>:
 80055c0:	b570      	push	{r4, r5, r6, lr}
 80055c2:	4d0d      	ldr	r5, [pc, #52]	@ (80055f8 <__libc_init_array+0x38>)
 80055c4:	4c0d      	ldr	r4, [pc, #52]	@ (80055fc <__libc_init_array+0x3c>)
 80055c6:	1b64      	subs	r4, r4, r5
 80055c8:	10a4      	asrs	r4, r4, #2
 80055ca:	2600      	movs	r6, #0
 80055cc:	42a6      	cmp	r6, r4
 80055ce:	d109      	bne.n	80055e4 <__libc_init_array+0x24>
 80055d0:	4d0b      	ldr	r5, [pc, #44]	@ (8005600 <__libc_init_array+0x40>)
 80055d2:	4c0c      	ldr	r4, [pc, #48]	@ (8005604 <__libc_init_array+0x44>)
 80055d4:	f002 f864 	bl	80076a0 <_init>
 80055d8:	1b64      	subs	r4, r4, r5
 80055da:	10a4      	asrs	r4, r4, #2
 80055dc:	2600      	movs	r6, #0
 80055de:	42a6      	cmp	r6, r4
 80055e0:	d105      	bne.n	80055ee <__libc_init_array+0x2e>
 80055e2:	bd70      	pop	{r4, r5, r6, pc}
 80055e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055e8:	4798      	blx	r3
 80055ea:	3601      	adds	r6, #1
 80055ec:	e7ee      	b.n	80055cc <__libc_init_array+0xc>
 80055ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f2:	4798      	blx	r3
 80055f4:	3601      	adds	r6, #1
 80055f6:	e7f2      	b.n	80055de <__libc_init_array+0x1e>
 80055f8:	08007aa8 	.word	0x08007aa8
 80055fc:	08007aa8 	.word	0x08007aa8
 8005600:	08007aa8 	.word	0x08007aa8
 8005604:	08007aac 	.word	0x08007aac

08005608 <__retarget_lock_init_recursive>:
 8005608:	4770      	bx	lr

0800560a <__retarget_lock_acquire_recursive>:
 800560a:	4770      	bx	lr

0800560c <__retarget_lock_release_recursive>:
 800560c:	4770      	bx	lr

0800560e <quorem>:
 800560e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005612:	6903      	ldr	r3, [r0, #16]
 8005614:	690c      	ldr	r4, [r1, #16]
 8005616:	42a3      	cmp	r3, r4
 8005618:	4607      	mov	r7, r0
 800561a:	db7e      	blt.n	800571a <quorem+0x10c>
 800561c:	3c01      	subs	r4, #1
 800561e:	f101 0814 	add.w	r8, r1, #20
 8005622:	00a3      	lsls	r3, r4, #2
 8005624:	f100 0514 	add.w	r5, r0, #20
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800562e:	9301      	str	r3, [sp, #4]
 8005630:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005634:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005638:	3301      	adds	r3, #1
 800563a:	429a      	cmp	r2, r3
 800563c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005640:	fbb2 f6f3 	udiv	r6, r2, r3
 8005644:	d32e      	bcc.n	80056a4 <quorem+0x96>
 8005646:	f04f 0a00 	mov.w	sl, #0
 800564a:	46c4      	mov	ip, r8
 800564c:	46ae      	mov	lr, r5
 800564e:	46d3      	mov	fp, sl
 8005650:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005654:	b298      	uxth	r0, r3
 8005656:	fb06 a000 	mla	r0, r6, r0, sl
 800565a:	0c02      	lsrs	r2, r0, #16
 800565c:	0c1b      	lsrs	r3, r3, #16
 800565e:	fb06 2303 	mla	r3, r6, r3, r2
 8005662:	f8de 2000 	ldr.w	r2, [lr]
 8005666:	b280      	uxth	r0, r0
 8005668:	b292      	uxth	r2, r2
 800566a:	1a12      	subs	r2, r2, r0
 800566c:	445a      	add	r2, fp
 800566e:	f8de 0000 	ldr.w	r0, [lr]
 8005672:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005676:	b29b      	uxth	r3, r3
 8005678:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800567c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005680:	b292      	uxth	r2, r2
 8005682:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005686:	45e1      	cmp	r9, ip
 8005688:	f84e 2b04 	str.w	r2, [lr], #4
 800568c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005690:	d2de      	bcs.n	8005650 <quorem+0x42>
 8005692:	9b00      	ldr	r3, [sp, #0]
 8005694:	58eb      	ldr	r3, [r5, r3]
 8005696:	b92b      	cbnz	r3, 80056a4 <quorem+0x96>
 8005698:	9b01      	ldr	r3, [sp, #4]
 800569a:	3b04      	subs	r3, #4
 800569c:	429d      	cmp	r5, r3
 800569e:	461a      	mov	r2, r3
 80056a0:	d32f      	bcc.n	8005702 <quorem+0xf4>
 80056a2:	613c      	str	r4, [r7, #16]
 80056a4:	4638      	mov	r0, r7
 80056a6:	f001 f979 	bl	800699c <__mcmp>
 80056aa:	2800      	cmp	r0, #0
 80056ac:	db25      	blt.n	80056fa <quorem+0xec>
 80056ae:	4629      	mov	r1, r5
 80056b0:	2000      	movs	r0, #0
 80056b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80056b6:	f8d1 c000 	ldr.w	ip, [r1]
 80056ba:	fa1f fe82 	uxth.w	lr, r2
 80056be:	fa1f f38c 	uxth.w	r3, ip
 80056c2:	eba3 030e 	sub.w	r3, r3, lr
 80056c6:	4403      	add	r3, r0
 80056c8:	0c12      	lsrs	r2, r2, #16
 80056ca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80056ce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056d8:	45c1      	cmp	r9, r8
 80056da:	f841 3b04 	str.w	r3, [r1], #4
 80056de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80056e2:	d2e6      	bcs.n	80056b2 <quorem+0xa4>
 80056e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056ec:	b922      	cbnz	r2, 80056f8 <quorem+0xea>
 80056ee:	3b04      	subs	r3, #4
 80056f0:	429d      	cmp	r5, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	d30b      	bcc.n	800570e <quorem+0x100>
 80056f6:	613c      	str	r4, [r7, #16]
 80056f8:	3601      	adds	r6, #1
 80056fa:	4630      	mov	r0, r6
 80056fc:	b003      	add	sp, #12
 80056fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005702:	6812      	ldr	r2, [r2, #0]
 8005704:	3b04      	subs	r3, #4
 8005706:	2a00      	cmp	r2, #0
 8005708:	d1cb      	bne.n	80056a2 <quorem+0x94>
 800570a:	3c01      	subs	r4, #1
 800570c:	e7c6      	b.n	800569c <quorem+0x8e>
 800570e:	6812      	ldr	r2, [r2, #0]
 8005710:	3b04      	subs	r3, #4
 8005712:	2a00      	cmp	r2, #0
 8005714:	d1ef      	bne.n	80056f6 <quorem+0xe8>
 8005716:	3c01      	subs	r4, #1
 8005718:	e7ea      	b.n	80056f0 <quorem+0xe2>
 800571a:	2000      	movs	r0, #0
 800571c:	e7ee      	b.n	80056fc <quorem+0xee>
	...

08005720 <_dtoa_r>:
 8005720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005724:	69c7      	ldr	r7, [r0, #28]
 8005726:	b099      	sub	sp, #100	@ 0x64
 8005728:	ed8d 0b02 	vstr	d0, [sp, #8]
 800572c:	ec55 4b10 	vmov	r4, r5, d0
 8005730:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005732:	9109      	str	r1, [sp, #36]	@ 0x24
 8005734:	4683      	mov	fp, r0
 8005736:	920e      	str	r2, [sp, #56]	@ 0x38
 8005738:	9313      	str	r3, [sp, #76]	@ 0x4c
 800573a:	b97f      	cbnz	r7, 800575c <_dtoa_r+0x3c>
 800573c:	2010      	movs	r0, #16
 800573e:	f000 fdfd 	bl	800633c <malloc>
 8005742:	4602      	mov	r2, r0
 8005744:	f8cb 001c 	str.w	r0, [fp, #28]
 8005748:	b920      	cbnz	r0, 8005754 <_dtoa_r+0x34>
 800574a:	4ba7      	ldr	r3, [pc, #668]	@ (80059e8 <_dtoa_r+0x2c8>)
 800574c:	21ef      	movs	r1, #239	@ 0xef
 800574e:	48a7      	ldr	r0, [pc, #668]	@ (80059ec <_dtoa_r+0x2cc>)
 8005750:	f001 fc68 	bl	8007024 <__assert_func>
 8005754:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005758:	6007      	str	r7, [r0, #0]
 800575a:	60c7      	str	r7, [r0, #12]
 800575c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005760:	6819      	ldr	r1, [r3, #0]
 8005762:	b159      	cbz	r1, 800577c <_dtoa_r+0x5c>
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	604a      	str	r2, [r1, #4]
 8005768:	2301      	movs	r3, #1
 800576a:	4093      	lsls	r3, r2
 800576c:	608b      	str	r3, [r1, #8]
 800576e:	4658      	mov	r0, fp
 8005770:	f000 feda 	bl	8006528 <_Bfree>
 8005774:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	1e2b      	subs	r3, r5, #0
 800577e:	bfb9      	ittee	lt
 8005780:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005784:	9303      	strlt	r3, [sp, #12]
 8005786:	2300      	movge	r3, #0
 8005788:	6033      	strge	r3, [r6, #0]
 800578a:	9f03      	ldr	r7, [sp, #12]
 800578c:	4b98      	ldr	r3, [pc, #608]	@ (80059f0 <_dtoa_r+0x2d0>)
 800578e:	bfbc      	itt	lt
 8005790:	2201      	movlt	r2, #1
 8005792:	6032      	strlt	r2, [r6, #0]
 8005794:	43bb      	bics	r3, r7
 8005796:	d112      	bne.n	80057be <_dtoa_r+0x9e>
 8005798:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800579a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800579e:	6013      	str	r3, [r2, #0]
 80057a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80057a4:	4323      	orrs	r3, r4
 80057a6:	f000 854d 	beq.w	8006244 <_dtoa_r+0xb24>
 80057aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80057ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005a04 <_dtoa_r+0x2e4>
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 854f 	beq.w	8006254 <_dtoa_r+0xb34>
 80057b6:	f10a 0303 	add.w	r3, sl, #3
 80057ba:	f000 bd49 	b.w	8006250 <_dtoa_r+0xb30>
 80057be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80057c2:	2200      	movs	r2, #0
 80057c4:	ec51 0b17 	vmov	r0, r1, d7
 80057c8:	2300      	movs	r3, #0
 80057ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80057ce:	f7fb f97b 	bl	8000ac8 <__aeabi_dcmpeq>
 80057d2:	4680      	mov	r8, r0
 80057d4:	b158      	cbz	r0, 80057ee <_dtoa_r+0xce>
 80057d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80057d8:	2301      	movs	r3, #1
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80057de:	b113      	cbz	r3, 80057e6 <_dtoa_r+0xc6>
 80057e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80057e2:	4b84      	ldr	r3, [pc, #528]	@ (80059f4 <_dtoa_r+0x2d4>)
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005a08 <_dtoa_r+0x2e8>
 80057ea:	f000 bd33 	b.w	8006254 <_dtoa_r+0xb34>
 80057ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80057f2:	aa16      	add	r2, sp, #88	@ 0x58
 80057f4:	a917      	add	r1, sp, #92	@ 0x5c
 80057f6:	4658      	mov	r0, fp
 80057f8:	f001 f980 	bl	8006afc <__d2b>
 80057fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005800:	4681      	mov	r9, r0
 8005802:	2e00      	cmp	r6, #0
 8005804:	d077      	beq.n	80058f6 <_dtoa_r+0x1d6>
 8005806:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005808:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800580c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005810:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005814:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005818:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800581c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005820:	4619      	mov	r1, r3
 8005822:	2200      	movs	r2, #0
 8005824:	4b74      	ldr	r3, [pc, #464]	@ (80059f8 <_dtoa_r+0x2d8>)
 8005826:	f7fa fd2f 	bl	8000288 <__aeabi_dsub>
 800582a:	a369      	add	r3, pc, #420	@ (adr r3, 80059d0 <_dtoa_r+0x2b0>)
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	f7fa fee2 	bl	80005f8 <__aeabi_dmul>
 8005834:	a368      	add	r3, pc, #416	@ (adr r3, 80059d8 <_dtoa_r+0x2b8>)
 8005836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583a:	f7fa fd27 	bl	800028c <__adddf3>
 800583e:	4604      	mov	r4, r0
 8005840:	4630      	mov	r0, r6
 8005842:	460d      	mov	r5, r1
 8005844:	f7fa fe6e 	bl	8000524 <__aeabi_i2d>
 8005848:	a365      	add	r3, pc, #404	@ (adr r3, 80059e0 <_dtoa_r+0x2c0>)
 800584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584e:	f7fa fed3 	bl	80005f8 <__aeabi_dmul>
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	4620      	mov	r0, r4
 8005858:	4629      	mov	r1, r5
 800585a:	f7fa fd17 	bl	800028c <__adddf3>
 800585e:	4604      	mov	r4, r0
 8005860:	460d      	mov	r5, r1
 8005862:	f7fb f979 	bl	8000b58 <__aeabi_d2iz>
 8005866:	2200      	movs	r2, #0
 8005868:	4607      	mov	r7, r0
 800586a:	2300      	movs	r3, #0
 800586c:	4620      	mov	r0, r4
 800586e:	4629      	mov	r1, r5
 8005870:	f7fb f934 	bl	8000adc <__aeabi_dcmplt>
 8005874:	b140      	cbz	r0, 8005888 <_dtoa_r+0x168>
 8005876:	4638      	mov	r0, r7
 8005878:	f7fa fe54 	bl	8000524 <__aeabi_i2d>
 800587c:	4622      	mov	r2, r4
 800587e:	462b      	mov	r3, r5
 8005880:	f7fb f922 	bl	8000ac8 <__aeabi_dcmpeq>
 8005884:	b900      	cbnz	r0, 8005888 <_dtoa_r+0x168>
 8005886:	3f01      	subs	r7, #1
 8005888:	2f16      	cmp	r7, #22
 800588a:	d851      	bhi.n	8005930 <_dtoa_r+0x210>
 800588c:	4b5b      	ldr	r3, [pc, #364]	@ (80059fc <_dtoa_r+0x2dc>)
 800588e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005896:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800589a:	f7fb f91f 	bl	8000adc <__aeabi_dcmplt>
 800589e:	2800      	cmp	r0, #0
 80058a0:	d048      	beq.n	8005934 <_dtoa_r+0x214>
 80058a2:	3f01      	subs	r7, #1
 80058a4:	2300      	movs	r3, #0
 80058a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80058a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80058aa:	1b9b      	subs	r3, r3, r6
 80058ac:	1e5a      	subs	r2, r3, #1
 80058ae:	bf44      	itt	mi
 80058b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80058b4:	2300      	movmi	r3, #0
 80058b6:	9208      	str	r2, [sp, #32]
 80058b8:	bf54      	ite	pl
 80058ba:	f04f 0800 	movpl.w	r8, #0
 80058be:	9308      	strmi	r3, [sp, #32]
 80058c0:	2f00      	cmp	r7, #0
 80058c2:	db39      	blt.n	8005938 <_dtoa_r+0x218>
 80058c4:	9b08      	ldr	r3, [sp, #32]
 80058c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80058c8:	443b      	add	r3, r7
 80058ca:	9308      	str	r3, [sp, #32]
 80058cc:	2300      	movs	r3, #0
 80058ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80058d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058d2:	2b09      	cmp	r3, #9
 80058d4:	d864      	bhi.n	80059a0 <_dtoa_r+0x280>
 80058d6:	2b05      	cmp	r3, #5
 80058d8:	bfc4      	itt	gt
 80058da:	3b04      	subgt	r3, #4
 80058dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80058de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058e0:	f1a3 0302 	sub.w	r3, r3, #2
 80058e4:	bfcc      	ite	gt
 80058e6:	2400      	movgt	r4, #0
 80058e8:	2401      	movle	r4, #1
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d863      	bhi.n	80059b6 <_dtoa_r+0x296>
 80058ee:	e8df f003 	tbb	[pc, r3]
 80058f2:	372a      	.short	0x372a
 80058f4:	5535      	.short	0x5535
 80058f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80058fa:	441e      	add	r6, r3
 80058fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005900:	2b20      	cmp	r3, #32
 8005902:	bfc1      	itttt	gt
 8005904:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005908:	409f      	lslgt	r7, r3
 800590a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800590e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005912:	bfd6      	itet	le
 8005914:	f1c3 0320 	rsble	r3, r3, #32
 8005918:	ea47 0003 	orrgt.w	r0, r7, r3
 800591c:	fa04 f003 	lslle.w	r0, r4, r3
 8005920:	f7fa fdf0 	bl	8000504 <__aeabi_ui2d>
 8005924:	2201      	movs	r2, #1
 8005926:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800592a:	3e01      	subs	r6, #1
 800592c:	9214      	str	r2, [sp, #80]	@ 0x50
 800592e:	e777      	b.n	8005820 <_dtoa_r+0x100>
 8005930:	2301      	movs	r3, #1
 8005932:	e7b8      	b.n	80058a6 <_dtoa_r+0x186>
 8005934:	9012      	str	r0, [sp, #72]	@ 0x48
 8005936:	e7b7      	b.n	80058a8 <_dtoa_r+0x188>
 8005938:	427b      	negs	r3, r7
 800593a:	930a      	str	r3, [sp, #40]	@ 0x28
 800593c:	2300      	movs	r3, #0
 800593e:	eba8 0807 	sub.w	r8, r8, r7
 8005942:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005944:	e7c4      	b.n	80058d0 <_dtoa_r+0x1b0>
 8005946:	2300      	movs	r3, #0
 8005948:	930b      	str	r3, [sp, #44]	@ 0x2c
 800594a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800594c:	2b00      	cmp	r3, #0
 800594e:	dc35      	bgt.n	80059bc <_dtoa_r+0x29c>
 8005950:	2301      	movs	r3, #1
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	9307      	str	r3, [sp, #28]
 8005956:	461a      	mov	r2, r3
 8005958:	920e      	str	r2, [sp, #56]	@ 0x38
 800595a:	e00b      	b.n	8005974 <_dtoa_r+0x254>
 800595c:	2301      	movs	r3, #1
 800595e:	e7f3      	b.n	8005948 <_dtoa_r+0x228>
 8005960:	2300      	movs	r3, #0
 8005962:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005964:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005966:	18fb      	adds	r3, r7, r3
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	3301      	adds	r3, #1
 800596c:	2b01      	cmp	r3, #1
 800596e:	9307      	str	r3, [sp, #28]
 8005970:	bfb8      	it	lt
 8005972:	2301      	movlt	r3, #1
 8005974:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005978:	2100      	movs	r1, #0
 800597a:	2204      	movs	r2, #4
 800597c:	f102 0514 	add.w	r5, r2, #20
 8005980:	429d      	cmp	r5, r3
 8005982:	d91f      	bls.n	80059c4 <_dtoa_r+0x2a4>
 8005984:	6041      	str	r1, [r0, #4]
 8005986:	4658      	mov	r0, fp
 8005988:	f000 fd8e 	bl	80064a8 <_Balloc>
 800598c:	4682      	mov	sl, r0
 800598e:	2800      	cmp	r0, #0
 8005990:	d13c      	bne.n	8005a0c <_dtoa_r+0x2ec>
 8005992:	4b1b      	ldr	r3, [pc, #108]	@ (8005a00 <_dtoa_r+0x2e0>)
 8005994:	4602      	mov	r2, r0
 8005996:	f240 11af 	movw	r1, #431	@ 0x1af
 800599a:	e6d8      	b.n	800574e <_dtoa_r+0x2e>
 800599c:	2301      	movs	r3, #1
 800599e:	e7e0      	b.n	8005962 <_dtoa_r+0x242>
 80059a0:	2401      	movs	r4, #1
 80059a2:	2300      	movs	r3, #0
 80059a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80059a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80059a8:	f04f 33ff 	mov.w	r3, #4294967295
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	9307      	str	r3, [sp, #28]
 80059b0:	2200      	movs	r2, #0
 80059b2:	2312      	movs	r3, #18
 80059b4:	e7d0      	b.n	8005958 <_dtoa_r+0x238>
 80059b6:	2301      	movs	r3, #1
 80059b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059ba:	e7f5      	b.n	80059a8 <_dtoa_r+0x288>
 80059bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	9307      	str	r3, [sp, #28]
 80059c2:	e7d7      	b.n	8005974 <_dtoa_r+0x254>
 80059c4:	3101      	adds	r1, #1
 80059c6:	0052      	lsls	r2, r2, #1
 80059c8:	e7d8      	b.n	800597c <_dtoa_r+0x25c>
 80059ca:	bf00      	nop
 80059cc:	f3af 8000 	nop.w
 80059d0:	636f4361 	.word	0x636f4361
 80059d4:	3fd287a7 	.word	0x3fd287a7
 80059d8:	8b60c8b3 	.word	0x8b60c8b3
 80059dc:	3fc68a28 	.word	0x3fc68a28
 80059e0:	509f79fb 	.word	0x509f79fb
 80059e4:	3fd34413 	.word	0x3fd34413
 80059e8:	08007771 	.word	0x08007771
 80059ec:	08007788 	.word	0x08007788
 80059f0:	7ff00000 	.word	0x7ff00000
 80059f4:	08007741 	.word	0x08007741
 80059f8:	3ff80000 	.word	0x3ff80000
 80059fc:	08007880 	.word	0x08007880
 8005a00:	080077e0 	.word	0x080077e0
 8005a04:	0800776d 	.word	0x0800776d
 8005a08:	08007740 	.word	0x08007740
 8005a0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005a10:	6018      	str	r0, [r3, #0]
 8005a12:	9b07      	ldr	r3, [sp, #28]
 8005a14:	2b0e      	cmp	r3, #14
 8005a16:	f200 80a4 	bhi.w	8005b62 <_dtoa_r+0x442>
 8005a1a:	2c00      	cmp	r4, #0
 8005a1c:	f000 80a1 	beq.w	8005b62 <_dtoa_r+0x442>
 8005a20:	2f00      	cmp	r7, #0
 8005a22:	dd33      	ble.n	8005a8c <_dtoa_r+0x36c>
 8005a24:	4bad      	ldr	r3, [pc, #692]	@ (8005cdc <_dtoa_r+0x5bc>)
 8005a26:	f007 020f 	and.w	r2, r7, #15
 8005a2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a2e:	ed93 7b00 	vldr	d7, [r3]
 8005a32:	05f8      	lsls	r0, r7, #23
 8005a34:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005a38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005a3c:	d516      	bpl.n	8005a6c <_dtoa_r+0x34c>
 8005a3e:	4ba8      	ldr	r3, [pc, #672]	@ (8005ce0 <_dtoa_r+0x5c0>)
 8005a40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a48:	f7fa ff00 	bl	800084c <__aeabi_ddiv>
 8005a4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a50:	f004 040f 	and.w	r4, r4, #15
 8005a54:	2603      	movs	r6, #3
 8005a56:	4da2      	ldr	r5, [pc, #648]	@ (8005ce0 <_dtoa_r+0x5c0>)
 8005a58:	b954      	cbnz	r4, 8005a70 <_dtoa_r+0x350>
 8005a5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a62:	f7fa fef3 	bl	800084c <__aeabi_ddiv>
 8005a66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a6a:	e028      	b.n	8005abe <_dtoa_r+0x39e>
 8005a6c:	2602      	movs	r6, #2
 8005a6e:	e7f2      	b.n	8005a56 <_dtoa_r+0x336>
 8005a70:	07e1      	lsls	r1, r4, #31
 8005a72:	d508      	bpl.n	8005a86 <_dtoa_r+0x366>
 8005a74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a7c:	f7fa fdbc 	bl	80005f8 <__aeabi_dmul>
 8005a80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a84:	3601      	adds	r6, #1
 8005a86:	1064      	asrs	r4, r4, #1
 8005a88:	3508      	adds	r5, #8
 8005a8a:	e7e5      	b.n	8005a58 <_dtoa_r+0x338>
 8005a8c:	f000 80d2 	beq.w	8005c34 <_dtoa_r+0x514>
 8005a90:	427c      	negs	r4, r7
 8005a92:	4b92      	ldr	r3, [pc, #584]	@ (8005cdc <_dtoa_r+0x5bc>)
 8005a94:	4d92      	ldr	r5, [pc, #584]	@ (8005ce0 <_dtoa_r+0x5c0>)
 8005a96:	f004 020f 	and.w	r2, r4, #15
 8005a9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005aa6:	f7fa fda7 	bl	80005f8 <__aeabi_dmul>
 8005aaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005aae:	1124      	asrs	r4, r4, #4
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	2602      	movs	r6, #2
 8005ab4:	2c00      	cmp	r4, #0
 8005ab6:	f040 80b2 	bne.w	8005c1e <_dtoa_r+0x4fe>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1d3      	bne.n	8005a66 <_dtoa_r+0x346>
 8005abe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005ac0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 80b7 	beq.w	8005c38 <_dtoa_r+0x518>
 8005aca:	4b86      	ldr	r3, [pc, #536]	@ (8005ce4 <_dtoa_r+0x5c4>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	4620      	mov	r0, r4
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	f7fb f803 	bl	8000adc <__aeabi_dcmplt>
 8005ad6:	2800      	cmp	r0, #0
 8005ad8:	f000 80ae 	beq.w	8005c38 <_dtoa_r+0x518>
 8005adc:	9b07      	ldr	r3, [sp, #28]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 80aa 	beq.w	8005c38 <_dtoa_r+0x518>
 8005ae4:	9b00      	ldr	r3, [sp, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	dd37      	ble.n	8005b5a <_dtoa_r+0x43a>
 8005aea:	1e7b      	subs	r3, r7, #1
 8005aec:	9304      	str	r3, [sp, #16]
 8005aee:	4620      	mov	r0, r4
 8005af0:	4b7d      	ldr	r3, [pc, #500]	@ (8005ce8 <_dtoa_r+0x5c8>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	4629      	mov	r1, r5
 8005af6:	f7fa fd7f 	bl	80005f8 <__aeabi_dmul>
 8005afa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005afe:	9c00      	ldr	r4, [sp, #0]
 8005b00:	3601      	adds	r6, #1
 8005b02:	4630      	mov	r0, r6
 8005b04:	f7fa fd0e 	bl	8000524 <__aeabi_i2d>
 8005b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b0c:	f7fa fd74 	bl	80005f8 <__aeabi_dmul>
 8005b10:	4b76      	ldr	r3, [pc, #472]	@ (8005cec <_dtoa_r+0x5cc>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	f7fa fbba 	bl	800028c <__adddf3>
 8005b18:	4605      	mov	r5, r0
 8005b1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005b1e:	2c00      	cmp	r4, #0
 8005b20:	f040 808d 	bne.w	8005c3e <_dtoa_r+0x51e>
 8005b24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b28:	4b71      	ldr	r3, [pc, #452]	@ (8005cf0 <_dtoa_r+0x5d0>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f7fa fbac 	bl	8000288 <__aeabi_dsub>
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b38:	462a      	mov	r2, r5
 8005b3a:	4633      	mov	r3, r6
 8005b3c:	f7fa ffec 	bl	8000b18 <__aeabi_dcmpgt>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	f040 828b 	bne.w	800605c <_dtoa_r+0x93c>
 8005b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b4a:	462a      	mov	r2, r5
 8005b4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005b50:	f7fa ffc4 	bl	8000adc <__aeabi_dcmplt>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	f040 8128 	bne.w	8005daa <_dtoa_r+0x68a>
 8005b5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005b5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005b62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f2c0 815a 	blt.w	8005e1e <_dtoa_r+0x6fe>
 8005b6a:	2f0e      	cmp	r7, #14
 8005b6c:	f300 8157 	bgt.w	8005e1e <_dtoa_r+0x6fe>
 8005b70:	4b5a      	ldr	r3, [pc, #360]	@ (8005cdc <_dtoa_r+0x5bc>)
 8005b72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b76:	ed93 7b00 	vldr	d7, [r3]
 8005b7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	ed8d 7b00 	vstr	d7, [sp]
 8005b82:	da03      	bge.n	8005b8c <_dtoa_r+0x46c>
 8005b84:	9b07      	ldr	r3, [sp, #28]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f340 8101 	ble.w	8005d8e <_dtoa_r+0x66e>
 8005b8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005b90:	4656      	mov	r6, sl
 8005b92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b96:	4620      	mov	r0, r4
 8005b98:	4629      	mov	r1, r5
 8005b9a:	f7fa fe57 	bl	800084c <__aeabi_ddiv>
 8005b9e:	f7fa ffdb 	bl	8000b58 <__aeabi_d2iz>
 8005ba2:	4680      	mov	r8, r0
 8005ba4:	f7fa fcbe 	bl	8000524 <__aeabi_i2d>
 8005ba8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bac:	f7fa fd24 	bl	80005f8 <__aeabi_dmul>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005bbc:	f7fa fb64 	bl	8000288 <__aeabi_dsub>
 8005bc0:	f806 4b01 	strb.w	r4, [r6], #1
 8005bc4:	9d07      	ldr	r5, [sp, #28]
 8005bc6:	eba6 040a 	sub.w	r4, r6, sl
 8005bca:	42a5      	cmp	r5, r4
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	f040 8117 	bne.w	8005e02 <_dtoa_r+0x6e2>
 8005bd4:	f7fa fb5a 	bl	800028c <__adddf3>
 8005bd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bdc:	4604      	mov	r4, r0
 8005bde:	460d      	mov	r5, r1
 8005be0:	f7fa ff9a 	bl	8000b18 <__aeabi_dcmpgt>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	f040 80f9 	bne.w	8005ddc <_dtoa_r+0x6bc>
 8005bea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bee:	4620      	mov	r0, r4
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	f7fa ff69 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bf6:	b118      	cbz	r0, 8005c00 <_dtoa_r+0x4e0>
 8005bf8:	f018 0f01 	tst.w	r8, #1
 8005bfc:	f040 80ee 	bne.w	8005ddc <_dtoa_r+0x6bc>
 8005c00:	4649      	mov	r1, r9
 8005c02:	4658      	mov	r0, fp
 8005c04:	f000 fc90 	bl	8006528 <_Bfree>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	7033      	strb	r3, [r6, #0]
 8005c0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005c0e:	3701      	adds	r7, #1
 8005c10:	601f      	str	r7, [r3, #0]
 8005c12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 831d 	beq.w	8006254 <_dtoa_r+0xb34>
 8005c1a:	601e      	str	r6, [r3, #0]
 8005c1c:	e31a      	b.n	8006254 <_dtoa_r+0xb34>
 8005c1e:	07e2      	lsls	r2, r4, #31
 8005c20:	d505      	bpl.n	8005c2e <_dtoa_r+0x50e>
 8005c22:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c26:	f7fa fce7 	bl	80005f8 <__aeabi_dmul>
 8005c2a:	3601      	adds	r6, #1
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	1064      	asrs	r4, r4, #1
 8005c30:	3508      	adds	r5, #8
 8005c32:	e73f      	b.n	8005ab4 <_dtoa_r+0x394>
 8005c34:	2602      	movs	r6, #2
 8005c36:	e742      	b.n	8005abe <_dtoa_r+0x39e>
 8005c38:	9c07      	ldr	r4, [sp, #28]
 8005c3a:	9704      	str	r7, [sp, #16]
 8005c3c:	e761      	b.n	8005b02 <_dtoa_r+0x3e2>
 8005c3e:	4b27      	ldr	r3, [pc, #156]	@ (8005cdc <_dtoa_r+0x5bc>)
 8005c40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c4a:	4454      	add	r4, sl
 8005c4c:	2900      	cmp	r1, #0
 8005c4e:	d053      	beq.n	8005cf8 <_dtoa_r+0x5d8>
 8005c50:	4928      	ldr	r1, [pc, #160]	@ (8005cf4 <_dtoa_r+0x5d4>)
 8005c52:	2000      	movs	r0, #0
 8005c54:	f7fa fdfa 	bl	800084c <__aeabi_ddiv>
 8005c58:	4633      	mov	r3, r6
 8005c5a:	462a      	mov	r2, r5
 8005c5c:	f7fa fb14 	bl	8000288 <__aeabi_dsub>
 8005c60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c64:	4656      	mov	r6, sl
 8005c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c6a:	f7fa ff75 	bl	8000b58 <__aeabi_d2iz>
 8005c6e:	4605      	mov	r5, r0
 8005c70:	f7fa fc58 	bl	8000524 <__aeabi_i2d>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c7c:	f7fa fb04 	bl	8000288 <__aeabi_dsub>
 8005c80:	3530      	adds	r5, #48	@ 0x30
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c8a:	f806 5b01 	strb.w	r5, [r6], #1
 8005c8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c92:	f7fa ff23 	bl	8000adc <__aeabi_dcmplt>
 8005c96:	2800      	cmp	r0, #0
 8005c98:	d171      	bne.n	8005d7e <_dtoa_r+0x65e>
 8005c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c9e:	4911      	ldr	r1, [pc, #68]	@ (8005ce4 <_dtoa_r+0x5c4>)
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	f7fa faf1 	bl	8000288 <__aeabi_dsub>
 8005ca6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005caa:	f7fa ff17 	bl	8000adc <__aeabi_dcmplt>
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	f040 8095 	bne.w	8005dde <_dtoa_r+0x6be>
 8005cb4:	42a6      	cmp	r6, r4
 8005cb6:	f43f af50 	beq.w	8005b5a <_dtoa_r+0x43a>
 8005cba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce8 <_dtoa_r+0x5c8>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f7fa fc99 	bl	80005f8 <__aeabi_dmul>
 8005cc6:	4b08      	ldr	r3, [pc, #32]	@ (8005ce8 <_dtoa_r+0x5c8>)
 8005cc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005ccc:	2200      	movs	r2, #0
 8005cce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cd2:	f7fa fc91 	bl	80005f8 <__aeabi_dmul>
 8005cd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cda:	e7c4      	b.n	8005c66 <_dtoa_r+0x546>
 8005cdc:	08007880 	.word	0x08007880
 8005ce0:	08007858 	.word	0x08007858
 8005ce4:	3ff00000 	.word	0x3ff00000
 8005ce8:	40240000 	.word	0x40240000
 8005cec:	401c0000 	.word	0x401c0000
 8005cf0:	40140000 	.word	0x40140000
 8005cf4:	3fe00000 	.word	0x3fe00000
 8005cf8:	4631      	mov	r1, r6
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	f7fa fc7c 	bl	80005f8 <__aeabi_dmul>
 8005d00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d04:	9415      	str	r4, [sp, #84]	@ 0x54
 8005d06:	4656      	mov	r6, sl
 8005d08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d0c:	f7fa ff24 	bl	8000b58 <__aeabi_d2iz>
 8005d10:	4605      	mov	r5, r0
 8005d12:	f7fa fc07 	bl	8000524 <__aeabi_i2d>
 8005d16:	4602      	mov	r2, r0
 8005d18:	460b      	mov	r3, r1
 8005d1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d1e:	f7fa fab3 	bl	8000288 <__aeabi_dsub>
 8005d22:	3530      	adds	r5, #48	@ 0x30
 8005d24:	f806 5b01 	strb.w	r5, [r6], #1
 8005d28:	4602      	mov	r2, r0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	42a6      	cmp	r6, r4
 8005d2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	d124      	bne.n	8005d82 <_dtoa_r+0x662>
 8005d38:	4bac      	ldr	r3, [pc, #688]	@ (8005fec <_dtoa_r+0x8cc>)
 8005d3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005d3e:	f7fa faa5 	bl	800028c <__adddf3>
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d4a:	f7fa fee5 	bl	8000b18 <__aeabi_dcmpgt>
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	d145      	bne.n	8005dde <_dtoa_r+0x6be>
 8005d52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d56:	49a5      	ldr	r1, [pc, #660]	@ (8005fec <_dtoa_r+0x8cc>)
 8005d58:	2000      	movs	r0, #0
 8005d5a:	f7fa fa95 	bl	8000288 <__aeabi_dsub>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	460b      	mov	r3, r1
 8005d62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d66:	f7fa feb9 	bl	8000adc <__aeabi_dcmplt>
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	f43f aef5 	beq.w	8005b5a <_dtoa_r+0x43a>
 8005d70:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005d72:	1e73      	subs	r3, r6, #1
 8005d74:	9315      	str	r3, [sp, #84]	@ 0x54
 8005d76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005d7a:	2b30      	cmp	r3, #48	@ 0x30
 8005d7c:	d0f8      	beq.n	8005d70 <_dtoa_r+0x650>
 8005d7e:	9f04      	ldr	r7, [sp, #16]
 8005d80:	e73e      	b.n	8005c00 <_dtoa_r+0x4e0>
 8005d82:	4b9b      	ldr	r3, [pc, #620]	@ (8005ff0 <_dtoa_r+0x8d0>)
 8005d84:	f7fa fc38 	bl	80005f8 <__aeabi_dmul>
 8005d88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d8c:	e7bc      	b.n	8005d08 <_dtoa_r+0x5e8>
 8005d8e:	d10c      	bne.n	8005daa <_dtoa_r+0x68a>
 8005d90:	4b98      	ldr	r3, [pc, #608]	@ (8005ff4 <_dtoa_r+0x8d4>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d98:	f7fa fc2e 	bl	80005f8 <__aeabi_dmul>
 8005d9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005da0:	f7fa feb0 	bl	8000b04 <__aeabi_dcmpge>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	f000 8157 	beq.w	8006058 <_dtoa_r+0x938>
 8005daa:	2400      	movs	r4, #0
 8005dac:	4625      	mov	r5, r4
 8005dae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005db0:	43db      	mvns	r3, r3
 8005db2:	9304      	str	r3, [sp, #16]
 8005db4:	4656      	mov	r6, sl
 8005db6:	2700      	movs	r7, #0
 8005db8:	4621      	mov	r1, r4
 8005dba:	4658      	mov	r0, fp
 8005dbc:	f000 fbb4 	bl	8006528 <_Bfree>
 8005dc0:	2d00      	cmp	r5, #0
 8005dc2:	d0dc      	beq.n	8005d7e <_dtoa_r+0x65e>
 8005dc4:	b12f      	cbz	r7, 8005dd2 <_dtoa_r+0x6b2>
 8005dc6:	42af      	cmp	r7, r5
 8005dc8:	d003      	beq.n	8005dd2 <_dtoa_r+0x6b2>
 8005dca:	4639      	mov	r1, r7
 8005dcc:	4658      	mov	r0, fp
 8005dce:	f000 fbab 	bl	8006528 <_Bfree>
 8005dd2:	4629      	mov	r1, r5
 8005dd4:	4658      	mov	r0, fp
 8005dd6:	f000 fba7 	bl	8006528 <_Bfree>
 8005dda:	e7d0      	b.n	8005d7e <_dtoa_r+0x65e>
 8005ddc:	9704      	str	r7, [sp, #16]
 8005dde:	4633      	mov	r3, r6
 8005de0:	461e      	mov	r6, r3
 8005de2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005de6:	2a39      	cmp	r2, #57	@ 0x39
 8005de8:	d107      	bne.n	8005dfa <_dtoa_r+0x6da>
 8005dea:	459a      	cmp	sl, r3
 8005dec:	d1f8      	bne.n	8005de0 <_dtoa_r+0x6c0>
 8005dee:	9a04      	ldr	r2, [sp, #16]
 8005df0:	3201      	adds	r2, #1
 8005df2:	9204      	str	r2, [sp, #16]
 8005df4:	2230      	movs	r2, #48	@ 0x30
 8005df6:	f88a 2000 	strb.w	r2, [sl]
 8005dfa:	781a      	ldrb	r2, [r3, #0]
 8005dfc:	3201      	adds	r2, #1
 8005dfe:	701a      	strb	r2, [r3, #0]
 8005e00:	e7bd      	b.n	8005d7e <_dtoa_r+0x65e>
 8005e02:	4b7b      	ldr	r3, [pc, #492]	@ (8005ff0 <_dtoa_r+0x8d0>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	f7fa fbf7 	bl	80005f8 <__aeabi_dmul>
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	4604      	mov	r4, r0
 8005e10:	460d      	mov	r5, r1
 8005e12:	f7fa fe59 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e16:	2800      	cmp	r0, #0
 8005e18:	f43f aebb 	beq.w	8005b92 <_dtoa_r+0x472>
 8005e1c:	e6f0      	b.n	8005c00 <_dtoa_r+0x4e0>
 8005e1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005e20:	2a00      	cmp	r2, #0
 8005e22:	f000 80db 	beq.w	8005fdc <_dtoa_r+0x8bc>
 8005e26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e28:	2a01      	cmp	r2, #1
 8005e2a:	f300 80bf 	bgt.w	8005fac <_dtoa_r+0x88c>
 8005e2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005e30:	2a00      	cmp	r2, #0
 8005e32:	f000 80b7 	beq.w	8005fa4 <_dtoa_r+0x884>
 8005e36:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005e3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005e3c:	4646      	mov	r6, r8
 8005e3e:	9a08      	ldr	r2, [sp, #32]
 8005e40:	2101      	movs	r1, #1
 8005e42:	441a      	add	r2, r3
 8005e44:	4658      	mov	r0, fp
 8005e46:	4498      	add	r8, r3
 8005e48:	9208      	str	r2, [sp, #32]
 8005e4a:	f000 fc21 	bl	8006690 <__i2b>
 8005e4e:	4605      	mov	r5, r0
 8005e50:	b15e      	cbz	r6, 8005e6a <_dtoa_r+0x74a>
 8005e52:	9b08      	ldr	r3, [sp, #32]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	dd08      	ble.n	8005e6a <_dtoa_r+0x74a>
 8005e58:	42b3      	cmp	r3, r6
 8005e5a:	9a08      	ldr	r2, [sp, #32]
 8005e5c:	bfa8      	it	ge
 8005e5e:	4633      	movge	r3, r6
 8005e60:	eba8 0803 	sub.w	r8, r8, r3
 8005e64:	1af6      	subs	r6, r6, r3
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	9308      	str	r3, [sp, #32]
 8005e6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e6c:	b1f3      	cbz	r3, 8005eac <_dtoa_r+0x78c>
 8005e6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 80b7 	beq.w	8005fe4 <_dtoa_r+0x8c4>
 8005e76:	b18c      	cbz	r4, 8005e9c <_dtoa_r+0x77c>
 8005e78:	4629      	mov	r1, r5
 8005e7a:	4622      	mov	r2, r4
 8005e7c:	4658      	mov	r0, fp
 8005e7e:	f000 fcc7 	bl	8006810 <__pow5mult>
 8005e82:	464a      	mov	r2, r9
 8005e84:	4601      	mov	r1, r0
 8005e86:	4605      	mov	r5, r0
 8005e88:	4658      	mov	r0, fp
 8005e8a:	f000 fc17 	bl	80066bc <__multiply>
 8005e8e:	4649      	mov	r1, r9
 8005e90:	9004      	str	r0, [sp, #16]
 8005e92:	4658      	mov	r0, fp
 8005e94:	f000 fb48 	bl	8006528 <_Bfree>
 8005e98:	9b04      	ldr	r3, [sp, #16]
 8005e9a:	4699      	mov	r9, r3
 8005e9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e9e:	1b1a      	subs	r2, r3, r4
 8005ea0:	d004      	beq.n	8005eac <_dtoa_r+0x78c>
 8005ea2:	4649      	mov	r1, r9
 8005ea4:	4658      	mov	r0, fp
 8005ea6:	f000 fcb3 	bl	8006810 <__pow5mult>
 8005eaa:	4681      	mov	r9, r0
 8005eac:	2101      	movs	r1, #1
 8005eae:	4658      	mov	r0, fp
 8005eb0:	f000 fbee 	bl	8006690 <__i2b>
 8005eb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 81cf 	beq.w	800625c <_dtoa_r+0xb3c>
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	4601      	mov	r1, r0
 8005ec2:	4658      	mov	r0, fp
 8005ec4:	f000 fca4 	bl	8006810 <__pow5mult>
 8005ec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	4604      	mov	r4, r0
 8005ece:	f300 8095 	bgt.w	8005ffc <_dtoa_r+0x8dc>
 8005ed2:	9b02      	ldr	r3, [sp, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f040 8087 	bne.w	8005fe8 <_dtoa_r+0x8c8>
 8005eda:	9b03      	ldr	r3, [sp, #12]
 8005edc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f040 8089 	bne.w	8005ff8 <_dtoa_r+0x8d8>
 8005ee6:	9b03      	ldr	r3, [sp, #12]
 8005ee8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005eec:	0d1b      	lsrs	r3, r3, #20
 8005eee:	051b      	lsls	r3, r3, #20
 8005ef0:	b12b      	cbz	r3, 8005efe <_dtoa_r+0x7de>
 8005ef2:	9b08      	ldr	r3, [sp, #32]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	9308      	str	r3, [sp, #32]
 8005ef8:	f108 0801 	add.w	r8, r8, #1
 8005efc:	2301      	movs	r3, #1
 8005efe:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 81b0 	beq.w	8006268 <_dtoa_r+0xb48>
 8005f08:	6923      	ldr	r3, [r4, #16]
 8005f0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f0e:	6918      	ldr	r0, [r3, #16]
 8005f10:	f000 fb72 	bl	80065f8 <__hi0bits>
 8005f14:	f1c0 0020 	rsb	r0, r0, #32
 8005f18:	9b08      	ldr	r3, [sp, #32]
 8005f1a:	4418      	add	r0, r3
 8005f1c:	f010 001f 	ands.w	r0, r0, #31
 8005f20:	d077      	beq.n	8006012 <_dtoa_r+0x8f2>
 8005f22:	f1c0 0320 	rsb	r3, r0, #32
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	dd6b      	ble.n	8006002 <_dtoa_r+0x8e2>
 8005f2a:	9b08      	ldr	r3, [sp, #32]
 8005f2c:	f1c0 001c 	rsb	r0, r0, #28
 8005f30:	4403      	add	r3, r0
 8005f32:	4480      	add	r8, r0
 8005f34:	4406      	add	r6, r0
 8005f36:	9308      	str	r3, [sp, #32]
 8005f38:	f1b8 0f00 	cmp.w	r8, #0
 8005f3c:	dd05      	ble.n	8005f4a <_dtoa_r+0x82a>
 8005f3e:	4649      	mov	r1, r9
 8005f40:	4642      	mov	r2, r8
 8005f42:	4658      	mov	r0, fp
 8005f44:	f000 fcbe 	bl	80068c4 <__lshift>
 8005f48:	4681      	mov	r9, r0
 8005f4a:	9b08      	ldr	r3, [sp, #32]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	dd05      	ble.n	8005f5c <_dtoa_r+0x83c>
 8005f50:	4621      	mov	r1, r4
 8005f52:	461a      	mov	r2, r3
 8005f54:	4658      	mov	r0, fp
 8005f56:	f000 fcb5 	bl	80068c4 <__lshift>
 8005f5a:	4604      	mov	r4, r0
 8005f5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d059      	beq.n	8006016 <_dtoa_r+0x8f6>
 8005f62:	4621      	mov	r1, r4
 8005f64:	4648      	mov	r0, r9
 8005f66:	f000 fd19 	bl	800699c <__mcmp>
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	da53      	bge.n	8006016 <_dtoa_r+0x8f6>
 8005f6e:	1e7b      	subs	r3, r7, #1
 8005f70:	9304      	str	r3, [sp, #16]
 8005f72:	4649      	mov	r1, r9
 8005f74:	2300      	movs	r3, #0
 8005f76:	220a      	movs	r2, #10
 8005f78:	4658      	mov	r0, fp
 8005f7a:	f000 faf7 	bl	800656c <__multadd>
 8005f7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f80:	4681      	mov	r9, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 8172 	beq.w	800626c <_dtoa_r+0xb4c>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	4629      	mov	r1, r5
 8005f8c:	220a      	movs	r2, #10
 8005f8e:	4658      	mov	r0, fp
 8005f90:	f000 faec 	bl	800656c <__multadd>
 8005f94:	9b00      	ldr	r3, [sp, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	4605      	mov	r5, r0
 8005f9a:	dc67      	bgt.n	800606c <_dtoa_r+0x94c>
 8005f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	dc41      	bgt.n	8006026 <_dtoa_r+0x906>
 8005fa2:	e063      	b.n	800606c <_dtoa_r+0x94c>
 8005fa4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005fa6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005faa:	e746      	b.n	8005e3a <_dtoa_r+0x71a>
 8005fac:	9b07      	ldr	r3, [sp, #28]
 8005fae:	1e5c      	subs	r4, r3, #1
 8005fb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fb2:	42a3      	cmp	r3, r4
 8005fb4:	bfbf      	itttt	lt
 8005fb6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005fb8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005fba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005fbc:	1ae3      	sublt	r3, r4, r3
 8005fbe:	bfb4      	ite	lt
 8005fc0:	18d2      	addlt	r2, r2, r3
 8005fc2:	1b1c      	subge	r4, r3, r4
 8005fc4:	9b07      	ldr	r3, [sp, #28]
 8005fc6:	bfbc      	itt	lt
 8005fc8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005fca:	2400      	movlt	r4, #0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	bfb5      	itete	lt
 8005fd0:	eba8 0603 	sublt.w	r6, r8, r3
 8005fd4:	9b07      	ldrge	r3, [sp, #28]
 8005fd6:	2300      	movlt	r3, #0
 8005fd8:	4646      	movge	r6, r8
 8005fda:	e730      	b.n	8005e3e <_dtoa_r+0x71e>
 8005fdc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005fde:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005fe0:	4646      	mov	r6, r8
 8005fe2:	e735      	b.n	8005e50 <_dtoa_r+0x730>
 8005fe4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fe6:	e75c      	b.n	8005ea2 <_dtoa_r+0x782>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	e788      	b.n	8005efe <_dtoa_r+0x7de>
 8005fec:	3fe00000 	.word	0x3fe00000
 8005ff0:	40240000 	.word	0x40240000
 8005ff4:	40140000 	.word	0x40140000
 8005ff8:	9b02      	ldr	r3, [sp, #8]
 8005ffa:	e780      	b.n	8005efe <_dtoa_r+0x7de>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006000:	e782      	b.n	8005f08 <_dtoa_r+0x7e8>
 8006002:	d099      	beq.n	8005f38 <_dtoa_r+0x818>
 8006004:	9a08      	ldr	r2, [sp, #32]
 8006006:	331c      	adds	r3, #28
 8006008:	441a      	add	r2, r3
 800600a:	4498      	add	r8, r3
 800600c:	441e      	add	r6, r3
 800600e:	9208      	str	r2, [sp, #32]
 8006010:	e792      	b.n	8005f38 <_dtoa_r+0x818>
 8006012:	4603      	mov	r3, r0
 8006014:	e7f6      	b.n	8006004 <_dtoa_r+0x8e4>
 8006016:	9b07      	ldr	r3, [sp, #28]
 8006018:	9704      	str	r7, [sp, #16]
 800601a:	2b00      	cmp	r3, #0
 800601c:	dc20      	bgt.n	8006060 <_dtoa_r+0x940>
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006022:	2b02      	cmp	r3, #2
 8006024:	dd1e      	ble.n	8006064 <_dtoa_r+0x944>
 8006026:	9b00      	ldr	r3, [sp, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	f47f aec0 	bne.w	8005dae <_dtoa_r+0x68e>
 800602e:	4621      	mov	r1, r4
 8006030:	2205      	movs	r2, #5
 8006032:	4658      	mov	r0, fp
 8006034:	f000 fa9a 	bl	800656c <__multadd>
 8006038:	4601      	mov	r1, r0
 800603a:	4604      	mov	r4, r0
 800603c:	4648      	mov	r0, r9
 800603e:	f000 fcad 	bl	800699c <__mcmp>
 8006042:	2800      	cmp	r0, #0
 8006044:	f77f aeb3 	ble.w	8005dae <_dtoa_r+0x68e>
 8006048:	4656      	mov	r6, sl
 800604a:	2331      	movs	r3, #49	@ 0x31
 800604c:	f806 3b01 	strb.w	r3, [r6], #1
 8006050:	9b04      	ldr	r3, [sp, #16]
 8006052:	3301      	adds	r3, #1
 8006054:	9304      	str	r3, [sp, #16]
 8006056:	e6ae      	b.n	8005db6 <_dtoa_r+0x696>
 8006058:	9c07      	ldr	r4, [sp, #28]
 800605a:	9704      	str	r7, [sp, #16]
 800605c:	4625      	mov	r5, r4
 800605e:	e7f3      	b.n	8006048 <_dtoa_r+0x928>
 8006060:	9b07      	ldr	r3, [sp, #28]
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 8104 	beq.w	8006274 <_dtoa_r+0xb54>
 800606c:	2e00      	cmp	r6, #0
 800606e:	dd05      	ble.n	800607c <_dtoa_r+0x95c>
 8006070:	4629      	mov	r1, r5
 8006072:	4632      	mov	r2, r6
 8006074:	4658      	mov	r0, fp
 8006076:	f000 fc25 	bl	80068c4 <__lshift>
 800607a:	4605      	mov	r5, r0
 800607c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800607e:	2b00      	cmp	r3, #0
 8006080:	d05a      	beq.n	8006138 <_dtoa_r+0xa18>
 8006082:	6869      	ldr	r1, [r5, #4]
 8006084:	4658      	mov	r0, fp
 8006086:	f000 fa0f 	bl	80064a8 <_Balloc>
 800608a:	4606      	mov	r6, r0
 800608c:	b928      	cbnz	r0, 800609a <_dtoa_r+0x97a>
 800608e:	4b84      	ldr	r3, [pc, #528]	@ (80062a0 <_dtoa_r+0xb80>)
 8006090:	4602      	mov	r2, r0
 8006092:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006096:	f7ff bb5a 	b.w	800574e <_dtoa_r+0x2e>
 800609a:	692a      	ldr	r2, [r5, #16]
 800609c:	3202      	adds	r2, #2
 800609e:	0092      	lsls	r2, r2, #2
 80060a0:	f105 010c 	add.w	r1, r5, #12
 80060a4:	300c      	adds	r0, #12
 80060a6:	f000 ffaf 	bl	8007008 <memcpy>
 80060aa:	2201      	movs	r2, #1
 80060ac:	4631      	mov	r1, r6
 80060ae:	4658      	mov	r0, fp
 80060b0:	f000 fc08 	bl	80068c4 <__lshift>
 80060b4:	f10a 0301 	add.w	r3, sl, #1
 80060b8:	9307      	str	r3, [sp, #28]
 80060ba:	9b00      	ldr	r3, [sp, #0]
 80060bc:	4453      	add	r3, sl
 80060be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060c0:	9b02      	ldr	r3, [sp, #8]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	462f      	mov	r7, r5
 80060c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80060ca:	4605      	mov	r5, r0
 80060cc:	9b07      	ldr	r3, [sp, #28]
 80060ce:	4621      	mov	r1, r4
 80060d0:	3b01      	subs	r3, #1
 80060d2:	4648      	mov	r0, r9
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	f7ff fa9a 	bl	800560e <quorem>
 80060da:	4639      	mov	r1, r7
 80060dc:	9002      	str	r0, [sp, #8]
 80060de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80060e2:	4648      	mov	r0, r9
 80060e4:	f000 fc5a 	bl	800699c <__mcmp>
 80060e8:	462a      	mov	r2, r5
 80060ea:	9008      	str	r0, [sp, #32]
 80060ec:	4621      	mov	r1, r4
 80060ee:	4658      	mov	r0, fp
 80060f0:	f000 fc70 	bl	80069d4 <__mdiff>
 80060f4:	68c2      	ldr	r2, [r0, #12]
 80060f6:	4606      	mov	r6, r0
 80060f8:	bb02      	cbnz	r2, 800613c <_dtoa_r+0xa1c>
 80060fa:	4601      	mov	r1, r0
 80060fc:	4648      	mov	r0, r9
 80060fe:	f000 fc4d 	bl	800699c <__mcmp>
 8006102:	4602      	mov	r2, r0
 8006104:	4631      	mov	r1, r6
 8006106:	4658      	mov	r0, fp
 8006108:	920e      	str	r2, [sp, #56]	@ 0x38
 800610a:	f000 fa0d 	bl	8006528 <_Bfree>
 800610e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006110:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006112:	9e07      	ldr	r6, [sp, #28]
 8006114:	ea43 0102 	orr.w	r1, r3, r2
 8006118:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800611a:	4319      	orrs	r1, r3
 800611c:	d110      	bne.n	8006140 <_dtoa_r+0xa20>
 800611e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006122:	d029      	beq.n	8006178 <_dtoa_r+0xa58>
 8006124:	9b08      	ldr	r3, [sp, #32]
 8006126:	2b00      	cmp	r3, #0
 8006128:	dd02      	ble.n	8006130 <_dtoa_r+0xa10>
 800612a:	9b02      	ldr	r3, [sp, #8]
 800612c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006130:	9b00      	ldr	r3, [sp, #0]
 8006132:	f883 8000 	strb.w	r8, [r3]
 8006136:	e63f      	b.n	8005db8 <_dtoa_r+0x698>
 8006138:	4628      	mov	r0, r5
 800613a:	e7bb      	b.n	80060b4 <_dtoa_r+0x994>
 800613c:	2201      	movs	r2, #1
 800613e:	e7e1      	b.n	8006104 <_dtoa_r+0x9e4>
 8006140:	9b08      	ldr	r3, [sp, #32]
 8006142:	2b00      	cmp	r3, #0
 8006144:	db04      	blt.n	8006150 <_dtoa_r+0xa30>
 8006146:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006148:	430b      	orrs	r3, r1
 800614a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800614c:	430b      	orrs	r3, r1
 800614e:	d120      	bne.n	8006192 <_dtoa_r+0xa72>
 8006150:	2a00      	cmp	r2, #0
 8006152:	dded      	ble.n	8006130 <_dtoa_r+0xa10>
 8006154:	4649      	mov	r1, r9
 8006156:	2201      	movs	r2, #1
 8006158:	4658      	mov	r0, fp
 800615a:	f000 fbb3 	bl	80068c4 <__lshift>
 800615e:	4621      	mov	r1, r4
 8006160:	4681      	mov	r9, r0
 8006162:	f000 fc1b 	bl	800699c <__mcmp>
 8006166:	2800      	cmp	r0, #0
 8006168:	dc03      	bgt.n	8006172 <_dtoa_r+0xa52>
 800616a:	d1e1      	bne.n	8006130 <_dtoa_r+0xa10>
 800616c:	f018 0f01 	tst.w	r8, #1
 8006170:	d0de      	beq.n	8006130 <_dtoa_r+0xa10>
 8006172:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006176:	d1d8      	bne.n	800612a <_dtoa_r+0xa0a>
 8006178:	9a00      	ldr	r2, [sp, #0]
 800617a:	2339      	movs	r3, #57	@ 0x39
 800617c:	7013      	strb	r3, [r2, #0]
 800617e:	4633      	mov	r3, r6
 8006180:	461e      	mov	r6, r3
 8006182:	3b01      	subs	r3, #1
 8006184:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006188:	2a39      	cmp	r2, #57	@ 0x39
 800618a:	d052      	beq.n	8006232 <_dtoa_r+0xb12>
 800618c:	3201      	adds	r2, #1
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	e612      	b.n	8005db8 <_dtoa_r+0x698>
 8006192:	2a00      	cmp	r2, #0
 8006194:	dd07      	ble.n	80061a6 <_dtoa_r+0xa86>
 8006196:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800619a:	d0ed      	beq.n	8006178 <_dtoa_r+0xa58>
 800619c:	9a00      	ldr	r2, [sp, #0]
 800619e:	f108 0301 	add.w	r3, r8, #1
 80061a2:	7013      	strb	r3, [r2, #0]
 80061a4:	e608      	b.n	8005db8 <_dtoa_r+0x698>
 80061a6:	9b07      	ldr	r3, [sp, #28]
 80061a8:	9a07      	ldr	r2, [sp, #28]
 80061aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80061ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d028      	beq.n	8006206 <_dtoa_r+0xae6>
 80061b4:	4649      	mov	r1, r9
 80061b6:	2300      	movs	r3, #0
 80061b8:	220a      	movs	r2, #10
 80061ba:	4658      	mov	r0, fp
 80061bc:	f000 f9d6 	bl	800656c <__multadd>
 80061c0:	42af      	cmp	r7, r5
 80061c2:	4681      	mov	r9, r0
 80061c4:	f04f 0300 	mov.w	r3, #0
 80061c8:	f04f 020a 	mov.w	r2, #10
 80061cc:	4639      	mov	r1, r7
 80061ce:	4658      	mov	r0, fp
 80061d0:	d107      	bne.n	80061e2 <_dtoa_r+0xac2>
 80061d2:	f000 f9cb 	bl	800656c <__multadd>
 80061d6:	4607      	mov	r7, r0
 80061d8:	4605      	mov	r5, r0
 80061da:	9b07      	ldr	r3, [sp, #28]
 80061dc:	3301      	adds	r3, #1
 80061de:	9307      	str	r3, [sp, #28]
 80061e0:	e774      	b.n	80060cc <_dtoa_r+0x9ac>
 80061e2:	f000 f9c3 	bl	800656c <__multadd>
 80061e6:	4629      	mov	r1, r5
 80061e8:	4607      	mov	r7, r0
 80061ea:	2300      	movs	r3, #0
 80061ec:	220a      	movs	r2, #10
 80061ee:	4658      	mov	r0, fp
 80061f0:	f000 f9bc 	bl	800656c <__multadd>
 80061f4:	4605      	mov	r5, r0
 80061f6:	e7f0      	b.n	80061da <_dtoa_r+0xaba>
 80061f8:	9b00      	ldr	r3, [sp, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	bfcc      	ite	gt
 80061fe:	461e      	movgt	r6, r3
 8006200:	2601      	movle	r6, #1
 8006202:	4456      	add	r6, sl
 8006204:	2700      	movs	r7, #0
 8006206:	4649      	mov	r1, r9
 8006208:	2201      	movs	r2, #1
 800620a:	4658      	mov	r0, fp
 800620c:	f000 fb5a 	bl	80068c4 <__lshift>
 8006210:	4621      	mov	r1, r4
 8006212:	4681      	mov	r9, r0
 8006214:	f000 fbc2 	bl	800699c <__mcmp>
 8006218:	2800      	cmp	r0, #0
 800621a:	dcb0      	bgt.n	800617e <_dtoa_r+0xa5e>
 800621c:	d102      	bne.n	8006224 <_dtoa_r+0xb04>
 800621e:	f018 0f01 	tst.w	r8, #1
 8006222:	d1ac      	bne.n	800617e <_dtoa_r+0xa5e>
 8006224:	4633      	mov	r3, r6
 8006226:	461e      	mov	r6, r3
 8006228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800622c:	2a30      	cmp	r2, #48	@ 0x30
 800622e:	d0fa      	beq.n	8006226 <_dtoa_r+0xb06>
 8006230:	e5c2      	b.n	8005db8 <_dtoa_r+0x698>
 8006232:	459a      	cmp	sl, r3
 8006234:	d1a4      	bne.n	8006180 <_dtoa_r+0xa60>
 8006236:	9b04      	ldr	r3, [sp, #16]
 8006238:	3301      	adds	r3, #1
 800623a:	9304      	str	r3, [sp, #16]
 800623c:	2331      	movs	r3, #49	@ 0x31
 800623e:	f88a 3000 	strb.w	r3, [sl]
 8006242:	e5b9      	b.n	8005db8 <_dtoa_r+0x698>
 8006244:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006246:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80062a4 <_dtoa_r+0xb84>
 800624a:	b11b      	cbz	r3, 8006254 <_dtoa_r+0xb34>
 800624c:	f10a 0308 	add.w	r3, sl, #8
 8006250:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006252:	6013      	str	r3, [r2, #0]
 8006254:	4650      	mov	r0, sl
 8006256:	b019      	add	sp, #100	@ 0x64
 8006258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800625c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800625e:	2b01      	cmp	r3, #1
 8006260:	f77f ae37 	ble.w	8005ed2 <_dtoa_r+0x7b2>
 8006264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006266:	930a      	str	r3, [sp, #40]	@ 0x28
 8006268:	2001      	movs	r0, #1
 800626a:	e655      	b.n	8005f18 <_dtoa_r+0x7f8>
 800626c:	9b00      	ldr	r3, [sp, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	f77f aed6 	ble.w	8006020 <_dtoa_r+0x900>
 8006274:	4656      	mov	r6, sl
 8006276:	4621      	mov	r1, r4
 8006278:	4648      	mov	r0, r9
 800627a:	f7ff f9c8 	bl	800560e <quorem>
 800627e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006282:	f806 8b01 	strb.w	r8, [r6], #1
 8006286:	9b00      	ldr	r3, [sp, #0]
 8006288:	eba6 020a 	sub.w	r2, r6, sl
 800628c:	4293      	cmp	r3, r2
 800628e:	ddb3      	ble.n	80061f8 <_dtoa_r+0xad8>
 8006290:	4649      	mov	r1, r9
 8006292:	2300      	movs	r3, #0
 8006294:	220a      	movs	r2, #10
 8006296:	4658      	mov	r0, fp
 8006298:	f000 f968 	bl	800656c <__multadd>
 800629c:	4681      	mov	r9, r0
 800629e:	e7ea      	b.n	8006276 <_dtoa_r+0xb56>
 80062a0:	080077e0 	.word	0x080077e0
 80062a4:	08007764 	.word	0x08007764

080062a8 <_free_r>:
 80062a8:	b538      	push	{r3, r4, r5, lr}
 80062aa:	4605      	mov	r5, r0
 80062ac:	2900      	cmp	r1, #0
 80062ae:	d041      	beq.n	8006334 <_free_r+0x8c>
 80062b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062b4:	1f0c      	subs	r4, r1, #4
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	bfb8      	it	lt
 80062ba:	18e4      	addlt	r4, r4, r3
 80062bc:	f000 f8e8 	bl	8006490 <__malloc_lock>
 80062c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006338 <_free_r+0x90>)
 80062c2:	6813      	ldr	r3, [r2, #0]
 80062c4:	b933      	cbnz	r3, 80062d4 <_free_r+0x2c>
 80062c6:	6063      	str	r3, [r4, #4]
 80062c8:	6014      	str	r4, [r2, #0]
 80062ca:	4628      	mov	r0, r5
 80062cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062d0:	f000 b8e4 	b.w	800649c <__malloc_unlock>
 80062d4:	42a3      	cmp	r3, r4
 80062d6:	d908      	bls.n	80062ea <_free_r+0x42>
 80062d8:	6820      	ldr	r0, [r4, #0]
 80062da:	1821      	adds	r1, r4, r0
 80062dc:	428b      	cmp	r3, r1
 80062de:	bf01      	itttt	eq
 80062e0:	6819      	ldreq	r1, [r3, #0]
 80062e2:	685b      	ldreq	r3, [r3, #4]
 80062e4:	1809      	addeq	r1, r1, r0
 80062e6:	6021      	streq	r1, [r4, #0]
 80062e8:	e7ed      	b.n	80062c6 <_free_r+0x1e>
 80062ea:	461a      	mov	r2, r3
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	b10b      	cbz	r3, 80062f4 <_free_r+0x4c>
 80062f0:	42a3      	cmp	r3, r4
 80062f2:	d9fa      	bls.n	80062ea <_free_r+0x42>
 80062f4:	6811      	ldr	r1, [r2, #0]
 80062f6:	1850      	adds	r0, r2, r1
 80062f8:	42a0      	cmp	r0, r4
 80062fa:	d10b      	bne.n	8006314 <_free_r+0x6c>
 80062fc:	6820      	ldr	r0, [r4, #0]
 80062fe:	4401      	add	r1, r0
 8006300:	1850      	adds	r0, r2, r1
 8006302:	4283      	cmp	r3, r0
 8006304:	6011      	str	r1, [r2, #0]
 8006306:	d1e0      	bne.n	80062ca <_free_r+0x22>
 8006308:	6818      	ldr	r0, [r3, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	6053      	str	r3, [r2, #4]
 800630e:	4408      	add	r0, r1
 8006310:	6010      	str	r0, [r2, #0]
 8006312:	e7da      	b.n	80062ca <_free_r+0x22>
 8006314:	d902      	bls.n	800631c <_free_r+0x74>
 8006316:	230c      	movs	r3, #12
 8006318:	602b      	str	r3, [r5, #0]
 800631a:	e7d6      	b.n	80062ca <_free_r+0x22>
 800631c:	6820      	ldr	r0, [r4, #0]
 800631e:	1821      	adds	r1, r4, r0
 8006320:	428b      	cmp	r3, r1
 8006322:	bf04      	itt	eq
 8006324:	6819      	ldreq	r1, [r3, #0]
 8006326:	685b      	ldreq	r3, [r3, #4]
 8006328:	6063      	str	r3, [r4, #4]
 800632a:	bf04      	itt	eq
 800632c:	1809      	addeq	r1, r1, r0
 800632e:	6021      	streq	r1, [r4, #0]
 8006330:	6054      	str	r4, [r2, #4]
 8006332:	e7ca      	b.n	80062ca <_free_r+0x22>
 8006334:	bd38      	pop	{r3, r4, r5, pc}
 8006336:	bf00      	nop
 8006338:	20000440 	.word	0x20000440

0800633c <malloc>:
 800633c:	4b02      	ldr	r3, [pc, #8]	@ (8006348 <malloc+0xc>)
 800633e:	4601      	mov	r1, r0
 8006340:	6818      	ldr	r0, [r3, #0]
 8006342:	f000 b825 	b.w	8006390 <_malloc_r>
 8006346:	bf00      	nop
 8006348:	20000018 	.word	0x20000018

0800634c <sbrk_aligned>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	4e0f      	ldr	r6, [pc, #60]	@ (800638c <sbrk_aligned+0x40>)
 8006350:	460c      	mov	r4, r1
 8006352:	6831      	ldr	r1, [r6, #0]
 8006354:	4605      	mov	r5, r0
 8006356:	b911      	cbnz	r1, 800635e <sbrk_aligned+0x12>
 8006358:	f000 fe46 	bl	8006fe8 <_sbrk_r>
 800635c:	6030      	str	r0, [r6, #0]
 800635e:	4621      	mov	r1, r4
 8006360:	4628      	mov	r0, r5
 8006362:	f000 fe41 	bl	8006fe8 <_sbrk_r>
 8006366:	1c43      	adds	r3, r0, #1
 8006368:	d103      	bne.n	8006372 <sbrk_aligned+0x26>
 800636a:	f04f 34ff 	mov.w	r4, #4294967295
 800636e:	4620      	mov	r0, r4
 8006370:	bd70      	pop	{r4, r5, r6, pc}
 8006372:	1cc4      	adds	r4, r0, #3
 8006374:	f024 0403 	bic.w	r4, r4, #3
 8006378:	42a0      	cmp	r0, r4
 800637a:	d0f8      	beq.n	800636e <sbrk_aligned+0x22>
 800637c:	1a21      	subs	r1, r4, r0
 800637e:	4628      	mov	r0, r5
 8006380:	f000 fe32 	bl	8006fe8 <_sbrk_r>
 8006384:	3001      	adds	r0, #1
 8006386:	d1f2      	bne.n	800636e <sbrk_aligned+0x22>
 8006388:	e7ef      	b.n	800636a <sbrk_aligned+0x1e>
 800638a:	bf00      	nop
 800638c:	2000043c 	.word	0x2000043c

08006390 <_malloc_r>:
 8006390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006394:	1ccd      	adds	r5, r1, #3
 8006396:	f025 0503 	bic.w	r5, r5, #3
 800639a:	3508      	adds	r5, #8
 800639c:	2d0c      	cmp	r5, #12
 800639e:	bf38      	it	cc
 80063a0:	250c      	movcc	r5, #12
 80063a2:	2d00      	cmp	r5, #0
 80063a4:	4606      	mov	r6, r0
 80063a6:	db01      	blt.n	80063ac <_malloc_r+0x1c>
 80063a8:	42a9      	cmp	r1, r5
 80063aa:	d904      	bls.n	80063b6 <_malloc_r+0x26>
 80063ac:	230c      	movs	r3, #12
 80063ae:	6033      	str	r3, [r6, #0]
 80063b0:	2000      	movs	r0, #0
 80063b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800648c <_malloc_r+0xfc>
 80063ba:	f000 f869 	bl	8006490 <__malloc_lock>
 80063be:	f8d8 3000 	ldr.w	r3, [r8]
 80063c2:	461c      	mov	r4, r3
 80063c4:	bb44      	cbnz	r4, 8006418 <_malloc_r+0x88>
 80063c6:	4629      	mov	r1, r5
 80063c8:	4630      	mov	r0, r6
 80063ca:	f7ff ffbf 	bl	800634c <sbrk_aligned>
 80063ce:	1c43      	adds	r3, r0, #1
 80063d0:	4604      	mov	r4, r0
 80063d2:	d158      	bne.n	8006486 <_malloc_r+0xf6>
 80063d4:	f8d8 4000 	ldr.w	r4, [r8]
 80063d8:	4627      	mov	r7, r4
 80063da:	2f00      	cmp	r7, #0
 80063dc:	d143      	bne.n	8006466 <_malloc_r+0xd6>
 80063de:	2c00      	cmp	r4, #0
 80063e0:	d04b      	beq.n	800647a <_malloc_r+0xea>
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	4639      	mov	r1, r7
 80063e6:	4630      	mov	r0, r6
 80063e8:	eb04 0903 	add.w	r9, r4, r3
 80063ec:	f000 fdfc 	bl	8006fe8 <_sbrk_r>
 80063f0:	4581      	cmp	r9, r0
 80063f2:	d142      	bne.n	800647a <_malloc_r+0xea>
 80063f4:	6821      	ldr	r1, [r4, #0]
 80063f6:	1a6d      	subs	r5, r5, r1
 80063f8:	4629      	mov	r1, r5
 80063fa:	4630      	mov	r0, r6
 80063fc:	f7ff ffa6 	bl	800634c <sbrk_aligned>
 8006400:	3001      	adds	r0, #1
 8006402:	d03a      	beq.n	800647a <_malloc_r+0xea>
 8006404:	6823      	ldr	r3, [r4, #0]
 8006406:	442b      	add	r3, r5
 8006408:	6023      	str	r3, [r4, #0]
 800640a:	f8d8 3000 	ldr.w	r3, [r8]
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	bb62      	cbnz	r2, 800646c <_malloc_r+0xdc>
 8006412:	f8c8 7000 	str.w	r7, [r8]
 8006416:	e00f      	b.n	8006438 <_malloc_r+0xa8>
 8006418:	6822      	ldr	r2, [r4, #0]
 800641a:	1b52      	subs	r2, r2, r5
 800641c:	d420      	bmi.n	8006460 <_malloc_r+0xd0>
 800641e:	2a0b      	cmp	r2, #11
 8006420:	d917      	bls.n	8006452 <_malloc_r+0xc2>
 8006422:	1961      	adds	r1, r4, r5
 8006424:	42a3      	cmp	r3, r4
 8006426:	6025      	str	r5, [r4, #0]
 8006428:	bf18      	it	ne
 800642a:	6059      	strne	r1, [r3, #4]
 800642c:	6863      	ldr	r3, [r4, #4]
 800642e:	bf08      	it	eq
 8006430:	f8c8 1000 	streq.w	r1, [r8]
 8006434:	5162      	str	r2, [r4, r5]
 8006436:	604b      	str	r3, [r1, #4]
 8006438:	4630      	mov	r0, r6
 800643a:	f000 f82f 	bl	800649c <__malloc_unlock>
 800643e:	f104 000b 	add.w	r0, r4, #11
 8006442:	1d23      	adds	r3, r4, #4
 8006444:	f020 0007 	bic.w	r0, r0, #7
 8006448:	1ac2      	subs	r2, r0, r3
 800644a:	bf1c      	itt	ne
 800644c:	1a1b      	subne	r3, r3, r0
 800644e:	50a3      	strne	r3, [r4, r2]
 8006450:	e7af      	b.n	80063b2 <_malloc_r+0x22>
 8006452:	6862      	ldr	r2, [r4, #4]
 8006454:	42a3      	cmp	r3, r4
 8006456:	bf0c      	ite	eq
 8006458:	f8c8 2000 	streq.w	r2, [r8]
 800645c:	605a      	strne	r2, [r3, #4]
 800645e:	e7eb      	b.n	8006438 <_malloc_r+0xa8>
 8006460:	4623      	mov	r3, r4
 8006462:	6864      	ldr	r4, [r4, #4]
 8006464:	e7ae      	b.n	80063c4 <_malloc_r+0x34>
 8006466:	463c      	mov	r4, r7
 8006468:	687f      	ldr	r7, [r7, #4]
 800646a:	e7b6      	b.n	80063da <_malloc_r+0x4a>
 800646c:	461a      	mov	r2, r3
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	42a3      	cmp	r3, r4
 8006472:	d1fb      	bne.n	800646c <_malloc_r+0xdc>
 8006474:	2300      	movs	r3, #0
 8006476:	6053      	str	r3, [r2, #4]
 8006478:	e7de      	b.n	8006438 <_malloc_r+0xa8>
 800647a:	230c      	movs	r3, #12
 800647c:	6033      	str	r3, [r6, #0]
 800647e:	4630      	mov	r0, r6
 8006480:	f000 f80c 	bl	800649c <__malloc_unlock>
 8006484:	e794      	b.n	80063b0 <_malloc_r+0x20>
 8006486:	6005      	str	r5, [r0, #0]
 8006488:	e7d6      	b.n	8006438 <_malloc_r+0xa8>
 800648a:	bf00      	nop
 800648c:	20000440 	.word	0x20000440

08006490 <__malloc_lock>:
 8006490:	4801      	ldr	r0, [pc, #4]	@ (8006498 <__malloc_lock+0x8>)
 8006492:	f7ff b8ba 	b.w	800560a <__retarget_lock_acquire_recursive>
 8006496:	bf00      	nop
 8006498:	20000438 	.word	0x20000438

0800649c <__malloc_unlock>:
 800649c:	4801      	ldr	r0, [pc, #4]	@ (80064a4 <__malloc_unlock+0x8>)
 800649e:	f7ff b8b5 	b.w	800560c <__retarget_lock_release_recursive>
 80064a2:	bf00      	nop
 80064a4:	20000438 	.word	0x20000438

080064a8 <_Balloc>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	69c6      	ldr	r6, [r0, #28]
 80064ac:	4604      	mov	r4, r0
 80064ae:	460d      	mov	r5, r1
 80064b0:	b976      	cbnz	r6, 80064d0 <_Balloc+0x28>
 80064b2:	2010      	movs	r0, #16
 80064b4:	f7ff ff42 	bl	800633c <malloc>
 80064b8:	4602      	mov	r2, r0
 80064ba:	61e0      	str	r0, [r4, #28]
 80064bc:	b920      	cbnz	r0, 80064c8 <_Balloc+0x20>
 80064be:	4b18      	ldr	r3, [pc, #96]	@ (8006520 <_Balloc+0x78>)
 80064c0:	4818      	ldr	r0, [pc, #96]	@ (8006524 <_Balloc+0x7c>)
 80064c2:	216b      	movs	r1, #107	@ 0x6b
 80064c4:	f000 fdae 	bl	8007024 <__assert_func>
 80064c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064cc:	6006      	str	r6, [r0, #0]
 80064ce:	60c6      	str	r6, [r0, #12]
 80064d0:	69e6      	ldr	r6, [r4, #28]
 80064d2:	68f3      	ldr	r3, [r6, #12]
 80064d4:	b183      	cbz	r3, 80064f8 <_Balloc+0x50>
 80064d6:	69e3      	ldr	r3, [r4, #28]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064de:	b9b8      	cbnz	r0, 8006510 <_Balloc+0x68>
 80064e0:	2101      	movs	r1, #1
 80064e2:	fa01 f605 	lsl.w	r6, r1, r5
 80064e6:	1d72      	adds	r2, r6, #5
 80064e8:	0092      	lsls	r2, r2, #2
 80064ea:	4620      	mov	r0, r4
 80064ec:	f000 fdb8 	bl	8007060 <_calloc_r>
 80064f0:	b160      	cbz	r0, 800650c <_Balloc+0x64>
 80064f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064f6:	e00e      	b.n	8006516 <_Balloc+0x6e>
 80064f8:	2221      	movs	r2, #33	@ 0x21
 80064fa:	2104      	movs	r1, #4
 80064fc:	4620      	mov	r0, r4
 80064fe:	f000 fdaf 	bl	8007060 <_calloc_r>
 8006502:	69e3      	ldr	r3, [r4, #28]
 8006504:	60f0      	str	r0, [r6, #12]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1e4      	bne.n	80064d6 <_Balloc+0x2e>
 800650c:	2000      	movs	r0, #0
 800650e:	bd70      	pop	{r4, r5, r6, pc}
 8006510:	6802      	ldr	r2, [r0, #0]
 8006512:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006516:	2300      	movs	r3, #0
 8006518:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800651c:	e7f7      	b.n	800650e <_Balloc+0x66>
 800651e:	bf00      	nop
 8006520:	08007771 	.word	0x08007771
 8006524:	080077f1 	.word	0x080077f1

08006528 <_Bfree>:
 8006528:	b570      	push	{r4, r5, r6, lr}
 800652a:	69c6      	ldr	r6, [r0, #28]
 800652c:	4605      	mov	r5, r0
 800652e:	460c      	mov	r4, r1
 8006530:	b976      	cbnz	r6, 8006550 <_Bfree+0x28>
 8006532:	2010      	movs	r0, #16
 8006534:	f7ff ff02 	bl	800633c <malloc>
 8006538:	4602      	mov	r2, r0
 800653a:	61e8      	str	r0, [r5, #28]
 800653c:	b920      	cbnz	r0, 8006548 <_Bfree+0x20>
 800653e:	4b09      	ldr	r3, [pc, #36]	@ (8006564 <_Bfree+0x3c>)
 8006540:	4809      	ldr	r0, [pc, #36]	@ (8006568 <_Bfree+0x40>)
 8006542:	218f      	movs	r1, #143	@ 0x8f
 8006544:	f000 fd6e 	bl	8007024 <__assert_func>
 8006548:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800654c:	6006      	str	r6, [r0, #0]
 800654e:	60c6      	str	r6, [r0, #12]
 8006550:	b13c      	cbz	r4, 8006562 <_Bfree+0x3a>
 8006552:	69eb      	ldr	r3, [r5, #28]
 8006554:	6862      	ldr	r2, [r4, #4]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800655c:	6021      	str	r1, [r4, #0]
 800655e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006562:	bd70      	pop	{r4, r5, r6, pc}
 8006564:	08007771 	.word	0x08007771
 8006568:	080077f1 	.word	0x080077f1

0800656c <__multadd>:
 800656c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006570:	690d      	ldr	r5, [r1, #16]
 8006572:	4607      	mov	r7, r0
 8006574:	460c      	mov	r4, r1
 8006576:	461e      	mov	r6, r3
 8006578:	f101 0c14 	add.w	ip, r1, #20
 800657c:	2000      	movs	r0, #0
 800657e:	f8dc 3000 	ldr.w	r3, [ip]
 8006582:	b299      	uxth	r1, r3
 8006584:	fb02 6101 	mla	r1, r2, r1, r6
 8006588:	0c1e      	lsrs	r6, r3, #16
 800658a:	0c0b      	lsrs	r3, r1, #16
 800658c:	fb02 3306 	mla	r3, r2, r6, r3
 8006590:	b289      	uxth	r1, r1
 8006592:	3001      	adds	r0, #1
 8006594:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006598:	4285      	cmp	r5, r0
 800659a:	f84c 1b04 	str.w	r1, [ip], #4
 800659e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80065a2:	dcec      	bgt.n	800657e <__multadd+0x12>
 80065a4:	b30e      	cbz	r6, 80065ea <__multadd+0x7e>
 80065a6:	68a3      	ldr	r3, [r4, #8]
 80065a8:	42ab      	cmp	r3, r5
 80065aa:	dc19      	bgt.n	80065e0 <__multadd+0x74>
 80065ac:	6861      	ldr	r1, [r4, #4]
 80065ae:	4638      	mov	r0, r7
 80065b0:	3101      	adds	r1, #1
 80065b2:	f7ff ff79 	bl	80064a8 <_Balloc>
 80065b6:	4680      	mov	r8, r0
 80065b8:	b928      	cbnz	r0, 80065c6 <__multadd+0x5a>
 80065ba:	4602      	mov	r2, r0
 80065bc:	4b0c      	ldr	r3, [pc, #48]	@ (80065f0 <__multadd+0x84>)
 80065be:	480d      	ldr	r0, [pc, #52]	@ (80065f4 <__multadd+0x88>)
 80065c0:	21ba      	movs	r1, #186	@ 0xba
 80065c2:	f000 fd2f 	bl	8007024 <__assert_func>
 80065c6:	6922      	ldr	r2, [r4, #16]
 80065c8:	3202      	adds	r2, #2
 80065ca:	f104 010c 	add.w	r1, r4, #12
 80065ce:	0092      	lsls	r2, r2, #2
 80065d0:	300c      	adds	r0, #12
 80065d2:	f000 fd19 	bl	8007008 <memcpy>
 80065d6:	4621      	mov	r1, r4
 80065d8:	4638      	mov	r0, r7
 80065da:	f7ff ffa5 	bl	8006528 <_Bfree>
 80065de:	4644      	mov	r4, r8
 80065e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065e4:	3501      	adds	r5, #1
 80065e6:	615e      	str	r6, [r3, #20]
 80065e8:	6125      	str	r5, [r4, #16]
 80065ea:	4620      	mov	r0, r4
 80065ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f0:	080077e0 	.word	0x080077e0
 80065f4:	080077f1 	.word	0x080077f1

080065f8 <__hi0bits>:
 80065f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80065fc:	4603      	mov	r3, r0
 80065fe:	bf36      	itet	cc
 8006600:	0403      	lslcc	r3, r0, #16
 8006602:	2000      	movcs	r0, #0
 8006604:	2010      	movcc	r0, #16
 8006606:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800660a:	bf3c      	itt	cc
 800660c:	021b      	lslcc	r3, r3, #8
 800660e:	3008      	addcc	r0, #8
 8006610:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006614:	bf3c      	itt	cc
 8006616:	011b      	lslcc	r3, r3, #4
 8006618:	3004      	addcc	r0, #4
 800661a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800661e:	bf3c      	itt	cc
 8006620:	009b      	lslcc	r3, r3, #2
 8006622:	3002      	addcc	r0, #2
 8006624:	2b00      	cmp	r3, #0
 8006626:	db05      	blt.n	8006634 <__hi0bits+0x3c>
 8006628:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800662c:	f100 0001 	add.w	r0, r0, #1
 8006630:	bf08      	it	eq
 8006632:	2020      	moveq	r0, #32
 8006634:	4770      	bx	lr

08006636 <__lo0bits>:
 8006636:	6803      	ldr	r3, [r0, #0]
 8006638:	4602      	mov	r2, r0
 800663a:	f013 0007 	ands.w	r0, r3, #7
 800663e:	d00b      	beq.n	8006658 <__lo0bits+0x22>
 8006640:	07d9      	lsls	r1, r3, #31
 8006642:	d421      	bmi.n	8006688 <__lo0bits+0x52>
 8006644:	0798      	lsls	r0, r3, #30
 8006646:	bf49      	itett	mi
 8006648:	085b      	lsrmi	r3, r3, #1
 800664a:	089b      	lsrpl	r3, r3, #2
 800664c:	2001      	movmi	r0, #1
 800664e:	6013      	strmi	r3, [r2, #0]
 8006650:	bf5c      	itt	pl
 8006652:	6013      	strpl	r3, [r2, #0]
 8006654:	2002      	movpl	r0, #2
 8006656:	4770      	bx	lr
 8006658:	b299      	uxth	r1, r3
 800665a:	b909      	cbnz	r1, 8006660 <__lo0bits+0x2a>
 800665c:	0c1b      	lsrs	r3, r3, #16
 800665e:	2010      	movs	r0, #16
 8006660:	b2d9      	uxtb	r1, r3
 8006662:	b909      	cbnz	r1, 8006668 <__lo0bits+0x32>
 8006664:	3008      	adds	r0, #8
 8006666:	0a1b      	lsrs	r3, r3, #8
 8006668:	0719      	lsls	r1, r3, #28
 800666a:	bf04      	itt	eq
 800666c:	091b      	lsreq	r3, r3, #4
 800666e:	3004      	addeq	r0, #4
 8006670:	0799      	lsls	r1, r3, #30
 8006672:	bf04      	itt	eq
 8006674:	089b      	lsreq	r3, r3, #2
 8006676:	3002      	addeq	r0, #2
 8006678:	07d9      	lsls	r1, r3, #31
 800667a:	d403      	bmi.n	8006684 <__lo0bits+0x4e>
 800667c:	085b      	lsrs	r3, r3, #1
 800667e:	f100 0001 	add.w	r0, r0, #1
 8006682:	d003      	beq.n	800668c <__lo0bits+0x56>
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	4770      	bx	lr
 8006688:	2000      	movs	r0, #0
 800668a:	4770      	bx	lr
 800668c:	2020      	movs	r0, #32
 800668e:	4770      	bx	lr

08006690 <__i2b>:
 8006690:	b510      	push	{r4, lr}
 8006692:	460c      	mov	r4, r1
 8006694:	2101      	movs	r1, #1
 8006696:	f7ff ff07 	bl	80064a8 <_Balloc>
 800669a:	4602      	mov	r2, r0
 800669c:	b928      	cbnz	r0, 80066aa <__i2b+0x1a>
 800669e:	4b05      	ldr	r3, [pc, #20]	@ (80066b4 <__i2b+0x24>)
 80066a0:	4805      	ldr	r0, [pc, #20]	@ (80066b8 <__i2b+0x28>)
 80066a2:	f240 1145 	movw	r1, #325	@ 0x145
 80066a6:	f000 fcbd 	bl	8007024 <__assert_func>
 80066aa:	2301      	movs	r3, #1
 80066ac:	6144      	str	r4, [r0, #20]
 80066ae:	6103      	str	r3, [r0, #16]
 80066b0:	bd10      	pop	{r4, pc}
 80066b2:	bf00      	nop
 80066b4:	080077e0 	.word	0x080077e0
 80066b8:	080077f1 	.word	0x080077f1

080066bc <__multiply>:
 80066bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c0:	4614      	mov	r4, r2
 80066c2:	690a      	ldr	r2, [r1, #16]
 80066c4:	6923      	ldr	r3, [r4, #16]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	bfa8      	it	ge
 80066ca:	4623      	movge	r3, r4
 80066cc:	460f      	mov	r7, r1
 80066ce:	bfa4      	itt	ge
 80066d0:	460c      	movge	r4, r1
 80066d2:	461f      	movge	r7, r3
 80066d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80066d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80066dc:	68a3      	ldr	r3, [r4, #8]
 80066de:	6861      	ldr	r1, [r4, #4]
 80066e0:	eb0a 0609 	add.w	r6, sl, r9
 80066e4:	42b3      	cmp	r3, r6
 80066e6:	b085      	sub	sp, #20
 80066e8:	bfb8      	it	lt
 80066ea:	3101      	addlt	r1, #1
 80066ec:	f7ff fedc 	bl	80064a8 <_Balloc>
 80066f0:	b930      	cbnz	r0, 8006700 <__multiply+0x44>
 80066f2:	4602      	mov	r2, r0
 80066f4:	4b44      	ldr	r3, [pc, #272]	@ (8006808 <__multiply+0x14c>)
 80066f6:	4845      	ldr	r0, [pc, #276]	@ (800680c <__multiply+0x150>)
 80066f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80066fc:	f000 fc92 	bl	8007024 <__assert_func>
 8006700:	f100 0514 	add.w	r5, r0, #20
 8006704:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006708:	462b      	mov	r3, r5
 800670a:	2200      	movs	r2, #0
 800670c:	4543      	cmp	r3, r8
 800670e:	d321      	bcc.n	8006754 <__multiply+0x98>
 8006710:	f107 0114 	add.w	r1, r7, #20
 8006714:	f104 0214 	add.w	r2, r4, #20
 8006718:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800671c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006720:	9302      	str	r3, [sp, #8]
 8006722:	1b13      	subs	r3, r2, r4
 8006724:	3b15      	subs	r3, #21
 8006726:	f023 0303 	bic.w	r3, r3, #3
 800672a:	3304      	adds	r3, #4
 800672c:	f104 0715 	add.w	r7, r4, #21
 8006730:	42ba      	cmp	r2, r7
 8006732:	bf38      	it	cc
 8006734:	2304      	movcc	r3, #4
 8006736:	9301      	str	r3, [sp, #4]
 8006738:	9b02      	ldr	r3, [sp, #8]
 800673a:	9103      	str	r1, [sp, #12]
 800673c:	428b      	cmp	r3, r1
 800673e:	d80c      	bhi.n	800675a <__multiply+0x9e>
 8006740:	2e00      	cmp	r6, #0
 8006742:	dd03      	ble.n	800674c <__multiply+0x90>
 8006744:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006748:	2b00      	cmp	r3, #0
 800674a:	d05b      	beq.n	8006804 <__multiply+0x148>
 800674c:	6106      	str	r6, [r0, #16]
 800674e:	b005      	add	sp, #20
 8006750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006754:	f843 2b04 	str.w	r2, [r3], #4
 8006758:	e7d8      	b.n	800670c <__multiply+0x50>
 800675a:	f8b1 a000 	ldrh.w	sl, [r1]
 800675e:	f1ba 0f00 	cmp.w	sl, #0
 8006762:	d024      	beq.n	80067ae <__multiply+0xf2>
 8006764:	f104 0e14 	add.w	lr, r4, #20
 8006768:	46a9      	mov	r9, r5
 800676a:	f04f 0c00 	mov.w	ip, #0
 800676e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006772:	f8d9 3000 	ldr.w	r3, [r9]
 8006776:	fa1f fb87 	uxth.w	fp, r7
 800677a:	b29b      	uxth	r3, r3
 800677c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006780:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006784:	f8d9 7000 	ldr.w	r7, [r9]
 8006788:	4463      	add	r3, ip
 800678a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800678e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006792:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006796:	b29b      	uxth	r3, r3
 8006798:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800679c:	4572      	cmp	r2, lr
 800679e:	f849 3b04 	str.w	r3, [r9], #4
 80067a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80067a6:	d8e2      	bhi.n	800676e <__multiply+0xb2>
 80067a8:	9b01      	ldr	r3, [sp, #4]
 80067aa:	f845 c003 	str.w	ip, [r5, r3]
 80067ae:	9b03      	ldr	r3, [sp, #12]
 80067b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80067b4:	3104      	adds	r1, #4
 80067b6:	f1b9 0f00 	cmp.w	r9, #0
 80067ba:	d021      	beq.n	8006800 <__multiply+0x144>
 80067bc:	682b      	ldr	r3, [r5, #0]
 80067be:	f104 0c14 	add.w	ip, r4, #20
 80067c2:	46ae      	mov	lr, r5
 80067c4:	f04f 0a00 	mov.w	sl, #0
 80067c8:	f8bc b000 	ldrh.w	fp, [ip]
 80067cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80067d0:	fb09 770b 	mla	r7, r9, fp, r7
 80067d4:	4457      	add	r7, sl
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80067dc:	f84e 3b04 	str.w	r3, [lr], #4
 80067e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80067e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067e8:	f8be 3000 	ldrh.w	r3, [lr]
 80067ec:	fb09 330a 	mla	r3, r9, sl, r3
 80067f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80067f4:	4562      	cmp	r2, ip
 80067f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067fa:	d8e5      	bhi.n	80067c8 <__multiply+0x10c>
 80067fc:	9f01      	ldr	r7, [sp, #4]
 80067fe:	51eb      	str	r3, [r5, r7]
 8006800:	3504      	adds	r5, #4
 8006802:	e799      	b.n	8006738 <__multiply+0x7c>
 8006804:	3e01      	subs	r6, #1
 8006806:	e79b      	b.n	8006740 <__multiply+0x84>
 8006808:	080077e0 	.word	0x080077e0
 800680c:	080077f1 	.word	0x080077f1

08006810 <__pow5mult>:
 8006810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006814:	4615      	mov	r5, r2
 8006816:	f012 0203 	ands.w	r2, r2, #3
 800681a:	4607      	mov	r7, r0
 800681c:	460e      	mov	r6, r1
 800681e:	d007      	beq.n	8006830 <__pow5mult+0x20>
 8006820:	4c25      	ldr	r4, [pc, #148]	@ (80068b8 <__pow5mult+0xa8>)
 8006822:	3a01      	subs	r2, #1
 8006824:	2300      	movs	r3, #0
 8006826:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800682a:	f7ff fe9f 	bl	800656c <__multadd>
 800682e:	4606      	mov	r6, r0
 8006830:	10ad      	asrs	r5, r5, #2
 8006832:	d03d      	beq.n	80068b0 <__pow5mult+0xa0>
 8006834:	69fc      	ldr	r4, [r7, #28]
 8006836:	b97c      	cbnz	r4, 8006858 <__pow5mult+0x48>
 8006838:	2010      	movs	r0, #16
 800683a:	f7ff fd7f 	bl	800633c <malloc>
 800683e:	4602      	mov	r2, r0
 8006840:	61f8      	str	r0, [r7, #28]
 8006842:	b928      	cbnz	r0, 8006850 <__pow5mult+0x40>
 8006844:	4b1d      	ldr	r3, [pc, #116]	@ (80068bc <__pow5mult+0xac>)
 8006846:	481e      	ldr	r0, [pc, #120]	@ (80068c0 <__pow5mult+0xb0>)
 8006848:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800684c:	f000 fbea 	bl	8007024 <__assert_func>
 8006850:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006854:	6004      	str	r4, [r0, #0]
 8006856:	60c4      	str	r4, [r0, #12]
 8006858:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800685c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006860:	b94c      	cbnz	r4, 8006876 <__pow5mult+0x66>
 8006862:	f240 2171 	movw	r1, #625	@ 0x271
 8006866:	4638      	mov	r0, r7
 8006868:	f7ff ff12 	bl	8006690 <__i2b>
 800686c:	2300      	movs	r3, #0
 800686e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006872:	4604      	mov	r4, r0
 8006874:	6003      	str	r3, [r0, #0]
 8006876:	f04f 0900 	mov.w	r9, #0
 800687a:	07eb      	lsls	r3, r5, #31
 800687c:	d50a      	bpl.n	8006894 <__pow5mult+0x84>
 800687e:	4631      	mov	r1, r6
 8006880:	4622      	mov	r2, r4
 8006882:	4638      	mov	r0, r7
 8006884:	f7ff ff1a 	bl	80066bc <__multiply>
 8006888:	4631      	mov	r1, r6
 800688a:	4680      	mov	r8, r0
 800688c:	4638      	mov	r0, r7
 800688e:	f7ff fe4b 	bl	8006528 <_Bfree>
 8006892:	4646      	mov	r6, r8
 8006894:	106d      	asrs	r5, r5, #1
 8006896:	d00b      	beq.n	80068b0 <__pow5mult+0xa0>
 8006898:	6820      	ldr	r0, [r4, #0]
 800689a:	b938      	cbnz	r0, 80068ac <__pow5mult+0x9c>
 800689c:	4622      	mov	r2, r4
 800689e:	4621      	mov	r1, r4
 80068a0:	4638      	mov	r0, r7
 80068a2:	f7ff ff0b 	bl	80066bc <__multiply>
 80068a6:	6020      	str	r0, [r4, #0]
 80068a8:	f8c0 9000 	str.w	r9, [r0]
 80068ac:	4604      	mov	r4, r0
 80068ae:	e7e4      	b.n	800687a <__pow5mult+0x6a>
 80068b0:	4630      	mov	r0, r6
 80068b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068b6:	bf00      	nop
 80068b8:	0800784c 	.word	0x0800784c
 80068bc:	08007771 	.word	0x08007771
 80068c0:	080077f1 	.word	0x080077f1

080068c4 <__lshift>:
 80068c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068c8:	460c      	mov	r4, r1
 80068ca:	6849      	ldr	r1, [r1, #4]
 80068cc:	6923      	ldr	r3, [r4, #16]
 80068ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068d2:	68a3      	ldr	r3, [r4, #8]
 80068d4:	4607      	mov	r7, r0
 80068d6:	4691      	mov	r9, r2
 80068d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068dc:	f108 0601 	add.w	r6, r8, #1
 80068e0:	42b3      	cmp	r3, r6
 80068e2:	db0b      	blt.n	80068fc <__lshift+0x38>
 80068e4:	4638      	mov	r0, r7
 80068e6:	f7ff fddf 	bl	80064a8 <_Balloc>
 80068ea:	4605      	mov	r5, r0
 80068ec:	b948      	cbnz	r0, 8006902 <__lshift+0x3e>
 80068ee:	4602      	mov	r2, r0
 80068f0:	4b28      	ldr	r3, [pc, #160]	@ (8006994 <__lshift+0xd0>)
 80068f2:	4829      	ldr	r0, [pc, #164]	@ (8006998 <__lshift+0xd4>)
 80068f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80068f8:	f000 fb94 	bl	8007024 <__assert_func>
 80068fc:	3101      	adds	r1, #1
 80068fe:	005b      	lsls	r3, r3, #1
 8006900:	e7ee      	b.n	80068e0 <__lshift+0x1c>
 8006902:	2300      	movs	r3, #0
 8006904:	f100 0114 	add.w	r1, r0, #20
 8006908:	f100 0210 	add.w	r2, r0, #16
 800690c:	4618      	mov	r0, r3
 800690e:	4553      	cmp	r3, sl
 8006910:	db33      	blt.n	800697a <__lshift+0xb6>
 8006912:	6920      	ldr	r0, [r4, #16]
 8006914:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006918:	f104 0314 	add.w	r3, r4, #20
 800691c:	f019 091f 	ands.w	r9, r9, #31
 8006920:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006924:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006928:	d02b      	beq.n	8006982 <__lshift+0xbe>
 800692a:	f1c9 0e20 	rsb	lr, r9, #32
 800692e:	468a      	mov	sl, r1
 8006930:	2200      	movs	r2, #0
 8006932:	6818      	ldr	r0, [r3, #0]
 8006934:	fa00 f009 	lsl.w	r0, r0, r9
 8006938:	4310      	orrs	r0, r2
 800693a:	f84a 0b04 	str.w	r0, [sl], #4
 800693e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006942:	459c      	cmp	ip, r3
 8006944:	fa22 f20e 	lsr.w	r2, r2, lr
 8006948:	d8f3      	bhi.n	8006932 <__lshift+0x6e>
 800694a:	ebac 0304 	sub.w	r3, ip, r4
 800694e:	3b15      	subs	r3, #21
 8006950:	f023 0303 	bic.w	r3, r3, #3
 8006954:	3304      	adds	r3, #4
 8006956:	f104 0015 	add.w	r0, r4, #21
 800695a:	4584      	cmp	ip, r0
 800695c:	bf38      	it	cc
 800695e:	2304      	movcc	r3, #4
 8006960:	50ca      	str	r2, [r1, r3]
 8006962:	b10a      	cbz	r2, 8006968 <__lshift+0xa4>
 8006964:	f108 0602 	add.w	r6, r8, #2
 8006968:	3e01      	subs	r6, #1
 800696a:	4638      	mov	r0, r7
 800696c:	612e      	str	r6, [r5, #16]
 800696e:	4621      	mov	r1, r4
 8006970:	f7ff fdda 	bl	8006528 <_Bfree>
 8006974:	4628      	mov	r0, r5
 8006976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800697a:	f842 0f04 	str.w	r0, [r2, #4]!
 800697e:	3301      	adds	r3, #1
 8006980:	e7c5      	b.n	800690e <__lshift+0x4a>
 8006982:	3904      	subs	r1, #4
 8006984:	f853 2b04 	ldr.w	r2, [r3], #4
 8006988:	f841 2f04 	str.w	r2, [r1, #4]!
 800698c:	459c      	cmp	ip, r3
 800698e:	d8f9      	bhi.n	8006984 <__lshift+0xc0>
 8006990:	e7ea      	b.n	8006968 <__lshift+0xa4>
 8006992:	bf00      	nop
 8006994:	080077e0 	.word	0x080077e0
 8006998:	080077f1 	.word	0x080077f1

0800699c <__mcmp>:
 800699c:	690a      	ldr	r2, [r1, #16]
 800699e:	4603      	mov	r3, r0
 80069a0:	6900      	ldr	r0, [r0, #16]
 80069a2:	1a80      	subs	r0, r0, r2
 80069a4:	b530      	push	{r4, r5, lr}
 80069a6:	d10e      	bne.n	80069c6 <__mcmp+0x2a>
 80069a8:	3314      	adds	r3, #20
 80069aa:	3114      	adds	r1, #20
 80069ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80069b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80069b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80069b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80069bc:	4295      	cmp	r5, r2
 80069be:	d003      	beq.n	80069c8 <__mcmp+0x2c>
 80069c0:	d205      	bcs.n	80069ce <__mcmp+0x32>
 80069c2:	f04f 30ff 	mov.w	r0, #4294967295
 80069c6:	bd30      	pop	{r4, r5, pc}
 80069c8:	42a3      	cmp	r3, r4
 80069ca:	d3f3      	bcc.n	80069b4 <__mcmp+0x18>
 80069cc:	e7fb      	b.n	80069c6 <__mcmp+0x2a>
 80069ce:	2001      	movs	r0, #1
 80069d0:	e7f9      	b.n	80069c6 <__mcmp+0x2a>
	...

080069d4 <__mdiff>:
 80069d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d8:	4689      	mov	r9, r1
 80069da:	4606      	mov	r6, r0
 80069dc:	4611      	mov	r1, r2
 80069de:	4648      	mov	r0, r9
 80069e0:	4614      	mov	r4, r2
 80069e2:	f7ff ffdb 	bl	800699c <__mcmp>
 80069e6:	1e05      	subs	r5, r0, #0
 80069e8:	d112      	bne.n	8006a10 <__mdiff+0x3c>
 80069ea:	4629      	mov	r1, r5
 80069ec:	4630      	mov	r0, r6
 80069ee:	f7ff fd5b 	bl	80064a8 <_Balloc>
 80069f2:	4602      	mov	r2, r0
 80069f4:	b928      	cbnz	r0, 8006a02 <__mdiff+0x2e>
 80069f6:	4b3f      	ldr	r3, [pc, #252]	@ (8006af4 <__mdiff+0x120>)
 80069f8:	f240 2137 	movw	r1, #567	@ 0x237
 80069fc:	483e      	ldr	r0, [pc, #248]	@ (8006af8 <__mdiff+0x124>)
 80069fe:	f000 fb11 	bl	8007024 <__assert_func>
 8006a02:	2301      	movs	r3, #1
 8006a04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a08:	4610      	mov	r0, r2
 8006a0a:	b003      	add	sp, #12
 8006a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a10:	bfbc      	itt	lt
 8006a12:	464b      	movlt	r3, r9
 8006a14:	46a1      	movlt	r9, r4
 8006a16:	4630      	mov	r0, r6
 8006a18:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006a1c:	bfba      	itte	lt
 8006a1e:	461c      	movlt	r4, r3
 8006a20:	2501      	movlt	r5, #1
 8006a22:	2500      	movge	r5, #0
 8006a24:	f7ff fd40 	bl	80064a8 <_Balloc>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	b918      	cbnz	r0, 8006a34 <__mdiff+0x60>
 8006a2c:	4b31      	ldr	r3, [pc, #196]	@ (8006af4 <__mdiff+0x120>)
 8006a2e:	f240 2145 	movw	r1, #581	@ 0x245
 8006a32:	e7e3      	b.n	80069fc <__mdiff+0x28>
 8006a34:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006a38:	6926      	ldr	r6, [r4, #16]
 8006a3a:	60c5      	str	r5, [r0, #12]
 8006a3c:	f109 0310 	add.w	r3, r9, #16
 8006a40:	f109 0514 	add.w	r5, r9, #20
 8006a44:	f104 0e14 	add.w	lr, r4, #20
 8006a48:	f100 0b14 	add.w	fp, r0, #20
 8006a4c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006a50:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006a54:	9301      	str	r3, [sp, #4]
 8006a56:	46d9      	mov	r9, fp
 8006a58:	f04f 0c00 	mov.w	ip, #0
 8006a5c:	9b01      	ldr	r3, [sp, #4]
 8006a5e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006a62:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006a66:	9301      	str	r3, [sp, #4]
 8006a68:	fa1f f38a 	uxth.w	r3, sl
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	b283      	uxth	r3, r0
 8006a70:	1acb      	subs	r3, r1, r3
 8006a72:	0c00      	lsrs	r0, r0, #16
 8006a74:	4463      	add	r3, ip
 8006a76:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006a7a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a84:	4576      	cmp	r6, lr
 8006a86:	f849 3b04 	str.w	r3, [r9], #4
 8006a8a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a8e:	d8e5      	bhi.n	8006a5c <__mdiff+0x88>
 8006a90:	1b33      	subs	r3, r6, r4
 8006a92:	3b15      	subs	r3, #21
 8006a94:	f023 0303 	bic.w	r3, r3, #3
 8006a98:	3415      	adds	r4, #21
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	42a6      	cmp	r6, r4
 8006a9e:	bf38      	it	cc
 8006aa0:	2304      	movcc	r3, #4
 8006aa2:	441d      	add	r5, r3
 8006aa4:	445b      	add	r3, fp
 8006aa6:	461e      	mov	r6, r3
 8006aa8:	462c      	mov	r4, r5
 8006aaa:	4544      	cmp	r4, r8
 8006aac:	d30e      	bcc.n	8006acc <__mdiff+0xf8>
 8006aae:	f108 0103 	add.w	r1, r8, #3
 8006ab2:	1b49      	subs	r1, r1, r5
 8006ab4:	f021 0103 	bic.w	r1, r1, #3
 8006ab8:	3d03      	subs	r5, #3
 8006aba:	45a8      	cmp	r8, r5
 8006abc:	bf38      	it	cc
 8006abe:	2100      	movcc	r1, #0
 8006ac0:	440b      	add	r3, r1
 8006ac2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ac6:	b191      	cbz	r1, 8006aee <__mdiff+0x11a>
 8006ac8:	6117      	str	r7, [r2, #16]
 8006aca:	e79d      	b.n	8006a08 <__mdiff+0x34>
 8006acc:	f854 1b04 	ldr.w	r1, [r4], #4
 8006ad0:	46e6      	mov	lr, ip
 8006ad2:	0c08      	lsrs	r0, r1, #16
 8006ad4:	fa1c fc81 	uxtah	ip, ip, r1
 8006ad8:	4471      	add	r1, lr
 8006ada:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006ade:	b289      	uxth	r1, r1
 8006ae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ae4:	f846 1b04 	str.w	r1, [r6], #4
 8006ae8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006aec:	e7dd      	b.n	8006aaa <__mdiff+0xd6>
 8006aee:	3f01      	subs	r7, #1
 8006af0:	e7e7      	b.n	8006ac2 <__mdiff+0xee>
 8006af2:	bf00      	nop
 8006af4:	080077e0 	.word	0x080077e0
 8006af8:	080077f1 	.word	0x080077f1

08006afc <__d2b>:
 8006afc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b00:	460f      	mov	r7, r1
 8006b02:	2101      	movs	r1, #1
 8006b04:	ec59 8b10 	vmov	r8, r9, d0
 8006b08:	4616      	mov	r6, r2
 8006b0a:	f7ff fccd 	bl	80064a8 <_Balloc>
 8006b0e:	4604      	mov	r4, r0
 8006b10:	b930      	cbnz	r0, 8006b20 <__d2b+0x24>
 8006b12:	4602      	mov	r2, r0
 8006b14:	4b23      	ldr	r3, [pc, #140]	@ (8006ba4 <__d2b+0xa8>)
 8006b16:	4824      	ldr	r0, [pc, #144]	@ (8006ba8 <__d2b+0xac>)
 8006b18:	f240 310f 	movw	r1, #783	@ 0x30f
 8006b1c:	f000 fa82 	bl	8007024 <__assert_func>
 8006b20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006b24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b28:	b10d      	cbz	r5, 8006b2e <__d2b+0x32>
 8006b2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b2e:	9301      	str	r3, [sp, #4]
 8006b30:	f1b8 0300 	subs.w	r3, r8, #0
 8006b34:	d023      	beq.n	8006b7e <__d2b+0x82>
 8006b36:	4668      	mov	r0, sp
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	f7ff fd7c 	bl	8006636 <__lo0bits>
 8006b3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006b42:	b1d0      	cbz	r0, 8006b7a <__d2b+0x7e>
 8006b44:	f1c0 0320 	rsb	r3, r0, #32
 8006b48:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4c:	430b      	orrs	r3, r1
 8006b4e:	40c2      	lsrs	r2, r0
 8006b50:	6163      	str	r3, [r4, #20]
 8006b52:	9201      	str	r2, [sp, #4]
 8006b54:	9b01      	ldr	r3, [sp, #4]
 8006b56:	61a3      	str	r3, [r4, #24]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	bf0c      	ite	eq
 8006b5c:	2201      	moveq	r2, #1
 8006b5e:	2202      	movne	r2, #2
 8006b60:	6122      	str	r2, [r4, #16]
 8006b62:	b1a5      	cbz	r5, 8006b8e <__d2b+0x92>
 8006b64:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006b68:	4405      	add	r5, r0
 8006b6a:	603d      	str	r5, [r7, #0]
 8006b6c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006b70:	6030      	str	r0, [r6, #0]
 8006b72:	4620      	mov	r0, r4
 8006b74:	b003      	add	sp, #12
 8006b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b7a:	6161      	str	r1, [r4, #20]
 8006b7c:	e7ea      	b.n	8006b54 <__d2b+0x58>
 8006b7e:	a801      	add	r0, sp, #4
 8006b80:	f7ff fd59 	bl	8006636 <__lo0bits>
 8006b84:	9b01      	ldr	r3, [sp, #4]
 8006b86:	6163      	str	r3, [r4, #20]
 8006b88:	3020      	adds	r0, #32
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	e7e8      	b.n	8006b60 <__d2b+0x64>
 8006b8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b92:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006b96:	6038      	str	r0, [r7, #0]
 8006b98:	6918      	ldr	r0, [r3, #16]
 8006b9a:	f7ff fd2d 	bl	80065f8 <__hi0bits>
 8006b9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006ba2:	e7e5      	b.n	8006b70 <__d2b+0x74>
 8006ba4:	080077e0 	.word	0x080077e0
 8006ba8:	080077f1 	.word	0x080077f1

08006bac <__ssputs_r>:
 8006bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb0:	688e      	ldr	r6, [r1, #8]
 8006bb2:	461f      	mov	r7, r3
 8006bb4:	42be      	cmp	r6, r7
 8006bb6:	680b      	ldr	r3, [r1, #0]
 8006bb8:	4682      	mov	sl, r0
 8006bba:	460c      	mov	r4, r1
 8006bbc:	4690      	mov	r8, r2
 8006bbe:	d82d      	bhi.n	8006c1c <__ssputs_r+0x70>
 8006bc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006bc8:	d026      	beq.n	8006c18 <__ssputs_r+0x6c>
 8006bca:	6965      	ldr	r5, [r4, #20]
 8006bcc:	6909      	ldr	r1, [r1, #16]
 8006bce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bd2:	eba3 0901 	sub.w	r9, r3, r1
 8006bd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bda:	1c7b      	adds	r3, r7, #1
 8006bdc:	444b      	add	r3, r9
 8006bde:	106d      	asrs	r5, r5, #1
 8006be0:	429d      	cmp	r5, r3
 8006be2:	bf38      	it	cc
 8006be4:	461d      	movcc	r5, r3
 8006be6:	0553      	lsls	r3, r2, #21
 8006be8:	d527      	bpl.n	8006c3a <__ssputs_r+0x8e>
 8006bea:	4629      	mov	r1, r5
 8006bec:	f7ff fbd0 	bl	8006390 <_malloc_r>
 8006bf0:	4606      	mov	r6, r0
 8006bf2:	b360      	cbz	r0, 8006c4e <__ssputs_r+0xa2>
 8006bf4:	6921      	ldr	r1, [r4, #16]
 8006bf6:	464a      	mov	r2, r9
 8006bf8:	f000 fa06 	bl	8007008 <memcpy>
 8006bfc:	89a3      	ldrh	r3, [r4, #12]
 8006bfe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c06:	81a3      	strh	r3, [r4, #12]
 8006c08:	6126      	str	r6, [r4, #16]
 8006c0a:	6165      	str	r5, [r4, #20]
 8006c0c:	444e      	add	r6, r9
 8006c0e:	eba5 0509 	sub.w	r5, r5, r9
 8006c12:	6026      	str	r6, [r4, #0]
 8006c14:	60a5      	str	r5, [r4, #8]
 8006c16:	463e      	mov	r6, r7
 8006c18:	42be      	cmp	r6, r7
 8006c1a:	d900      	bls.n	8006c1e <__ssputs_r+0x72>
 8006c1c:	463e      	mov	r6, r7
 8006c1e:	6820      	ldr	r0, [r4, #0]
 8006c20:	4632      	mov	r2, r6
 8006c22:	4641      	mov	r1, r8
 8006c24:	f000 f9c6 	bl	8006fb4 <memmove>
 8006c28:	68a3      	ldr	r3, [r4, #8]
 8006c2a:	1b9b      	subs	r3, r3, r6
 8006c2c:	60a3      	str	r3, [r4, #8]
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	4433      	add	r3, r6
 8006c32:	6023      	str	r3, [r4, #0]
 8006c34:	2000      	movs	r0, #0
 8006c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c3a:	462a      	mov	r2, r5
 8006c3c:	f000 fa36 	bl	80070ac <_realloc_r>
 8006c40:	4606      	mov	r6, r0
 8006c42:	2800      	cmp	r0, #0
 8006c44:	d1e0      	bne.n	8006c08 <__ssputs_r+0x5c>
 8006c46:	6921      	ldr	r1, [r4, #16]
 8006c48:	4650      	mov	r0, sl
 8006c4a:	f7ff fb2d 	bl	80062a8 <_free_r>
 8006c4e:	230c      	movs	r3, #12
 8006c50:	f8ca 3000 	str.w	r3, [sl]
 8006c54:	89a3      	ldrh	r3, [r4, #12]
 8006c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c5a:	81a3      	strh	r3, [r4, #12]
 8006c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c60:	e7e9      	b.n	8006c36 <__ssputs_r+0x8a>
	...

08006c64 <_svfiprintf_r>:
 8006c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c68:	4698      	mov	r8, r3
 8006c6a:	898b      	ldrh	r3, [r1, #12]
 8006c6c:	061b      	lsls	r3, r3, #24
 8006c6e:	b09d      	sub	sp, #116	@ 0x74
 8006c70:	4607      	mov	r7, r0
 8006c72:	460d      	mov	r5, r1
 8006c74:	4614      	mov	r4, r2
 8006c76:	d510      	bpl.n	8006c9a <_svfiprintf_r+0x36>
 8006c78:	690b      	ldr	r3, [r1, #16]
 8006c7a:	b973      	cbnz	r3, 8006c9a <_svfiprintf_r+0x36>
 8006c7c:	2140      	movs	r1, #64	@ 0x40
 8006c7e:	f7ff fb87 	bl	8006390 <_malloc_r>
 8006c82:	6028      	str	r0, [r5, #0]
 8006c84:	6128      	str	r0, [r5, #16]
 8006c86:	b930      	cbnz	r0, 8006c96 <_svfiprintf_r+0x32>
 8006c88:	230c      	movs	r3, #12
 8006c8a:	603b      	str	r3, [r7, #0]
 8006c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c90:	b01d      	add	sp, #116	@ 0x74
 8006c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c96:	2340      	movs	r3, #64	@ 0x40
 8006c98:	616b      	str	r3, [r5, #20]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c9e:	2320      	movs	r3, #32
 8006ca0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ca4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ca8:	2330      	movs	r3, #48	@ 0x30
 8006caa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006e48 <_svfiprintf_r+0x1e4>
 8006cae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006cb2:	f04f 0901 	mov.w	r9, #1
 8006cb6:	4623      	mov	r3, r4
 8006cb8:	469a      	mov	sl, r3
 8006cba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cbe:	b10a      	cbz	r2, 8006cc4 <_svfiprintf_r+0x60>
 8006cc0:	2a25      	cmp	r2, #37	@ 0x25
 8006cc2:	d1f9      	bne.n	8006cb8 <_svfiprintf_r+0x54>
 8006cc4:	ebba 0b04 	subs.w	fp, sl, r4
 8006cc8:	d00b      	beq.n	8006ce2 <_svfiprintf_r+0x7e>
 8006cca:	465b      	mov	r3, fp
 8006ccc:	4622      	mov	r2, r4
 8006cce:	4629      	mov	r1, r5
 8006cd0:	4638      	mov	r0, r7
 8006cd2:	f7ff ff6b 	bl	8006bac <__ssputs_r>
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	f000 80a7 	beq.w	8006e2a <_svfiprintf_r+0x1c6>
 8006cdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cde:	445a      	add	r2, fp
 8006ce0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ce2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 809f 	beq.w	8006e2a <_svfiprintf_r+0x1c6>
 8006cec:	2300      	movs	r3, #0
 8006cee:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cf6:	f10a 0a01 	add.w	sl, sl, #1
 8006cfa:	9304      	str	r3, [sp, #16]
 8006cfc:	9307      	str	r3, [sp, #28]
 8006cfe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d02:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d04:	4654      	mov	r4, sl
 8006d06:	2205      	movs	r2, #5
 8006d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d0c:	484e      	ldr	r0, [pc, #312]	@ (8006e48 <_svfiprintf_r+0x1e4>)
 8006d0e:	f7f9 fa5f 	bl	80001d0 <memchr>
 8006d12:	9a04      	ldr	r2, [sp, #16]
 8006d14:	b9d8      	cbnz	r0, 8006d4e <_svfiprintf_r+0xea>
 8006d16:	06d0      	lsls	r0, r2, #27
 8006d18:	bf44      	itt	mi
 8006d1a:	2320      	movmi	r3, #32
 8006d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d20:	0711      	lsls	r1, r2, #28
 8006d22:	bf44      	itt	mi
 8006d24:	232b      	movmi	r3, #43	@ 0x2b
 8006d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d30:	d015      	beq.n	8006d5e <_svfiprintf_r+0xfa>
 8006d32:	9a07      	ldr	r2, [sp, #28]
 8006d34:	4654      	mov	r4, sl
 8006d36:	2000      	movs	r0, #0
 8006d38:	f04f 0c0a 	mov.w	ip, #10
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d42:	3b30      	subs	r3, #48	@ 0x30
 8006d44:	2b09      	cmp	r3, #9
 8006d46:	d94b      	bls.n	8006de0 <_svfiprintf_r+0x17c>
 8006d48:	b1b0      	cbz	r0, 8006d78 <_svfiprintf_r+0x114>
 8006d4a:	9207      	str	r2, [sp, #28]
 8006d4c:	e014      	b.n	8006d78 <_svfiprintf_r+0x114>
 8006d4e:	eba0 0308 	sub.w	r3, r0, r8
 8006d52:	fa09 f303 	lsl.w	r3, r9, r3
 8006d56:	4313      	orrs	r3, r2
 8006d58:	9304      	str	r3, [sp, #16]
 8006d5a:	46a2      	mov	sl, r4
 8006d5c:	e7d2      	b.n	8006d04 <_svfiprintf_r+0xa0>
 8006d5e:	9b03      	ldr	r3, [sp, #12]
 8006d60:	1d19      	adds	r1, r3, #4
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	9103      	str	r1, [sp, #12]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	bfbb      	ittet	lt
 8006d6a:	425b      	neglt	r3, r3
 8006d6c:	f042 0202 	orrlt.w	r2, r2, #2
 8006d70:	9307      	strge	r3, [sp, #28]
 8006d72:	9307      	strlt	r3, [sp, #28]
 8006d74:	bfb8      	it	lt
 8006d76:	9204      	strlt	r2, [sp, #16]
 8006d78:	7823      	ldrb	r3, [r4, #0]
 8006d7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d7c:	d10a      	bne.n	8006d94 <_svfiprintf_r+0x130>
 8006d7e:	7863      	ldrb	r3, [r4, #1]
 8006d80:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d82:	d132      	bne.n	8006dea <_svfiprintf_r+0x186>
 8006d84:	9b03      	ldr	r3, [sp, #12]
 8006d86:	1d1a      	adds	r2, r3, #4
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	9203      	str	r2, [sp, #12]
 8006d8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d90:	3402      	adds	r4, #2
 8006d92:	9305      	str	r3, [sp, #20]
 8006d94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006e58 <_svfiprintf_r+0x1f4>
 8006d98:	7821      	ldrb	r1, [r4, #0]
 8006d9a:	2203      	movs	r2, #3
 8006d9c:	4650      	mov	r0, sl
 8006d9e:	f7f9 fa17 	bl	80001d0 <memchr>
 8006da2:	b138      	cbz	r0, 8006db4 <_svfiprintf_r+0x150>
 8006da4:	9b04      	ldr	r3, [sp, #16]
 8006da6:	eba0 000a 	sub.w	r0, r0, sl
 8006daa:	2240      	movs	r2, #64	@ 0x40
 8006dac:	4082      	lsls	r2, r0
 8006dae:	4313      	orrs	r3, r2
 8006db0:	3401      	adds	r4, #1
 8006db2:	9304      	str	r3, [sp, #16]
 8006db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006db8:	4824      	ldr	r0, [pc, #144]	@ (8006e4c <_svfiprintf_r+0x1e8>)
 8006dba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006dbe:	2206      	movs	r2, #6
 8006dc0:	f7f9 fa06 	bl	80001d0 <memchr>
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d036      	beq.n	8006e36 <_svfiprintf_r+0x1d2>
 8006dc8:	4b21      	ldr	r3, [pc, #132]	@ (8006e50 <_svfiprintf_r+0x1ec>)
 8006dca:	bb1b      	cbnz	r3, 8006e14 <_svfiprintf_r+0x1b0>
 8006dcc:	9b03      	ldr	r3, [sp, #12]
 8006dce:	3307      	adds	r3, #7
 8006dd0:	f023 0307 	bic.w	r3, r3, #7
 8006dd4:	3308      	adds	r3, #8
 8006dd6:	9303      	str	r3, [sp, #12]
 8006dd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dda:	4433      	add	r3, r6
 8006ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dde:	e76a      	b.n	8006cb6 <_svfiprintf_r+0x52>
 8006de0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006de4:	460c      	mov	r4, r1
 8006de6:	2001      	movs	r0, #1
 8006de8:	e7a8      	b.n	8006d3c <_svfiprintf_r+0xd8>
 8006dea:	2300      	movs	r3, #0
 8006dec:	3401      	adds	r4, #1
 8006dee:	9305      	str	r3, [sp, #20]
 8006df0:	4619      	mov	r1, r3
 8006df2:	f04f 0c0a 	mov.w	ip, #10
 8006df6:	4620      	mov	r0, r4
 8006df8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dfc:	3a30      	subs	r2, #48	@ 0x30
 8006dfe:	2a09      	cmp	r2, #9
 8006e00:	d903      	bls.n	8006e0a <_svfiprintf_r+0x1a6>
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d0c6      	beq.n	8006d94 <_svfiprintf_r+0x130>
 8006e06:	9105      	str	r1, [sp, #20]
 8006e08:	e7c4      	b.n	8006d94 <_svfiprintf_r+0x130>
 8006e0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e0e:	4604      	mov	r4, r0
 8006e10:	2301      	movs	r3, #1
 8006e12:	e7f0      	b.n	8006df6 <_svfiprintf_r+0x192>
 8006e14:	ab03      	add	r3, sp, #12
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	462a      	mov	r2, r5
 8006e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8006e54 <_svfiprintf_r+0x1f0>)
 8006e1c:	a904      	add	r1, sp, #16
 8006e1e:	4638      	mov	r0, r7
 8006e20:	f7fd fe98 	bl	8004b54 <_printf_float>
 8006e24:	1c42      	adds	r2, r0, #1
 8006e26:	4606      	mov	r6, r0
 8006e28:	d1d6      	bne.n	8006dd8 <_svfiprintf_r+0x174>
 8006e2a:	89ab      	ldrh	r3, [r5, #12]
 8006e2c:	065b      	lsls	r3, r3, #25
 8006e2e:	f53f af2d 	bmi.w	8006c8c <_svfiprintf_r+0x28>
 8006e32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e34:	e72c      	b.n	8006c90 <_svfiprintf_r+0x2c>
 8006e36:	ab03      	add	r3, sp, #12
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	462a      	mov	r2, r5
 8006e3c:	4b05      	ldr	r3, [pc, #20]	@ (8006e54 <_svfiprintf_r+0x1f0>)
 8006e3e:	a904      	add	r1, sp, #16
 8006e40:	4638      	mov	r0, r7
 8006e42:	f7fe f91f 	bl	8005084 <_printf_i>
 8006e46:	e7ed      	b.n	8006e24 <_svfiprintf_r+0x1c0>
 8006e48:	08007948 	.word	0x08007948
 8006e4c:	08007952 	.word	0x08007952
 8006e50:	08004b55 	.word	0x08004b55
 8006e54:	08006bad 	.word	0x08006bad
 8006e58:	0800794e 	.word	0x0800794e

08006e5c <__sflush_r>:
 8006e5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e64:	0716      	lsls	r6, r2, #28
 8006e66:	4605      	mov	r5, r0
 8006e68:	460c      	mov	r4, r1
 8006e6a:	d454      	bmi.n	8006f16 <__sflush_r+0xba>
 8006e6c:	684b      	ldr	r3, [r1, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	dc02      	bgt.n	8006e78 <__sflush_r+0x1c>
 8006e72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	dd48      	ble.n	8006f0a <__sflush_r+0xae>
 8006e78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e7a:	2e00      	cmp	r6, #0
 8006e7c:	d045      	beq.n	8006f0a <__sflush_r+0xae>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006e84:	682f      	ldr	r7, [r5, #0]
 8006e86:	6a21      	ldr	r1, [r4, #32]
 8006e88:	602b      	str	r3, [r5, #0]
 8006e8a:	d030      	beq.n	8006eee <__sflush_r+0x92>
 8006e8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006e8e:	89a3      	ldrh	r3, [r4, #12]
 8006e90:	0759      	lsls	r1, r3, #29
 8006e92:	d505      	bpl.n	8006ea0 <__sflush_r+0x44>
 8006e94:	6863      	ldr	r3, [r4, #4]
 8006e96:	1ad2      	subs	r2, r2, r3
 8006e98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e9a:	b10b      	cbz	r3, 8006ea0 <__sflush_r+0x44>
 8006e9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e9e:	1ad2      	subs	r2, r2, r3
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ea4:	6a21      	ldr	r1, [r4, #32]
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	47b0      	blx	r6
 8006eaa:	1c43      	adds	r3, r0, #1
 8006eac:	89a3      	ldrh	r3, [r4, #12]
 8006eae:	d106      	bne.n	8006ebe <__sflush_r+0x62>
 8006eb0:	6829      	ldr	r1, [r5, #0]
 8006eb2:	291d      	cmp	r1, #29
 8006eb4:	d82b      	bhi.n	8006f0e <__sflush_r+0xb2>
 8006eb6:	4a2a      	ldr	r2, [pc, #168]	@ (8006f60 <__sflush_r+0x104>)
 8006eb8:	410a      	asrs	r2, r1
 8006eba:	07d6      	lsls	r6, r2, #31
 8006ebc:	d427      	bmi.n	8006f0e <__sflush_r+0xb2>
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	6062      	str	r2, [r4, #4]
 8006ec2:	04d9      	lsls	r1, r3, #19
 8006ec4:	6922      	ldr	r2, [r4, #16]
 8006ec6:	6022      	str	r2, [r4, #0]
 8006ec8:	d504      	bpl.n	8006ed4 <__sflush_r+0x78>
 8006eca:	1c42      	adds	r2, r0, #1
 8006ecc:	d101      	bne.n	8006ed2 <__sflush_r+0x76>
 8006ece:	682b      	ldr	r3, [r5, #0]
 8006ed0:	b903      	cbnz	r3, 8006ed4 <__sflush_r+0x78>
 8006ed2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006ed4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ed6:	602f      	str	r7, [r5, #0]
 8006ed8:	b1b9      	cbz	r1, 8006f0a <__sflush_r+0xae>
 8006eda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ede:	4299      	cmp	r1, r3
 8006ee0:	d002      	beq.n	8006ee8 <__sflush_r+0x8c>
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	f7ff f9e0 	bl	80062a8 <_free_r>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	6363      	str	r3, [r4, #52]	@ 0x34
 8006eec:	e00d      	b.n	8006f0a <__sflush_r+0xae>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	47b0      	blx	r6
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	1c50      	adds	r0, r2, #1
 8006ef8:	d1c9      	bne.n	8006e8e <__sflush_r+0x32>
 8006efa:	682b      	ldr	r3, [r5, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d0c6      	beq.n	8006e8e <__sflush_r+0x32>
 8006f00:	2b1d      	cmp	r3, #29
 8006f02:	d001      	beq.n	8006f08 <__sflush_r+0xac>
 8006f04:	2b16      	cmp	r3, #22
 8006f06:	d11e      	bne.n	8006f46 <__sflush_r+0xea>
 8006f08:	602f      	str	r7, [r5, #0]
 8006f0a:	2000      	movs	r0, #0
 8006f0c:	e022      	b.n	8006f54 <__sflush_r+0xf8>
 8006f0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f12:	b21b      	sxth	r3, r3
 8006f14:	e01b      	b.n	8006f4e <__sflush_r+0xf2>
 8006f16:	690f      	ldr	r7, [r1, #16]
 8006f18:	2f00      	cmp	r7, #0
 8006f1a:	d0f6      	beq.n	8006f0a <__sflush_r+0xae>
 8006f1c:	0793      	lsls	r3, r2, #30
 8006f1e:	680e      	ldr	r6, [r1, #0]
 8006f20:	bf08      	it	eq
 8006f22:	694b      	ldreq	r3, [r1, #20]
 8006f24:	600f      	str	r7, [r1, #0]
 8006f26:	bf18      	it	ne
 8006f28:	2300      	movne	r3, #0
 8006f2a:	eba6 0807 	sub.w	r8, r6, r7
 8006f2e:	608b      	str	r3, [r1, #8]
 8006f30:	f1b8 0f00 	cmp.w	r8, #0
 8006f34:	dde9      	ble.n	8006f0a <__sflush_r+0xae>
 8006f36:	6a21      	ldr	r1, [r4, #32]
 8006f38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006f3a:	4643      	mov	r3, r8
 8006f3c:	463a      	mov	r2, r7
 8006f3e:	4628      	mov	r0, r5
 8006f40:	47b0      	blx	r6
 8006f42:	2800      	cmp	r0, #0
 8006f44:	dc08      	bgt.n	8006f58 <__sflush_r+0xfc>
 8006f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f4e:	81a3      	strh	r3, [r4, #12]
 8006f50:	f04f 30ff 	mov.w	r0, #4294967295
 8006f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f58:	4407      	add	r7, r0
 8006f5a:	eba8 0800 	sub.w	r8, r8, r0
 8006f5e:	e7e7      	b.n	8006f30 <__sflush_r+0xd4>
 8006f60:	dfbffffe 	.word	0xdfbffffe

08006f64 <_fflush_r>:
 8006f64:	b538      	push	{r3, r4, r5, lr}
 8006f66:	690b      	ldr	r3, [r1, #16]
 8006f68:	4605      	mov	r5, r0
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	b913      	cbnz	r3, 8006f74 <_fflush_r+0x10>
 8006f6e:	2500      	movs	r5, #0
 8006f70:	4628      	mov	r0, r5
 8006f72:	bd38      	pop	{r3, r4, r5, pc}
 8006f74:	b118      	cbz	r0, 8006f7e <_fflush_r+0x1a>
 8006f76:	6a03      	ldr	r3, [r0, #32]
 8006f78:	b90b      	cbnz	r3, 8006f7e <_fflush_r+0x1a>
 8006f7a:	f7fe fa2f 	bl	80053dc <__sinit>
 8006f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d0f3      	beq.n	8006f6e <_fflush_r+0xa>
 8006f86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f88:	07d0      	lsls	r0, r2, #31
 8006f8a:	d404      	bmi.n	8006f96 <_fflush_r+0x32>
 8006f8c:	0599      	lsls	r1, r3, #22
 8006f8e:	d402      	bmi.n	8006f96 <_fflush_r+0x32>
 8006f90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f92:	f7fe fb3a 	bl	800560a <__retarget_lock_acquire_recursive>
 8006f96:	4628      	mov	r0, r5
 8006f98:	4621      	mov	r1, r4
 8006f9a:	f7ff ff5f 	bl	8006e5c <__sflush_r>
 8006f9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fa0:	07da      	lsls	r2, r3, #31
 8006fa2:	4605      	mov	r5, r0
 8006fa4:	d4e4      	bmi.n	8006f70 <_fflush_r+0xc>
 8006fa6:	89a3      	ldrh	r3, [r4, #12]
 8006fa8:	059b      	lsls	r3, r3, #22
 8006faa:	d4e1      	bmi.n	8006f70 <_fflush_r+0xc>
 8006fac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fae:	f7fe fb2d 	bl	800560c <__retarget_lock_release_recursive>
 8006fb2:	e7dd      	b.n	8006f70 <_fflush_r+0xc>

08006fb4 <memmove>:
 8006fb4:	4288      	cmp	r0, r1
 8006fb6:	b510      	push	{r4, lr}
 8006fb8:	eb01 0402 	add.w	r4, r1, r2
 8006fbc:	d902      	bls.n	8006fc4 <memmove+0x10>
 8006fbe:	4284      	cmp	r4, r0
 8006fc0:	4623      	mov	r3, r4
 8006fc2:	d807      	bhi.n	8006fd4 <memmove+0x20>
 8006fc4:	1e43      	subs	r3, r0, #1
 8006fc6:	42a1      	cmp	r1, r4
 8006fc8:	d008      	beq.n	8006fdc <memmove+0x28>
 8006fca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fd2:	e7f8      	b.n	8006fc6 <memmove+0x12>
 8006fd4:	4402      	add	r2, r0
 8006fd6:	4601      	mov	r1, r0
 8006fd8:	428a      	cmp	r2, r1
 8006fda:	d100      	bne.n	8006fde <memmove+0x2a>
 8006fdc:	bd10      	pop	{r4, pc}
 8006fde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fe6:	e7f7      	b.n	8006fd8 <memmove+0x24>

08006fe8 <_sbrk_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	4d06      	ldr	r5, [pc, #24]	@ (8007004 <_sbrk_r+0x1c>)
 8006fec:	2300      	movs	r3, #0
 8006fee:	4604      	mov	r4, r0
 8006ff0:	4608      	mov	r0, r1
 8006ff2:	602b      	str	r3, [r5, #0]
 8006ff4:	f7fa fb5e 	bl	80016b4 <_sbrk>
 8006ff8:	1c43      	adds	r3, r0, #1
 8006ffa:	d102      	bne.n	8007002 <_sbrk_r+0x1a>
 8006ffc:	682b      	ldr	r3, [r5, #0]
 8006ffe:	b103      	cbz	r3, 8007002 <_sbrk_r+0x1a>
 8007000:	6023      	str	r3, [r4, #0]
 8007002:	bd38      	pop	{r3, r4, r5, pc}
 8007004:	20000434 	.word	0x20000434

08007008 <memcpy>:
 8007008:	440a      	add	r2, r1
 800700a:	4291      	cmp	r1, r2
 800700c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007010:	d100      	bne.n	8007014 <memcpy+0xc>
 8007012:	4770      	bx	lr
 8007014:	b510      	push	{r4, lr}
 8007016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800701a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800701e:	4291      	cmp	r1, r2
 8007020:	d1f9      	bne.n	8007016 <memcpy+0xe>
 8007022:	bd10      	pop	{r4, pc}

08007024 <__assert_func>:
 8007024:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007026:	4614      	mov	r4, r2
 8007028:	461a      	mov	r2, r3
 800702a:	4b09      	ldr	r3, [pc, #36]	@ (8007050 <__assert_func+0x2c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4605      	mov	r5, r0
 8007030:	68d8      	ldr	r0, [r3, #12]
 8007032:	b954      	cbnz	r4, 800704a <__assert_func+0x26>
 8007034:	4b07      	ldr	r3, [pc, #28]	@ (8007054 <__assert_func+0x30>)
 8007036:	461c      	mov	r4, r3
 8007038:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800703c:	9100      	str	r1, [sp, #0]
 800703e:	462b      	mov	r3, r5
 8007040:	4905      	ldr	r1, [pc, #20]	@ (8007058 <__assert_func+0x34>)
 8007042:	f000 f86f 	bl	8007124 <fiprintf>
 8007046:	f000 f87f 	bl	8007148 <abort>
 800704a:	4b04      	ldr	r3, [pc, #16]	@ (800705c <__assert_func+0x38>)
 800704c:	e7f4      	b.n	8007038 <__assert_func+0x14>
 800704e:	bf00      	nop
 8007050:	20000018 	.word	0x20000018
 8007054:	0800799e 	.word	0x0800799e
 8007058:	08007970 	.word	0x08007970
 800705c:	08007963 	.word	0x08007963

08007060 <_calloc_r>:
 8007060:	b570      	push	{r4, r5, r6, lr}
 8007062:	fba1 5402 	umull	r5, r4, r1, r2
 8007066:	b93c      	cbnz	r4, 8007078 <_calloc_r+0x18>
 8007068:	4629      	mov	r1, r5
 800706a:	f7ff f991 	bl	8006390 <_malloc_r>
 800706e:	4606      	mov	r6, r0
 8007070:	b928      	cbnz	r0, 800707e <_calloc_r+0x1e>
 8007072:	2600      	movs	r6, #0
 8007074:	4630      	mov	r0, r6
 8007076:	bd70      	pop	{r4, r5, r6, pc}
 8007078:	220c      	movs	r2, #12
 800707a:	6002      	str	r2, [r0, #0]
 800707c:	e7f9      	b.n	8007072 <_calloc_r+0x12>
 800707e:	462a      	mov	r2, r5
 8007080:	4621      	mov	r1, r4
 8007082:	f7fe fa44 	bl	800550e <memset>
 8007086:	e7f5      	b.n	8007074 <_calloc_r+0x14>

08007088 <__ascii_mbtowc>:
 8007088:	b082      	sub	sp, #8
 800708a:	b901      	cbnz	r1, 800708e <__ascii_mbtowc+0x6>
 800708c:	a901      	add	r1, sp, #4
 800708e:	b142      	cbz	r2, 80070a2 <__ascii_mbtowc+0x1a>
 8007090:	b14b      	cbz	r3, 80070a6 <__ascii_mbtowc+0x1e>
 8007092:	7813      	ldrb	r3, [r2, #0]
 8007094:	600b      	str	r3, [r1, #0]
 8007096:	7812      	ldrb	r2, [r2, #0]
 8007098:	1e10      	subs	r0, r2, #0
 800709a:	bf18      	it	ne
 800709c:	2001      	movne	r0, #1
 800709e:	b002      	add	sp, #8
 80070a0:	4770      	bx	lr
 80070a2:	4610      	mov	r0, r2
 80070a4:	e7fb      	b.n	800709e <__ascii_mbtowc+0x16>
 80070a6:	f06f 0001 	mvn.w	r0, #1
 80070aa:	e7f8      	b.n	800709e <__ascii_mbtowc+0x16>

080070ac <_realloc_r>:
 80070ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070b0:	4680      	mov	r8, r0
 80070b2:	4615      	mov	r5, r2
 80070b4:	460c      	mov	r4, r1
 80070b6:	b921      	cbnz	r1, 80070c2 <_realloc_r+0x16>
 80070b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070bc:	4611      	mov	r1, r2
 80070be:	f7ff b967 	b.w	8006390 <_malloc_r>
 80070c2:	b92a      	cbnz	r2, 80070d0 <_realloc_r+0x24>
 80070c4:	f7ff f8f0 	bl	80062a8 <_free_r>
 80070c8:	2400      	movs	r4, #0
 80070ca:	4620      	mov	r0, r4
 80070cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070d0:	f000 f841 	bl	8007156 <_malloc_usable_size_r>
 80070d4:	4285      	cmp	r5, r0
 80070d6:	4606      	mov	r6, r0
 80070d8:	d802      	bhi.n	80070e0 <_realloc_r+0x34>
 80070da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80070de:	d8f4      	bhi.n	80070ca <_realloc_r+0x1e>
 80070e0:	4629      	mov	r1, r5
 80070e2:	4640      	mov	r0, r8
 80070e4:	f7ff f954 	bl	8006390 <_malloc_r>
 80070e8:	4607      	mov	r7, r0
 80070ea:	2800      	cmp	r0, #0
 80070ec:	d0ec      	beq.n	80070c8 <_realloc_r+0x1c>
 80070ee:	42b5      	cmp	r5, r6
 80070f0:	462a      	mov	r2, r5
 80070f2:	4621      	mov	r1, r4
 80070f4:	bf28      	it	cs
 80070f6:	4632      	movcs	r2, r6
 80070f8:	f7ff ff86 	bl	8007008 <memcpy>
 80070fc:	4621      	mov	r1, r4
 80070fe:	4640      	mov	r0, r8
 8007100:	f7ff f8d2 	bl	80062a8 <_free_r>
 8007104:	463c      	mov	r4, r7
 8007106:	e7e0      	b.n	80070ca <_realloc_r+0x1e>

08007108 <__ascii_wctomb>:
 8007108:	4603      	mov	r3, r0
 800710a:	4608      	mov	r0, r1
 800710c:	b141      	cbz	r1, 8007120 <__ascii_wctomb+0x18>
 800710e:	2aff      	cmp	r2, #255	@ 0xff
 8007110:	d904      	bls.n	800711c <__ascii_wctomb+0x14>
 8007112:	228a      	movs	r2, #138	@ 0x8a
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	f04f 30ff 	mov.w	r0, #4294967295
 800711a:	4770      	bx	lr
 800711c:	700a      	strb	r2, [r1, #0]
 800711e:	2001      	movs	r0, #1
 8007120:	4770      	bx	lr
	...

08007124 <fiprintf>:
 8007124:	b40e      	push	{r1, r2, r3}
 8007126:	b503      	push	{r0, r1, lr}
 8007128:	4601      	mov	r1, r0
 800712a:	ab03      	add	r3, sp, #12
 800712c:	4805      	ldr	r0, [pc, #20]	@ (8007144 <fiprintf+0x20>)
 800712e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007132:	6800      	ldr	r0, [r0, #0]
 8007134:	9301      	str	r3, [sp, #4]
 8007136:	f000 f83f 	bl	80071b8 <_vfiprintf_r>
 800713a:	b002      	add	sp, #8
 800713c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007140:	b003      	add	sp, #12
 8007142:	4770      	bx	lr
 8007144:	20000018 	.word	0x20000018

08007148 <abort>:
 8007148:	b508      	push	{r3, lr}
 800714a:	2006      	movs	r0, #6
 800714c:	f000 fa08 	bl	8007560 <raise>
 8007150:	2001      	movs	r0, #1
 8007152:	f7fa fa37 	bl	80015c4 <_exit>

08007156 <_malloc_usable_size_r>:
 8007156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800715a:	1f18      	subs	r0, r3, #4
 800715c:	2b00      	cmp	r3, #0
 800715e:	bfbc      	itt	lt
 8007160:	580b      	ldrlt	r3, [r1, r0]
 8007162:	18c0      	addlt	r0, r0, r3
 8007164:	4770      	bx	lr

08007166 <__sfputc_r>:
 8007166:	6893      	ldr	r3, [r2, #8]
 8007168:	3b01      	subs	r3, #1
 800716a:	2b00      	cmp	r3, #0
 800716c:	b410      	push	{r4}
 800716e:	6093      	str	r3, [r2, #8]
 8007170:	da08      	bge.n	8007184 <__sfputc_r+0x1e>
 8007172:	6994      	ldr	r4, [r2, #24]
 8007174:	42a3      	cmp	r3, r4
 8007176:	db01      	blt.n	800717c <__sfputc_r+0x16>
 8007178:	290a      	cmp	r1, #10
 800717a:	d103      	bne.n	8007184 <__sfputc_r+0x1e>
 800717c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007180:	f000 b932 	b.w	80073e8 <__swbuf_r>
 8007184:	6813      	ldr	r3, [r2, #0]
 8007186:	1c58      	adds	r0, r3, #1
 8007188:	6010      	str	r0, [r2, #0]
 800718a:	7019      	strb	r1, [r3, #0]
 800718c:	4608      	mov	r0, r1
 800718e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007192:	4770      	bx	lr

08007194 <__sfputs_r>:
 8007194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007196:	4606      	mov	r6, r0
 8007198:	460f      	mov	r7, r1
 800719a:	4614      	mov	r4, r2
 800719c:	18d5      	adds	r5, r2, r3
 800719e:	42ac      	cmp	r4, r5
 80071a0:	d101      	bne.n	80071a6 <__sfputs_r+0x12>
 80071a2:	2000      	movs	r0, #0
 80071a4:	e007      	b.n	80071b6 <__sfputs_r+0x22>
 80071a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071aa:	463a      	mov	r2, r7
 80071ac:	4630      	mov	r0, r6
 80071ae:	f7ff ffda 	bl	8007166 <__sfputc_r>
 80071b2:	1c43      	adds	r3, r0, #1
 80071b4:	d1f3      	bne.n	800719e <__sfputs_r+0xa>
 80071b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080071b8 <_vfiprintf_r>:
 80071b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071bc:	460d      	mov	r5, r1
 80071be:	b09d      	sub	sp, #116	@ 0x74
 80071c0:	4614      	mov	r4, r2
 80071c2:	4698      	mov	r8, r3
 80071c4:	4606      	mov	r6, r0
 80071c6:	b118      	cbz	r0, 80071d0 <_vfiprintf_r+0x18>
 80071c8:	6a03      	ldr	r3, [r0, #32]
 80071ca:	b90b      	cbnz	r3, 80071d0 <_vfiprintf_r+0x18>
 80071cc:	f7fe f906 	bl	80053dc <__sinit>
 80071d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071d2:	07d9      	lsls	r1, r3, #31
 80071d4:	d405      	bmi.n	80071e2 <_vfiprintf_r+0x2a>
 80071d6:	89ab      	ldrh	r3, [r5, #12]
 80071d8:	059a      	lsls	r2, r3, #22
 80071da:	d402      	bmi.n	80071e2 <_vfiprintf_r+0x2a>
 80071dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071de:	f7fe fa14 	bl	800560a <__retarget_lock_acquire_recursive>
 80071e2:	89ab      	ldrh	r3, [r5, #12]
 80071e4:	071b      	lsls	r3, r3, #28
 80071e6:	d501      	bpl.n	80071ec <_vfiprintf_r+0x34>
 80071e8:	692b      	ldr	r3, [r5, #16]
 80071ea:	b99b      	cbnz	r3, 8007214 <_vfiprintf_r+0x5c>
 80071ec:	4629      	mov	r1, r5
 80071ee:	4630      	mov	r0, r6
 80071f0:	f000 f938 	bl	8007464 <__swsetup_r>
 80071f4:	b170      	cbz	r0, 8007214 <_vfiprintf_r+0x5c>
 80071f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071f8:	07dc      	lsls	r4, r3, #31
 80071fa:	d504      	bpl.n	8007206 <_vfiprintf_r+0x4e>
 80071fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007200:	b01d      	add	sp, #116	@ 0x74
 8007202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007206:	89ab      	ldrh	r3, [r5, #12]
 8007208:	0598      	lsls	r0, r3, #22
 800720a:	d4f7      	bmi.n	80071fc <_vfiprintf_r+0x44>
 800720c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800720e:	f7fe f9fd 	bl	800560c <__retarget_lock_release_recursive>
 8007212:	e7f3      	b.n	80071fc <_vfiprintf_r+0x44>
 8007214:	2300      	movs	r3, #0
 8007216:	9309      	str	r3, [sp, #36]	@ 0x24
 8007218:	2320      	movs	r3, #32
 800721a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800721e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007222:	2330      	movs	r3, #48	@ 0x30
 8007224:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80073d4 <_vfiprintf_r+0x21c>
 8007228:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800722c:	f04f 0901 	mov.w	r9, #1
 8007230:	4623      	mov	r3, r4
 8007232:	469a      	mov	sl, r3
 8007234:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007238:	b10a      	cbz	r2, 800723e <_vfiprintf_r+0x86>
 800723a:	2a25      	cmp	r2, #37	@ 0x25
 800723c:	d1f9      	bne.n	8007232 <_vfiprintf_r+0x7a>
 800723e:	ebba 0b04 	subs.w	fp, sl, r4
 8007242:	d00b      	beq.n	800725c <_vfiprintf_r+0xa4>
 8007244:	465b      	mov	r3, fp
 8007246:	4622      	mov	r2, r4
 8007248:	4629      	mov	r1, r5
 800724a:	4630      	mov	r0, r6
 800724c:	f7ff ffa2 	bl	8007194 <__sfputs_r>
 8007250:	3001      	adds	r0, #1
 8007252:	f000 80a7 	beq.w	80073a4 <_vfiprintf_r+0x1ec>
 8007256:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007258:	445a      	add	r2, fp
 800725a:	9209      	str	r2, [sp, #36]	@ 0x24
 800725c:	f89a 3000 	ldrb.w	r3, [sl]
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 809f 	beq.w	80073a4 <_vfiprintf_r+0x1ec>
 8007266:	2300      	movs	r3, #0
 8007268:	f04f 32ff 	mov.w	r2, #4294967295
 800726c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007270:	f10a 0a01 	add.w	sl, sl, #1
 8007274:	9304      	str	r3, [sp, #16]
 8007276:	9307      	str	r3, [sp, #28]
 8007278:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800727c:	931a      	str	r3, [sp, #104]	@ 0x68
 800727e:	4654      	mov	r4, sl
 8007280:	2205      	movs	r2, #5
 8007282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007286:	4853      	ldr	r0, [pc, #332]	@ (80073d4 <_vfiprintf_r+0x21c>)
 8007288:	f7f8 ffa2 	bl	80001d0 <memchr>
 800728c:	9a04      	ldr	r2, [sp, #16]
 800728e:	b9d8      	cbnz	r0, 80072c8 <_vfiprintf_r+0x110>
 8007290:	06d1      	lsls	r1, r2, #27
 8007292:	bf44      	itt	mi
 8007294:	2320      	movmi	r3, #32
 8007296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800729a:	0713      	lsls	r3, r2, #28
 800729c:	bf44      	itt	mi
 800729e:	232b      	movmi	r3, #43	@ 0x2b
 80072a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072a4:	f89a 3000 	ldrb.w	r3, [sl]
 80072a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80072aa:	d015      	beq.n	80072d8 <_vfiprintf_r+0x120>
 80072ac:	9a07      	ldr	r2, [sp, #28]
 80072ae:	4654      	mov	r4, sl
 80072b0:	2000      	movs	r0, #0
 80072b2:	f04f 0c0a 	mov.w	ip, #10
 80072b6:	4621      	mov	r1, r4
 80072b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072bc:	3b30      	subs	r3, #48	@ 0x30
 80072be:	2b09      	cmp	r3, #9
 80072c0:	d94b      	bls.n	800735a <_vfiprintf_r+0x1a2>
 80072c2:	b1b0      	cbz	r0, 80072f2 <_vfiprintf_r+0x13a>
 80072c4:	9207      	str	r2, [sp, #28]
 80072c6:	e014      	b.n	80072f2 <_vfiprintf_r+0x13a>
 80072c8:	eba0 0308 	sub.w	r3, r0, r8
 80072cc:	fa09 f303 	lsl.w	r3, r9, r3
 80072d0:	4313      	orrs	r3, r2
 80072d2:	9304      	str	r3, [sp, #16]
 80072d4:	46a2      	mov	sl, r4
 80072d6:	e7d2      	b.n	800727e <_vfiprintf_r+0xc6>
 80072d8:	9b03      	ldr	r3, [sp, #12]
 80072da:	1d19      	adds	r1, r3, #4
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	9103      	str	r1, [sp, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	bfbb      	ittet	lt
 80072e4:	425b      	neglt	r3, r3
 80072e6:	f042 0202 	orrlt.w	r2, r2, #2
 80072ea:	9307      	strge	r3, [sp, #28]
 80072ec:	9307      	strlt	r3, [sp, #28]
 80072ee:	bfb8      	it	lt
 80072f0:	9204      	strlt	r2, [sp, #16]
 80072f2:	7823      	ldrb	r3, [r4, #0]
 80072f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80072f6:	d10a      	bne.n	800730e <_vfiprintf_r+0x156>
 80072f8:	7863      	ldrb	r3, [r4, #1]
 80072fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80072fc:	d132      	bne.n	8007364 <_vfiprintf_r+0x1ac>
 80072fe:	9b03      	ldr	r3, [sp, #12]
 8007300:	1d1a      	adds	r2, r3, #4
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	9203      	str	r2, [sp, #12]
 8007306:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800730a:	3402      	adds	r4, #2
 800730c:	9305      	str	r3, [sp, #20]
 800730e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80073e4 <_vfiprintf_r+0x22c>
 8007312:	7821      	ldrb	r1, [r4, #0]
 8007314:	2203      	movs	r2, #3
 8007316:	4650      	mov	r0, sl
 8007318:	f7f8 ff5a 	bl	80001d0 <memchr>
 800731c:	b138      	cbz	r0, 800732e <_vfiprintf_r+0x176>
 800731e:	9b04      	ldr	r3, [sp, #16]
 8007320:	eba0 000a 	sub.w	r0, r0, sl
 8007324:	2240      	movs	r2, #64	@ 0x40
 8007326:	4082      	lsls	r2, r0
 8007328:	4313      	orrs	r3, r2
 800732a:	3401      	adds	r4, #1
 800732c:	9304      	str	r3, [sp, #16]
 800732e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007332:	4829      	ldr	r0, [pc, #164]	@ (80073d8 <_vfiprintf_r+0x220>)
 8007334:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007338:	2206      	movs	r2, #6
 800733a:	f7f8 ff49 	bl	80001d0 <memchr>
 800733e:	2800      	cmp	r0, #0
 8007340:	d03f      	beq.n	80073c2 <_vfiprintf_r+0x20a>
 8007342:	4b26      	ldr	r3, [pc, #152]	@ (80073dc <_vfiprintf_r+0x224>)
 8007344:	bb1b      	cbnz	r3, 800738e <_vfiprintf_r+0x1d6>
 8007346:	9b03      	ldr	r3, [sp, #12]
 8007348:	3307      	adds	r3, #7
 800734a:	f023 0307 	bic.w	r3, r3, #7
 800734e:	3308      	adds	r3, #8
 8007350:	9303      	str	r3, [sp, #12]
 8007352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007354:	443b      	add	r3, r7
 8007356:	9309      	str	r3, [sp, #36]	@ 0x24
 8007358:	e76a      	b.n	8007230 <_vfiprintf_r+0x78>
 800735a:	fb0c 3202 	mla	r2, ip, r2, r3
 800735e:	460c      	mov	r4, r1
 8007360:	2001      	movs	r0, #1
 8007362:	e7a8      	b.n	80072b6 <_vfiprintf_r+0xfe>
 8007364:	2300      	movs	r3, #0
 8007366:	3401      	adds	r4, #1
 8007368:	9305      	str	r3, [sp, #20]
 800736a:	4619      	mov	r1, r3
 800736c:	f04f 0c0a 	mov.w	ip, #10
 8007370:	4620      	mov	r0, r4
 8007372:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007376:	3a30      	subs	r2, #48	@ 0x30
 8007378:	2a09      	cmp	r2, #9
 800737a:	d903      	bls.n	8007384 <_vfiprintf_r+0x1cc>
 800737c:	2b00      	cmp	r3, #0
 800737e:	d0c6      	beq.n	800730e <_vfiprintf_r+0x156>
 8007380:	9105      	str	r1, [sp, #20]
 8007382:	e7c4      	b.n	800730e <_vfiprintf_r+0x156>
 8007384:	fb0c 2101 	mla	r1, ip, r1, r2
 8007388:	4604      	mov	r4, r0
 800738a:	2301      	movs	r3, #1
 800738c:	e7f0      	b.n	8007370 <_vfiprintf_r+0x1b8>
 800738e:	ab03      	add	r3, sp, #12
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	462a      	mov	r2, r5
 8007394:	4b12      	ldr	r3, [pc, #72]	@ (80073e0 <_vfiprintf_r+0x228>)
 8007396:	a904      	add	r1, sp, #16
 8007398:	4630      	mov	r0, r6
 800739a:	f7fd fbdb 	bl	8004b54 <_printf_float>
 800739e:	4607      	mov	r7, r0
 80073a0:	1c78      	adds	r0, r7, #1
 80073a2:	d1d6      	bne.n	8007352 <_vfiprintf_r+0x19a>
 80073a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073a6:	07d9      	lsls	r1, r3, #31
 80073a8:	d405      	bmi.n	80073b6 <_vfiprintf_r+0x1fe>
 80073aa:	89ab      	ldrh	r3, [r5, #12]
 80073ac:	059a      	lsls	r2, r3, #22
 80073ae:	d402      	bmi.n	80073b6 <_vfiprintf_r+0x1fe>
 80073b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073b2:	f7fe f92b 	bl	800560c <__retarget_lock_release_recursive>
 80073b6:	89ab      	ldrh	r3, [r5, #12]
 80073b8:	065b      	lsls	r3, r3, #25
 80073ba:	f53f af1f 	bmi.w	80071fc <_vfiprintf_r+0x44>
 80073be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073c0:	e71e      	b.n	8007200 <_vfiprintf_r+0x48>
 80073c2:	ab03      	add	r3, sp, #12
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	462a      	mov	r2, r5
 80073c8:	4b05      	ldr	r3, [pc, #20]	@ (80073e0 <_vfiprintf_r+0x228>)
 80073ca:	a904      	add	r1, sp, #16
 80073cc:	4630      	mov	r0, r6
 80073ce:	f7fd fe59 	bl	8005084 <_printf_i>
 80073d2:	e7e4      	b.n	800739e <_vfiprintf_r+0x1e6>
 80073d4:	08007948 	.word	0x08007948
 80073d8:	08007952 	.word	0x08007952
 80073dc:	08004b55 	.word	0x08004b55
 80073e0:	08007195 	.word	0x08007195
 80073e4:	0800794e 	.word	0x0800794e

080073e8 <__swbuf_r>:
 80073e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ea:	460e      	mov	r6, r1
 80073ec:	4614      	mov	r4, r2
 80073ee:	4605      	mov	r5, r0
 80073f0:	b118      	cbz	r0, 80073fa <__swbuf_r+0x12>
 80073f2:	6a03      	ldr	r3, [r0, #32]
 80073f4:	b90b      	cbnz	r3, 80073fa <__swbuf_r+0x12>
 80073f6:	f7fd fff1 	bl	80053dc <__sinit>
 80073fa:	69a3      	ldr	r3, [r4, #24]
 80073fc:	60a3      	str	r3, [r4, #8]
 80073fe:	89a3      	ldrh	r3, [r4, #12]
 8007400:	071a      	lsls	r2, r3, #28
 8007402:	d501      	bpl.n	8007408 <__swbuf_r+0x20>
 8007404:	6923      	ldr	r3, [r4, #16]
 8007406:	b943      	cbnz	r3, 800741a <__swbuf_r+0x32>
 8007408:	4621      	mov	r1, r4
 800740a:	4628      	mov	r0, r5
 800740c:	f000 f82a 	bl	8007464 <__swsetup_r>
 8007410:	b118      	cbz	r0, 800741a <__swbuf_r+0x32>
 8007412:	f04f 37ff 	mov.w	r7, #4294967295
 8007416:	4638      	mov	r0, r7
 8007418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	6922      	ldr	r2, [r4, #16]
 800741e:	1a98      	subs	r0, r3, r2
 8007420:	6963      	ldr	r3, [r4, #20]
 8007422:	b2f6      	uxtb	r6, r6
 8007424:	4283      	cmp	r3, r0
 8007426:	4637      	mov	r7, r6
 8007428:	dc05      	bgt.n	8007436 <__swbuf_r+0x4e>
 800742a:	4621      	mov	r1, r4
 800742c:	4628      	mov	r0, r5
 800742e:	f7ff fd99 	bl	8006f64 <_fflush_r>
 8007432:	2800      	cmp	r0, #0
 8007434:	d1ed      	bne.n	8007412 <__swbuf_r+0x2a>
 8007436:	68a3      	ldr	r3, [r4, #8]
 8007438:	3b01      	subs	r3, #1
 800743a:	60a3      	str	r3, [r4, #8]
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	1c5a      	adds	r2, r3, #1
 8007440:	6022      	str	r2, [r4, #0]
 8007442:	701e      	strb	r6, [r3, #0]
 8007444:	6962      	ldr	r2, [r4, #20]
 8007446:	1c43      	adds	r3, r0, #1
 8007448:	429a      	cmp	r2, r3
 800744a:	d004      	beq.n	8007456 <__swbuf_r+0x6e>
 800744c:	89a3      	ldrh	r3, [r4, #12]
 800744e:	07db      	lsls	r3, r3, #31
 8007450:	d5e1      	bpl.n	8007416 <__swbuf_r+0x2e>
 8007452:	2e0a      	cmp	r6, #10
 8007454:	d1df      	bne.n	8007416 <__swbuf_r+0x2e>
 8007456:	4621      	mov	r1, r4
 8007458:	4628      	mov	r0, r5
 800745a:	f7ff fd83 	bl	8006f64 <_fflush_r>
 800745e:	2800      	cmp	r0, #0
 8007460:	d0d9      	beq.n	8007416 <__swbuf_r+0x2e>
 8007462:	e7d6      	b.n	8007412 <__swbuf_r+0x2a>

08007464 <__swsetup_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4b29      	ldr	r3, [pc, #164]	@ (800750c <__swsetup_r+0xa8>)
 8007468:	4605      	mov	r5, r0
 800746a:	6818      	ldr	r0, [r3, #0]
 800746c:	460c      	mov	r4, r1
 800746e:	b118      	cbz	r0, 8007478 <__swsetup_r+0x14>
 8007470:	6a03      	ldr	r3, [r0, #32]
 8007472:	b90b      	cbnz	r3, 8007478 <__swsetup_r+0x14>
 8007474:	f7fd ffb2 	bl	80053dc <__sinit>
 8007478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800747c:	0719      	lsls	r1, r3, #28
 800747e:	d422      	bmi.n	80074c6 <__swsetup_r+0x62>
 8007480:	06da      	lsls	r2, r3, #27
 8007482:	d407      	bmi.n	8007494 <__swsetup_r+0x30>
 8007484:	2209      	movs	r2, #9
 8007486:	602a      	str	r2, [r5, #0]
 8007488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800748c:	81a3      	strh	r3, [r4, #12]
 800748e:	f04f 30ff 	mov.w	r0, #4294967295
 8007492:	e033      	b.n	80074fc <__swsetup_r+0x98>
 8007494:	0758      	lsls	r0, r3, #29
 8007496:	d512      	bpl.n	80074be <__swsetup_r+0x5a>
 8007498:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800749a:	b141      	cbz	r1, 80074ae <__swsetup_r+0x4a>
 800749c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074a0:	4299      	cmp	r1, r3
 80074a2:	d002      	beq.n	80074aa <__swsetup_r+0x46>
 80074a4:	4628      	mov	r0, r5
 80074a6:	f7fe feff 	bl	80062a8 <_free_r>
 80074aa:	2300      	movs	r3, #0
 80074ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80074ae:	89a3      	ldrh	r3, [r4, #12]
 80074b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80074b4:	81a3      	strh	r3, [r4, #12]
 80074b6:	2300      	movs	r3, #0
 80074b8:	6063      	str	r3, [r4, #4]
 80074ba:	6923      	ldr	r3, [r4, #16]
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	89a3      	ldrh	r3, [r4, #12]
 80074c0:	f043 0308 	orr.w	r3, r3, #8
 80074c4:	81a3      	strh	r3, [r4, #12]
 80074c6:	6923      	ldr	r3, [r4, #16]
 80074c8:	b94b      	cbnz	r3, 80074de <__swsetup_r+0x7a>
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80074d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074d4:	d003      	beq.n	80074de <__swsetup_r+0x7a>
 80074d6:	4621      	mov	r1, r4
 80074d8:	4628      	mov	r0, r5
 80074da:	f000 f883 	bl	80075e4 <__smakebuf_r>
 80074de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074e2:	f013 0201 	ands.w	r2, r3, #1
 80074e6:	d00a      	beq.n	80074fe <__swsetup_r+0x9a>
 80074e8:	2200      	movs	r2, #0
 80074ea:	60a2      	str	r2, [r4, #8]
 80074ec:	6962      	ldr	r2, [r4, #20]
 80074ee:	4252      	negs	r2, r2
 80074f0:	61a2      	str	r2, [r4, #24]
 80074f2:	6922      	ldr	r2, [r4, #16]
 80074f4:	b942      	cbnz	r2, 8007508 <__swsetup_r+0xa4>
 80074f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80074fa:	d1c5      	bne.n	8007488 <__swsetup_r+0x24>
 80074fc:	bd38      	pop	{r3, r4, r5, pc}
 80074fe:	0799      	lsls	r1, r3, #30
 8007500:	bf58      	it	pl
 8007502:	6962      	ldrpl	r2, [r4, #20]
 8007504:	60a2      	str	r2, [r4, #8]
 8007506:	e7f4      	b.n	80074f2 <__swsetup_r+0x8e>
 8007508:	2000      	movs	r0, #0
 800750a:	e7f7      	b.n	80074fc <__swsetup_r+0x98>
 800750c:	20000018 	.word	0x20000018

08007510 <_raise_r>:
 8007510:	291f      	cmp	r1, #31
 8007512:	b538      	push	{r3, r4, r5, lr}
 8007514:	4605      	mov	r5, r0
 8007516:	460c      	mov	r4, r1
 8007518:	d904      	bls.n	8007524 <_raise_r+0x14>
 800751a:	2316      	movs	r3, #22
 800751c:	6003      	str	r3, [r0, #0]
 800751e:	f04f 30ff 	mov.w	r0, #4294967295
 8007522:	bd38      	pop	{r3, r4, r5, pc}
 8007524:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007526:	b112      	cbz	r2, 800752e <_raise_r+0x1e>
 8007528:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800752c:	b94b      	cbnz	r3, 8007542 <_raise_r+0x32>
 800752e:	4628      	mov	r0, r5
 8007530:	f000 f830 	bl	8007594 <_getpid_r>
 8007534:	4622      	mov	r2, r4
 8007536:	4601      	mov	r1, r0
 8007538:	4628      	mov	r0, r5
 800753a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800753e:	f000 b817 	b.w	8007570 <_kill_r>
 8007542:	2b01      	cmp	r3, #1
 8007544:	d00a      	beq.n	800755c <_raise_r+0x4c>
 8007546:	1c59      	adds	r1, r3, #1
 8007548:	d103      	bne.n	8007552 <_raise_r+0x42>
 800754a:	2316      	movs	r3, #22
 800754c:	6003      	str	r3, [r0, #0]
 800754e:	2001      	movs	r0, #1
 8007550:	e7e7      	b.n	8007522 <_raise_r+0x12>
 8007552:	2100      	movs	r1, #0
 8007554:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007558:	4620      	mov	r0, r4
 800755a:	4798      	blx	r3
 800755c:	2000      	movs	r0, #0
 800755e:	e7e0      	b.n	8007522 <_raise_r+0x12>

08007560 <raise>:
 8007560:	4b02      	ldr	r3, [pc, #8]	@ (800756c <raise+0xc>)
 8007562:	4601      	mov	r1, r0
 8007564:	6818      	ldr	r0, [r3, #0]
 8007566:	f7ff bfd3 	b.w	8007510 <_raise_r>
 800756a:	bf00      	nop
 800756c:	20000018 	.word	0x20000018

08007570 <_kill_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	4d07      	ldr	r5, [pc, #28]	@ (8007590 <_kill_r+0x20>)
 8007574:	2300      	movs	r3, #0
 8007576:	4604      	mov	r4, r0
 8007578:	4608      	mov	r0, r1
 800757a:	4611      	mov	r1, r2
 800757c:	602b      	str	r3, [r5, #0]
 800757e:	f7fa f811 	bl	80015a4 <_kill>
 8007582:	1c43      	adds	r3, r0, #1
 8007584:	d102      	bne.n	800758c <_kill_r+0x1c>
 8007586:	682b      	ldr	r3, [r5, #0]
 8007588:	b103      	cbz	r3, 800758c <_kill_r+0x1c>
 800758a:	6023      	str	r3, [r4, #0]
 800758c:	bd38      	pop	{r3, r4, r5, pc}
 800758e:	bf00      	nop
 8007590:	20000434 	.word	0x20000434

08007594 <_getpid_r>:
 8007594:	f7f9 bffe 	b.w	8001594 <_getpid>

08007598 <__swhatbuf_r>:
 8007598:	b570      	push	{r4, r5, r6, lr}
 800759a:	460c      	mov	r4, r1
 800759c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a0:	2900      	cmp	r1, #0
 80075a2:	b096      	sub	sp, #88	@ 0x58
 80075a4:	4615      	mov	r5, r2
 80075a6:	461e      	mov	r6, r3
 80075a8:	da0d      	bge.n	80075c6 <__swhatbuf_r+0x2e>
 80075aa:	89a3      	ldrh	r3, [r4, #12]
 80075ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80075b0:	f04f 0100 	mov.w	r1, #0
 80075b4:	bf14      	ite	ne
 80075b6:	2340      	movne	r3, #64	@ 0x40
 80075b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80075bc:	2000      	movs	r0, #0
 80075be:	6031      	str	r1, [r6, #0]
 80075c0:	602b      	str	r3, [r5, #0]
 80075c2:	b016      	add	sp, #88	@ 0x58
 80075c4:	bd70      	pop	{r4, r5, r6, pc}
 80075c6:	466a      	mov	r2, sp
 80075c8:	f000 f848 	bl	800765c <_fstat_r>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	dbec      	blt.n	80075aa <__swhatbuf_r+0x12>
 80075d0:	9901      	ldr	r1, [sp, #4]
 80075d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80075d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80075da:	4259      	negs	r1, r3
 80075dc:	4159      	adcs	r1, r3
 80075de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075e2:	e7eb      	b.n	80075bc <__swhatbuf_r+0x24>

080075e4 <__smakebuf_r>:
 80075e4:	898b      	ldrh	r3, [r1, #12]
 80075e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075e8:	079d      	lsls	r5, r3, #30
 80075ea:	4606      	mov	r6, r0
 80075ec:	460c      	mov	r4, r1
 80075ee:	d507      	bpl.n	8007600 <__smakebuf_r+0x1c>
 80075f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80075f4:	6023      	str	r3, [r4, #0]
 80075f6:	6123      	str	r3, [r4, #16]
 80075f8:	2301      	movs	r3, #1
 80075fa:	6163      	str	r3, [r4, #20]
 80075fc:	b003      	add	sp, #12
 80075fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007600:	ab01      	add	r3, sp, #4
 8007602:	466a      	mov	r2, sp
 8007604:	f7ff ffc8 	bl	8007598 <__swhatbuf_r>
 8007608:	9f00      	ldr	r7, [sp, #0]
 800760a:	4605      	mov	r5, r0
 800760c:	4639      	mov	r1, r7
 800760e:	4630      	mov	r0, r6
 8007610:	f7fe febe 	bl	8006390 <_malloc_r>
 8007614:	b948      	cbnz	r0, 800762a <__smakebuf_r+0x46>
 8007616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800761a:	059a      	lsls	r2, r3, #22
 800761c:	d4ee      	bmi.n	80075fc <__smakebuf_r+0x18>
 800761e:	f023 0303 	bic.w	r3, r3, #3
 8007622:	f043 0302 	orr.w	r3, r3, #2
 8007626:	81a3      	strh	r3, [r4, #12]
 8007628:	e7e2      	b.n	80075f0 <__smakebuf_r+0xc>
 800762a:	89a3      	ldrh	r3, [r4, #12]
 800762c:	6020      	str	r0, [r4, #0]
 800762e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007632:	81a3      	strh	r3, [r4, #12]
 8007634:	9b01      	ldr	r3, [sp, #4]
 8007636:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800763a:	b15b      	cbz	r3, 8007654 <__smakebuf_r+0x70>
 800763c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007640:	4630      	mov	r0, r6
 8007642:	f000 f81d 	bl	8007680 <_isatty_r>
 8007646:	b128      	cbz	r0, 8007654 <__smakebuf_r+0x70>
 8007648:	89a3      	ldrh	r3, [r4, #12]
 800764a:	f023 0303 	bic.w	r3, r3, #3
 800764e:	f043 0301 	orr.w	r3, r3, #1
 8007652:	81a3      	strh	r3, [r4, #12]
 8007654:	89a3      	ldrh	r3, [r4, #12]
 8007656:	431d      	orrs	r5, r3
 8007658:	81a5      	strh	r5, [r4, #12]
 800765a:	e7cf      	b.n	80075fc <__smakebuf_r+0x18>

0800765c <_fstat_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	4d07      	ldr	r5, [pc, #28]	@ (800767c <_fstat_r+0x20>)
 8007660:	2300      	movs	r3, #0
 8007662:	4604      	mov	r4, r0
 8007664:	4608      	mov	r0, r1
 8007666:	4611      	mov	r1, r2
 8007668:	602b      	str	r3, [r5, #0]
 800766a:	f7f9 fffb 	bl	8001664 <_fstat>
 800766e:	1c43      	adds	r3, r0, #1
 8007670:	d102      	bne.n	8007678 <_fstat_r+0x1c>
 8007672:	682b      	ldr	r3, [r5, #0]
 8007674:	b103      	cbz	r3, 8007678 <_fstat_r+0x1c>
 8007676:	6023      	str	r3, [r4, #0]
 8007678:	bd38      	pop	{r3, r4, r5, pc}
 800767a:	bf00      	nop
 800767c:	20000434 	.word	0x20000434

08007680 <_isatty_r>:
 8007680:	b538      	push	{r3, r4, r5, lr}
 8007682:	4d06      	ldr	r5, [pc, #24]	@ (800769c <_isatty_r+0x1c>)
 8007684:	2300      	movs	r3, #0
 8007686:	4604      	mov	r4, r0
 8007688:	4608      	mov	r0, r1
 800768a:	602b      	str	r3, [r5, #0]
 800768c:	f7f9 fffa 	bl	8001684 <_isatty>
 8007690:	1c43      	adds	r3, r0, #1
 8007692:	d102      	bne.n	800769a <_isatty_r+0x1a>
 8007694:	682b      	ldr	r3, [r5, #0]
 8007696:	b103      	cbz	r3, 800769a <_isatty_r+0x1a>
 8007698:	6023      	str	r3, [r4, #0]
 800769a:	bd38      	pop	{r3, r4, r5, pc}
 800769c:	20000434 	.word	0x20000434

080076a0 <_init>:
 80076a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a2:	bf00      	nop
 80076a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076a6:	bc08      	pop	{r3}
 80076a8:	469e      	mov	lr, r3
 80076aa:	4770      	bx	lr

080076ac <_fini>:
 80076ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ae:	bf00      	nop
 80076b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076b2:	bc08      	pop	{r3}
 80076b4:	469e      	mov	lr, r3
 80076b6:	4770      	bx	lr
