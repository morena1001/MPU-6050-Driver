
MPU 6050 Driver Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023e8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002570  08002570  00003570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025a0  080025a0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080025a0  080025a0  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025a0  080025a0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025a0  080025a0  000035a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025a4  080025a4  000035a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080025a8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  080025b4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080025b4  00004080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000765e  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000160a  00000000  00000000  0000b69a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  0000cca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000552  00000000  00000000  0000d3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190c3  00000000  00000000  0000d902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a22f  00000000  00000000  000269c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095436  00000000  00000000  00030bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c602a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b90  00000000  00000000  000c6070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000c7c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002558 	.word	0x08002558

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002558 	.word	0x08002558

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f9b8 	bl	8000540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f806 	bl	80001e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f894 	bl	8000300 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d8:	f000 f852 	bl	8000280 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001dc:	bf00      	nop
 80001de:	e7fd      	b.n	80001dc <main+0x14>

080001e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b09c      	sub	sp, #112	@ 0x70
 80001e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80001ea:	2228      	movs	r2, #40	@ 0x28
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 f986 	bl	8002500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	609a      	str	r2, [r3, #8]
 8000200:	60da      	str	r2, [r3, #12]
 8000202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000204:	463b      	mov	r3, r7
 8000206:	2234      	movs	r2, #52	@ 0x34
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f002 f978 	bl	8002500 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000210:	2302      	movs	r3, #2
 8000212:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000214:	2301      	movs	r3, #1
 8000216:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000218:	2310      	movs	r3, #16
 800021a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800021c:	2300      	movs	r3, #0
 800021e:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000220:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000224:	4618      	mov	r0, r3
 8000226:	f000 fdcb 	bl	8000dc0 <HAL_RCC_OscConfig>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000230:	f000 f8a6 	bl	8000380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000234:	230f      	movs	r3, #15
 8000236:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000238:	2300      	movs	r3, #0
 800023a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023c:	2300      	movs	r3, #0
 800023e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000248:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f001 fdf4 	bl	8001e3c <HAL_RCC_ClockConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800025a:	f000 f891 	bl	8000380 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800025e:	2320      	movs	r3, #32
 8000260:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000262:	2300      	movs	r3, #0
 8000264:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000266:	463b      	mov	r3, r7
 8000268:	4618      	mov	r0, r3
 800026a:	f001 ffb7 	bl	80021dc <HAL_RCCEx_PeriphCLKConfig>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000274:	f000 f884 	bl	8000380 <Error_Handler>
  }
}
 8000278:	bf00      	nop
 800027a:	3770      	adds	r7, #112	@ 0x70
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}

08000280 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000284:	4b1b      	ldr	r3, [pc, #108]	@ (80002f4 <MX_I2C1_Init+0x74>)
 8000286:	4a1c      	ldr	r2, [pc, #112]	@ (80002f8 <MX_I2C1_Init+0x78>)
 8000288:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 800028a:	4b1a      	ldr	r3, [pc, #104]	@ (80002f4 <MX_I2C1_Init+0x74>)
 800028c:	4a1b      	ldr	r2, [pc, #108]	@ (80002fc <MX_I2C1_Init+0x7c>)
 800028e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000290:	4b18      	ldr	r3, [pc, #96]	@ (80002f4 <MX_I2C1_Init+0x74>)
 8000292:	2200      	movs	r2, #0
 8000294:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000296:	4b17      	ldr	r3, [pc, #92]	@ (80002f4 <MX_I2C1_Init+0x74>)
 8000298:	2201      	movs	r2, #1
 800029a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800029c:	4b15      	ldr	r3, [pc, #84]	@ (80002f4 <MX_I2C1_Init+0x74>)
 800029e:	2200      	movs	r2, #0
 80002a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002a2:	4b14      	ldr	r3, [pc, #80]	@ (80002f4 <MX_I2C1_Init+0x74>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002a8:	4b12      	ldr	r3, [pc, #72]	@ (80002f4 <MX_I2C1_Init+0x74>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002ae:	4b11      	ldr	r3, [pc, #68]	@ (80002f4 <MX_I2C1_Init+0x74>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002b4:	4b0f      	ldr	r3, [pc, #60]	@ (80002f4 <MX_I2C1_Init+0x74>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002ba:	480e      	ldr	r0, [pc, #56]	@ (80002f4 <MX_I2C1_Init+0x74>)
 80002bc:	f000 fc4d 	bl	8000b5a <HAL_I2C_Init>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80002c6:	f000 f85b 	bl	8000380 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002ca:	2100      	movs	r1, #0
 80002cc:	4809      	ldr	r0, [pc, #36]	@ (80002f4 <MX_I2C1_Init+0x74>)
 80002ce:	f000 fcdf 	bl	8000c90 <HAL_I2CEx_ConfigAnalogFilter>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80002d8:	f000 f852 	bl	8000380 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80002dc:	2100      	movs	r1, #0
 80002de:	4805      	ldr	r0, [pc, #20]	@ (80002f4 <MX_I2C1_Init+0x74>)
 80002e0:	f000 fd21 	bl	8000d26 <HAL_I2CEx_ConfigDigitalFilter>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80002ea:	f000 f849 	bl	8000380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000028 	.word	0x20000028
 80002f8:	40005400 	.word	0x40005400
 80002fc:	0010020a 	.word	0x0010020a

08000300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b088      	sub	sp, #32
 8000304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000306:	f107 030c 	add.w	r3, r7, #12
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000316:	4b19      	ldr	r3, [pc, #100]	@ (800037c <MX_GPIO_Init+0x7c>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	4a18      	ldr	r2, [pc, #96]	@ (800037c <MX_GPIO_Init+0x7c>)
 800031c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000320:	6153      	str	r3, [r2, #20]
 8000322:	4b16      	ldr	r3, [pc, #88]	@ (800037c <MX_GPIO_Init+0x7c>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800032a:	60bb      	str	r3, [r7, #8]
 800032c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800032e:	4b13      	ldr	r3, [pc, #76]	@ (800037c <MX_GPIO_Init+0x7c>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	4a12      	ldr	r2, [pc, #72]	@ (800037c <MX_GPIO_Init+0x7c>)
 8000334:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000338:	6153      	str	r3, [r2, #20]
 800033a:	4b10      	ldr	r3, [pc, #64]	@ (800037c <MX_GPIO_Init+0x7c>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8000346:	2301      	movs	r3, #1
 8000348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800034a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800034e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000350:	2301      	movs	r3, #1
 8000352:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000354:	f107 030c 	add.w	r3, r7, #12
 8000358:	4619      	mov	r1, r3
 800035a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800035e:	f000 fa67 	bl	8000830 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000362:	2200      	movs	r2, #0
 8000364:	2100      	movs	r1, #0
 8000366:	2006      	movs	r0, #6
 8000368:	f000 fa2b 	bl	80007c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800036c:	2006      	movs	r0, #6
 800036e:	f000 fa44 	bl	80007fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000372:	bf00      	nop
 8000374:	3720      	adds	r7, #32
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000

08000380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000384:	b672      	cpsid	i
}
 8000386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000388:	bf00      	nop
 800038a:	e7fd      	b.n	8000388 <Error_Handler+0x8>

0800038c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000392:	4b0f      	ldr	r3, [pc, #60]	@ (80003d0 <HAL_MspInit+0x44>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4a0e      	ldr	r2, [pc, #56]	@ (80003d0 <HAL_MspInit+0x44>)
 8000398:	f043 0301 	orr.w	r3, r3, #1
 800039c:	6193      	str	r3, [r2, #24]
 800039e:	4b0c      	ldr	r3, [pc, #48]	@ (80003d0 <HAL_MspInit+0x44>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003aa:	4b09      	ldr	r3, [pc, #36]	@ (80003d0 <HAL_MspInit+0x44>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	4a08      	ldr	r2, [pc, #32]	@ (80003d0 <HAL_MspInit+0x44>)
 80003b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003b4:	61d3      	str	r3, [r2, #28]
 80003b6:	4b06      	ldr	r3, [pc, #24]	@ (80003d0 <HAL_MspInit+0x44>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003be:	603b      	str	r3, [r7, #0]
 80003c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	40021000 	.word	0x40021000

080003d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08a      	sub	sp, #40	@ 0x28
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003dc:	f107 0314 	add.w	r3, r7, #20
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]
 80003e8:	60da      	str	r2, [r3, #12]
 80003ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a17      	ldr	r2, [pc, #92]	@ (8000450 <HAL_I2C_MspInit+0x7c>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d127      	bne.n	8000446 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f6:	4b17      	ldr	r3, [pc, #92]	@ (8000454 <HAL_I2C_MspInit+0x80>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	4a16      	ldr	r2, [pc, #88]	@ (8000454 <HAL_I2C_MspInit+0x80>)
 80003fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000400:	6153      	str	r3, [r2, #20]
 8000402:	4b14      	ldr	r3, [pc, #80]	@ (8000454 <HAL_I2C_MspInit+0x80>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800040a:	613b      	str	r3, [r7, #16]
 800040c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800040e:	23c0      	movs	r3, #192	@ 0xc0
 8000410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000412:	2312      	movs	r3, #18
 8000414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000416:	2300      	movs	r3, #0
 8000418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800041a:	2303      	movs	r3, #3
 800041c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800041e:	2304      	movs	r3, #4
 8000420:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000422:	f107 0314 	add.w	r3, r7, #20
 8000426:	4619      	mov	r1, r3
 8000428:	480b      	ldr	r0, [pc, #44]	@ (8000458 <HAL_I2C_MspInit+0x84>)
 800042a:	f000 fa01 	bl	8000830 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800042e:	4b09      	ldr	r3, [pc, #36]	@ (8000454 <HAL_I2C_MspInit+0x80>)
 8000430:	69db      	ldr	r3, [r3, #28]
 8000432:	4a08      	ldr	r2, [pc, #32]	@ (8000454 <HAL_I2C_MspInit+0x80>)
 8000434:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000438:	61d3      	str	r3, [r2, #28]
 800043a:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <HAL_I2C_MspInit+0x80>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000446:	bf00      	nop
 8000448:	3728      	adds	r7, #40	@ 0x28
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40005400 	.word	0x40005400
 8000454:	40021000 	.word	0x40021000
 8000458:	48000400 	.word	0x48000400

0800045c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000460:	bf00      	nop
 8000462:	e7fd      	b.n	8000460 <NMI_Handler+0x4>

08000464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000468:	bf00      	nop
 800046a:	e7fd      	b.n	8000468 <HardFault_Handler+0x4>

0800046c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <MemManage_Handler+0x4>

08000474 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <BusFault_Handler+0x4>

0800047c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <UsageFault_Handler+0x4>

08000484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr

08000492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr

080004a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b2:	f000 f88b 	bl	80005cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}

080004ba <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 80004be:	2001      	movs	r0, #1
 80004c0:	f000 fb28 	bl	8000b14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004cc:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <SystemInit+0x20>)
 80004ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004d2:	4a05      	ldr	r2, [pc, #20]	@ (80004e8 <SystemInit+0x20>)
 80004d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	e000ed00 	.word	0xe000ed00

080004ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000524 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80004f0:	f7ff ffea 	bl	80004c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f4:	480c      	ldr	r0, [pc, #48]	@ (8000528 <LoopForever+0x6>)
  ldr r1, =_edata
 80004f6:	490d      	ldr	r1, [pc, #52]	@ (800052c <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000530 <LoopForever+0xe>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004fc:	e002      	b.n	8000504 <LoopCopyDataInit>

080004fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000502:	3304      	adds	r3, #4

08000504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000508:	d3f9      	bcc.n	80004fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050a:	4a0a      	ldr	r2, [pc, #40]	@ (8000534 <LoopForever+0x12>)
  ldr r4, =_ebss
 800050c:	4c0a      	ldr	r4, [pc, #40]	@ (8000538 <LoopForever+0x16>)
  movs r3, #0
 800050e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000510:	e001      	b.n	8000516 <LoopFillZerobss>

08000512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000514:	3204      	adds	r2, #4

08000516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000518:	d3fb      	bcc.n	8000512 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800051a:	f001 fff9 	bl	8002510 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800051e:	f7ff fe53 	bl	80001c8 <main>

08000522 <LoopForever>:

LoopForever:
    b LoopForever
 8000522:	e7fe      	b.n	8000522 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000524:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800052c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000530:	080025a8 	.word	0x080025a8
  ldr r2, =_sbss
 8000534:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000538:	20000080 	.word	0x20000080

0800053c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800053c:	e7fe      	b.n	800053c <ADC1_IRQHandler>
	...

08000540 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	4b08      	ldr	r3, [pc, #32]	@ (8000568 <HAL_Init+0x28>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a07      	ldr	r2, [pc, #28]	@ (8000568 <HAL_Init+0x28>)
 800054a:	f043 0310 	orr.w	r3, r3, #16
 800054e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000550:	2003      	movs	r0, #3
 8000552:	f000 f92b 	bl	80007ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000556:	200f      	movs	r0, #15
 8000558:	f000 f808 	bl	800056c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800055c:	f7ff ff16 	bl	800038c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000560:	2300      	movs	r3, #0
}
 8000562:	4618      	mov	r0, r3
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40022000 	.word	0x40022000

0800056c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000574:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <HAL_InitTick+0x54>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b12      	ldr	r3, [pc, #72]	@ (80005c4 <HAL_InitTick+0x58>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	4619      	mov	r1, r3
 800057e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000582:	fbb3 f3f1 	udiv	r3, r3, r1
 8000586:	fbb2 f3f3 	udiv	r3, r2, r3
 800058a:	4618      	mov	r0, r3
 800058c:	f000 f943 	bl	8000816 <HAL_SYSTICK_Config>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000596:	2301      	movs	r3, #1
 8000598:	e00e      	b.n	80005b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b0f      	cmp	r3, #15
 800059e:	d80a      	bhi.n	80005b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a0:	2200      	movs	r2, #0
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	f04f 30ff 	mov.w	r0, #4294967295
 80005a8:	f000 f90b 	bl	80007c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005ac:	4a06      	ldr	r2, [pc, #24]	@ (80005c8 <HAL_InitTick+0x5c>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80005b2:	2300      	movs	r3, #0
 80005b4:	e000      	b.n	80005b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005b6:	2301      	movs	r3, #1
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000008 	.word	0x20000008
 80005c8:	20000004 	.word	0x20000004

080005cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d0:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <HAL_IncTick+0x20>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <HAL_IncTick+0x24>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	4a04      	ldr	r2, [pc, #16]	@ (80005f0 <HAL_IncTick+0x24>)
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000008 	.word	0x20000008
 80005f0:	2000007c 	.word	0x2000007c

080005f4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return uwTick;  
 80005f8:	4b03      	ldr	r3, [pc, #12]	@ (8000608 <HAL_GetTick+0x14>)
 80005fa:	681b      	ldr	r3, [r3, #0]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	2000007c 	.word	0x2000007c

0800060c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f003 0307 	and.w	r3, r3, #7
 800061a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000628:	4013      	ands	r3, r2
 800062a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000634:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800063c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063e:	4a04      	ldr	r2, [pc, #16]	@ (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	60d3      	str	r3, [r2, #12]
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000658:	4b04      	ldr	r3, [pc, #16]	@ (800066c <__NVIC_GetPriorityGrouping+0x18>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	0a1b      	lsrs	r3, r3, #8
 800065e:	f003 0307 	and.w	r3, r3, #7
}
 8000662:	4618      	mov	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	2b00      	cmp	r3, #0
 8000680:	db0b      	blt.n	800069a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f003 021f 	and.w	r2, r3, #31
 8000688:	4907      	ldr	r1, [pc, #28]	@ (80006a8 <__NVIC_EnableIRQ+0x38>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	095b      	lsrs	r3, r3, #5
 8000690:	2001      	movs	r0, #1
 8000692:	fa00 f202 	lsl.w	r2, r0, r2
 8000696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000e100 	.word	0xe000e100

080006ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	db0a      	blt.n	80006d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	490c      	ldr	r1, [pc, #48]	@ (80006f8 <__NVIC_SetPriority+0x4c>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	0112      	lsls	r2, r2, #4
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	440b      	add	r3, r1
 80006d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d4:	e00a      	b.n	80006ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4908      	ldr	r1, [pc, #32]	@ (80006fc <__NVIC_SetPriority+0x50>)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	3b04      	subs	r3, #4
 80006e4:	0112      	lsls	r2, r2, #4
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	440b      	add	r3, r1
 80006ea:	761a      	strb	r2, [r3, #24]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000e100 	.word	0xe000e100
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000700:	b480      	push	{r7}
 8000702:	b089      	sub	sp, #36	@ 0x24
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f003 0307 	and.w	r3, r3, #7
 8000712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	f1c3 0307 	rsb	r3, r3, #7
 800071a:	2b04      	cmp	r3, #4
 800071c:	bf28      	it	cs
 800071e:	2304      	movcs	r3, #4
 8000720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3304      	adds	r3, #4
 8000726:	2b06      	cmp	r3, #6
 8000728:	d902      	bls.n	8000730 <NVIC_EncodePriority+0x30>
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	3b03      	subs	r3, #3
 800072e:	e000      	b.n	8000732 <NVIC_EncodePriority+0x32>
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	f04f 32ff 	mov.w	r2, #4294967295
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	43da      	mvns	r2, r3
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	401a      	ands	r2, r3
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000748:	f04f 31ff 	mov.w	r1, #4294967295
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	fa01 f303 	lsl.w	r3, r1, r3
 8000752:	43d9      	mvns	r1, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	4313      	orrs	r3, r2
         );
}
 800075a:	4618      	mov	r0, r3
 800075c:	3724      	adds	r7, #36	@ 0x24
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
	...

08000768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000778:	d301      	bcc.n	800077e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800077a:	2301      	movs	r3, #1
 800077c:	e00f      	b.n	800079e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077e:	4a0a      	ldr	r2, [pc, #40]	@ (80007a8 <SysTick_Config+0x40>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3b01      	subs	r3, #1
 8000784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000786:	210f      	movs	r1, #15
 8000788:	f04f 30ff 	mov.w	r0, #4294967295
 800078c:	f7ff ff8e 	bl	80006ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000790:	4b05      	ldr	r3, [pc, #20]	@ (80007a8 <SysTick_Config+0x40>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000796:	4b04      	ldr	r3, [pc, #16]	@ (80007a8 <SysTick_Config+0x40>)
 8000798:	2207      	movs	r2, #7
 800079a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	e000e010 	.word	0xe000e010

080007ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff ff29 	bl	800060c <__NVIC_SetPriorityGrouping>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b086      	sub	sp, #24
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4603      	mov	r3, r0
 80007ca:	60b9      	str	r1, [r7, #8]
 80007cc:	607a      	str	r2, [r7, #4]
 80007ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007d4:	f7ff ff3e 	bl	8000654 <__NVIC_GetPriorityGrouping>
 80007d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	68b9      	ldr	r1, [r7, #8]
 80007de:	6978      	ldr	r0, [r7, #20]
 80007e0:	f7ff ff8e 	bl	8000700 <NVIC_EncodePriority>
 80007e4:	4602      	mov	r2, r0
 80007e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff5d 	bl	80006ac <__NVIC_SetPriority>
}
 80007f2:	bf00      	nop
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4603      	mov	r3, r0
 8000802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff31 	bl	8000670 <__NVIC_EnableIRQ>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ffa2 	bl	8000768 <SysTick_Config>
 8000824:	4603      	mov	r3, r0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000830:	b480      	push	{r7}
 8000832:	b087      	sub	sp, #28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800083e:	e14e      	b.n	8000ade <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	2101      	movs	r1, #1
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	fa01 f303 	lsl.w	r3, r1, r3
 800084c:	4013      	ands	r3, r2
 800084e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	2b00      	cmp	r3, #0
 8000854:	f000 8140 	beq.w	8000ad8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	f003 0303 	and.w	r3, r3, #3
 8000860:	2b01      	cmp	r3, #1
 8000862:	d005      	beq.n	8000870 <HAL_GPIO_Init+0x40>
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	f003 0303 	and.w	r3, r3, #3
 800086c:	2b02      	cmp	r3, #2
 800086e:	d130      	bne.n	80008d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	2203      	movs	r2, #3
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	43db      	mvns	r3, r3
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	4013      	ands	r3, r2
 8000886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	68da      	ldr	r2, [r3, #12]
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	4313      	orrs	r3, r2
 8000898:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008a6:	2201      	movs	r2, #1
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	43db      	mvns	r3, r3
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	4013      	ands	r3, r2
 80008b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	091b      	lsrs	r3, r3, #4
 80008bc:	f003 0201 	and.w	r2, r3, #1
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	f003 0303 	and.w	r3, r3, #3
 80008da:	2b03      	cmp	r3, #3
 80008dc:	d017      	beq.n	800090e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	2203      	movs	r2, #3
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43db      	mvns	r3, r3
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	4013      	ands	r3, r2
 80008f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	689a      	ldr	r2, [r3, #8]
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	4313      	orrs	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	f003 0303 	and.w	r3, r3, #3
 8000916:	2b02      	cmp	r3, #2
 8000918:	d123      	bne.n	8000962 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	08da      	lsrs	r2, r3, #3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3208      	adds	r2, #8
 8000922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000926:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	220f      	movs	r2, #15
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	43db      	mvns	r3, r3
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	4013      	ands	r3, r2
 800093c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	691a      	ldr	r2, [r3, #16]
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	f003 0307 	and.w	r3, r3, #7
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	4313      	orrs	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	08da      	lsrs	r2, r3, #3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3208      	adds	r2, #8
 800095c:	6939      	ldr	r1, [r7, #16]
 800095e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	2203      	movs	r2, #3
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43db      	mvns	r3, r3
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	4013      	ands	r3, r2
 8000978:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f003 0203 	and.w	r2, r3, #3
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4313      	orrs	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f000 809a 	beq.w	8000ad8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a4:	4b55      	ldr	r3, [pc, #340]	@ (8000afc <HAL_GPIO_Init+0x2cc>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a54      	ldr	r2, [pc, #336]	@ (8000afc <HAL_GPIO_Init+0x2cc>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b52      	ldr	r3, [pc, #328]	@ (8000afc <HAL_GPIO_Init+0x2cc>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009bc:	4a50      	ldr	r2, [pc, #320]	@ (8000b00 <HAL_GPIO_Init+0x2d0>)
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	089b      	lsrs	r3, r3, #2
 80009c2:	3302      	adds	r3, #2
 80009c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	f003 0303 	and.w	r3, r3, #3
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	220f      	movs	r2, #15
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	43db      	mvns	r3, r3
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	4013      	ands	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80009e6:	d013      	beq.n	8000a10 <HAL_GPIO_Init+0x1e0>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a46      	ldr	r2, [pc, #280]	@ (8000b04 <HAL_GPIO_Init+0x2d4>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d00d      	beq.n	8000a0c <HAL_GPIO_Init+0x1dc>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a45      	ldr	r2, [pc, #276]	@ (8000b08 <HAL_GPIO_Init+0x2d8>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d007      	beq.n	8000a08 <HAL_GPIO_Init+0x1d8>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a44      	ldr	r2, [pc, #272]	@ (8000b0c <HAL_GPIO_Init+0x2dc>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d101      	bne.n	8000a04 <HAL_GPIO_Init+0x1d4>
 8000a00:	2303      	movs	r3, #3
 8000a02:	e006      	b.n	8000a12 <HAL_GPIO_Init+0x1e2>
 8000a04:	2305      	movs	r3, #5
 8000a06:	e004      	b.n	8000a12 <HAL_GPIO_Init+0x1e2>
 8000a08:	2302      	movs	r3, #2
 8000a0a:	e002      	b.n	8000a12 <HAL_GPIO_Init+0x1e2>
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	e000      	b.n	8000a12 <HAL_GPIO_Init+0x1e2>
 8000a10:	2300      	movs	r3, #0
 8000a12:	697a      	ldr	r2, [r7, #20]
 8000a14:	f002 0203 	and.w	r2, r2, #3
 8000a18:	0092      	lsls	r2, r2, #2
 8000a1a:	4093      	lsls	r3, r2
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a22:	4937      	ldr	r1, [pc, #220]	@ (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	089b      	lsrs	r3, r3, #2
 8000a28:	3302      	adds	r3, #2
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a30:	4b37      	ldr	r3, [pc, #220]	@ (8000b10 <HAL_GPIO_Init+0x2e0>)
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d003      	beq.n	8000a54 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a54:	4a2e      	ldr	r2, [pc, #184]	@ (8000b10 <HAL_GPIO_Init+0x2e0>)
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b10 <HAL_GPIO_Init+0x2e0>)
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	43db      	mvns	r3, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d003      	beq.n	8000a7e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a7e:	4a24      	ldr	r2, [pc, #144]	@ (8000b10 <HAL_GPIO_Init+0x2e0>)
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000a84:	4b22      	ldr	r3, [pc, #136]	@ (8000b10 <HAL_GPIO_Init+0x2e0>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000aa8:	4a19      	ldr	r2, [pc, #100]	@ (8000b10 <HAL_GPIO_Init+0x2e0>)
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aae:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <HAL_GPIO_Init+0x2e0>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ad2:	4a0f      	ldr	r2, [pc, #60]	@ (8000b10 <HAL_GPIO_Init+0x2e0>)
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	3301      	adds	r3, #1
 8000adc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	f47f aea9 	bne.w	8000840 <HAL_GPIO_Init+0x10>
  }
}
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
 8000af2:	371c      	adds	r7, #28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40010000 	.word	0x40010000
 8000b04:	48000400 	.word	0x48000400
 8000b08:	48000800 	.word	0x48000800
 8000b0c:	48000c00 	.word	0x48000c00
 8000b10:	40010400 	.word	0x40010400

08000b14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b1e:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b20:	695a      	ldr	r2, [r3, #20]
 8000b22:	88fb      	ldrh	r3, [r7, #6]
 8000b24:	4013      	ands	r3, r2
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d006      	beq.n	8000b38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b2a:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b2c:	88fb      	ldrh	r3, [r7, #6]
 8000b2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f806 	bl	8000b44 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40010400 	.word	0x40010400

08000b44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d101      	bne.n	8000b6c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e08d      	b.n	8000c88 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d106      	bne.n	8000b86 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff fc27 	bl	80003d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2224      	movs	r2, #36	@ 0x24
 8000b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f022 0201 	bic.w	r2, r2, #1
 8000b9c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000baa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000bba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d107      	bne.n	8000bd4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689a      	ldr	r2, [r3, #8]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	e006      	b.n	8000be2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	689a      	ldr	r2, [r3, #8]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000be0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d108      	bne.n	8000bfc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	e007      	b.n	8000c0c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000c0a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c1e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	68da      	ldr	r2, [r3, #12]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000c2e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	691a      	ldr	r2, [r3, #16]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	430a      	orrs	r2, r1
 8000c48:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	69d9      	ldr	r1, [r3, #28]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6a1a      	ldr	r2, [r3, #32]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	430a      	orrs	r2, r1
 8000c58:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f042 0201 	orr.w	r2, r2, #1
 8000c68:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2220      	movs	r2, #32
 8000c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b20      	cmp	r3, #32
 8000ca4:	d138      	bne.n	8000d18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d101      	bne.n	8000cb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	e032      	b.n	8000d1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2224      	movs	r2, #36	@ 0x24
 8000cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f022 0201 	bic.w	r2, r2, #1
 8000cd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000ce2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	6819      	ldr	r1, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	683a      	ldr	r2, [r7, #0]
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f042 0201 	orr.w	r2, r2, #1
 8000d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2220      	movs	r2, #32
 8000d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	e000      	b.n	8000d1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000d18:	2302      	movs	r3, #2
  }
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b085      	sub	sp, #20
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b20      	cmp	r3, #32
 8000d3a:	d139      	bne.n	8000db0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d101      	bne.n	8000d4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000d46:	2302      	movs	r3, #2
 8000d48:	e033      	b.n	8000db2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2224      	movs	r2, #36	@ 0x24
 8000d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f022 0201 	bic.w	r2, r2, #1
 8000d68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000d78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	021b      	lsls	r3, r3, #8
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f042 0201 	orr.w	r2, r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2220      	movs	r2, #32
 8000da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000dac:	2300      	movs	r3, #0
 8000dae:	e000      	b.n	8000db2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000db0:	2302      	movs	r3, #2
  }
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dcc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dd0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dd6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	f001 b823 	b.w	8001e2c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000de6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 817d 	beq.w	80010f6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dfc:	4bbc      	ldr	r3, [pc, #752]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 030c 	and.w	r3, r3, #12
 8000e04:	2b04      	cmp	r3, #4
 8000e06:	d00c      	beq.n	8000e22 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e08:	4bb9      	ldr	r3, [pc, #740]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 030c 	and.w	r3, r3, #12
 8000e10:	2b08      	cmp	r3, #8
 8000e12:	d15c      	bne.n	8000ece <HAL_RCC_OscConfig+0x10e>
 8000e14:	4bb6      	ldr	r3, [pc, #728]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e20:	d155      	bne.n	8000ece <HAL_RCC_OscConfig+0x10e>
 8000e22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e26:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000e2e:	fa93 f3a3 	rbit	r3, r3
 8000e32:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e36:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e3a:	fab3 f383 	clz	r3, r3
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	095b      	lsrs	r3, r3, #5
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d102      	bne.n	8000e54 <HAL_RCC_OscConfig+0x94>
 8000e4e:	4ba8      	ldr	r3, [pc, #672]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	e015      	b.n	8000e80 <HAL_RCC_OscConfig+0xc0>
 8000e54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e58:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e5c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000e60:	fa93 f3a3 	rbit	r3, r3
 8000e64:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000e68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e6c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000e70:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000e74:	fa93 f3a3 	rbit	r3, r3
 8000e78:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000e7c:	4b9c      	ldr	r3, [pc, #624]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e80:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e84:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000e88:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000e8c:	fa92 f2a2 	rbit	r2, r2
 8000e90:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000e94:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000e98:	fab2 f282 	clz	r2, r2
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	f042 0220 	orr.w	r2, r2, #32
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	f002 021f 	and.w	r2, r2, #31
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8000eae:	4013      	ands	r3, r2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f000 811f 	beq.w	80010f4 <HAL_RCC_OscConfig+0x334>
 8000eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000eba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f040 8116 	bne.w	80010f4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	f000 bfaf 	b.w	8001e2c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ed2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ede:	d106      	bne.n	8000eee <HAL_RCC_OscConfig+0x12e>
 8000ee0:	4b83      	ldr	r3, [pc, #524]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a82      	ldr	r2, [pc, #520]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000ee6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	e036      	b.n	8000f5c <HAL_RCC_OscConfig+0x19c>
 8000eee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ef2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d10c      	bne.n	8000f18 <HAL_RCC_OscConfig+0x158>
 8000efe:	4b7c      	ldr	r3, [pc, #496]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a7b      	ldr	r2, [pc, #492]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000f04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	4b79      	ldr	r3, [pc, #484]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a78      	ldr	r2, [pc, #480]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000f10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	e021      	b.n	8000f5c <HAL_RCC_OscConfig+0x19c>
 8000f18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f28:	d10c      	bne.n	8000f44 <HAL_RCC_OscConfig+0x184>
 8000f2a:	4b71      	ldr	r3, [pc, #452]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a70      	ldr	r2, [pc, #448]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000f30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	4b6e      	ldr	r3, [pc, #440]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a6d      	ldr	r2, [pc, #436]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	e00b      	b.n	8000f5c <HAL_RCC_OscConfig+0x19c>
 8000f44:	4b6a      	ldr	r3, [pc, #424]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a69      	ldr	r2, [pc, #420]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b67      	ldr	r3, [pc, #412]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a66      	ldr	r2, [pc, #408]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000f56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f5a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f5c:	4b64      	ldr	r3, [pc, #400]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f60:	f023 020f 	bic.w	r2, r3, #15
 8000f64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	495f      	ldr	r1, [pc, #380]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000f72:	4313      	orrs	r3, r2
 8000f74:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d059      	beq.n	800103a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f86:	f7ff fb35 	bl	80005f4 <HAL_GetTick>
 8000f8a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8e:	e00a      	b.n	8000fa6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f90:	f7ff fb30 	bl	80005f4 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b64      	cmp	r3, #100	@ 0x64
 8000f9e:	d902      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	f000 bf43 	b.w	8001e2c <HAL_RCC_OscConfig+0x106c>
 8000fa6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000faa:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fae:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000fb2:	fa93 f3a3 	rbit	r3, r3
 8000fb6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000fba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fbe:	fab3 f383 	clz	r3, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	095b      	lsrs	r3, r3, #5
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d102      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x218>
 8000fd2:	4b47      	ldr	r3, [pc, #284]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	e015      	b.n	8001004 <HAL_RCC_OscConfig+0x244>
 8000fd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fdc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000fe4:	fa93 f3a3 	rbit	r3, r3
 8000fe8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000fec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ff0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000ff4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000ff8:	fa93 f3a3 	rbit	r3, r3
 8000ffc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001000:	4b3b      	ldr	r3, [pc, #236]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8001002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001004:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001008:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800100c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001010:	fa92 f2a2 	rbit	r2, r2
 8001014:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001018:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800101c:	fab2 f282 	clz	r2, r2
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	f042 0220 	orr.w	r2, r2, #32
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	f002 021f 	and.w	r2, r2, #31
 800102c:	2101      	movs	r1, #1
 800102e:	fa01 f202 	lsl.w	r2, r1, r2
 8001032:	4013      	ands	r3, r2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0ab      	beq.n	8000f90 <HAL_RCC_OscConfig+0x1d0>
 8001038:	e05d      	b.n	80010f6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103a:	f7ff fadb 	bl	80005f4 <HAL_GetTick>
 800103e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001042:	e00a      	b.n	800105a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001044:	f7ff fad6 	bl	80005f4 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b64      	cmp	r3, #100	@ 0x64
 8001052:	d902      	bls.n	800105a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	f000 bee9 	b.w	8001e2c <HAL_RCC_OscConfig+0x106c>
 800105a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800105e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001062:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001066:	fa93 f3a3 	rbit	r3, r3
 800106a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800106e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001072:	fab3 f383 	clz	r3, r3
 8001076:	b2db      	uxtb	r3, r3
 8001078:	095b      	lsrs	r3, r3, #5
 800107a:	b2db      	uxtb	r3, r3
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b01      	cmp	r3, #1
 8001084:	d102      	bne.n	800108c <HAL_RCC_OscConfig+0x2cc>
 8001086:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	e015      	b.n	80010b8 <HAL_RCC_OscConfig+0x2f8>
 800108c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001090:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001094:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001098:	fa93 f3a3 	rbit	r3, r3
 800109c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80010a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010a4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80010a8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80010ac:	fa93 f3a3 	rbit	r3, r3
 80010b0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80010b4:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 80010b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010bc:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80010c0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80010c4:	fa92 f2a2 	rbit	r2, r2
 80010c8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80010cc:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80010d0:	fab2 f282 	clz	r2, r2
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	f042 0220 	orr.w	r2, r2, #32
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	f002 021f 	and.w	r2, r2, #31
 80010e0:	2101      	movs	r1, #1
 80010e2:	fa01 f202 	lsl.w	r2, r1, r2
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1ab      	bne.n	8001044 <HAL_RCC_OscConfig+0x284>
 80010ec:	e003      	b.n	80010f6 <HAL_RCC_OscConfig+0x336>
 80010ee:	bf00      	nop
 80010f0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 817d 	beq.w	8001406 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800110c:	4ba6      	ldr	r3, [pc, #664]	@ (80013a8 <HAL_RCC_OscConfig+0x5e8>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 030c 	and.w	r3, r3, #12
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00b      	beq.n	8001130 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001118:	4ba3      	ldr	r3, [pc, #652]	@ (80013a8 <HAL_RCC_OscConfig+0x5e8>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 030c 	and.w	r3, r3, #12
 8001120:	2b08      	cmp	r3, #8
 8001122:	d172      	bne.n	800120a <HAL_RCC_OscConfig+0x44a>
 8001124:	4ba0      	ldr	r3, [pc, #640]	@ (80013a8 <HAL_RCC_OscConfig+0x5e8>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d16c      	bne.n	800120a <HAL_RCC_OscConfig+0x44a>
 8001130:	2302      	movs	r3, #2
 8001132:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001136:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800113a:	fa93 f3a3 	rbit	r3, r3
 800113e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001142:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001146:	fab3 f383 	clz	r3, r3
 800114a:	b2db      	uxtb	r3, r3
 800114c:	095b      	lsrs	r3, r3, #5
 800114e:	b2db      	uxtb	r3, r3
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b01      	cmp	r3, #1
 8001158:	d102      	bne.n	8001160 <HAL_RCC_OscConfig+0x3a0>
 800115a:	4b93      	ldr	r3, [pc, #588]	@ (80013a8 <HAL_RCC_OscConfig+0x5e8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	e013      	b.n	8001188 <HAL_RCC_OscConfig+0x3c8>
 8001160:	2302      	movs	r3, #2
 8001162:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001166:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800116a:	fa93 f3a3 	rbit	r3, r3
 800116e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001172:	2302      	movs	r3, #2
 8001174:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001178:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800117c:	fa93 f3a3 	rbit	r3, r3
 8001180:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001184:	4b88      	ldr	r3, [pc, #544]	@ (80013a8 <HAL_RCC_OscConfig+0x5e8>)
 8001186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001188:	2202      	movs	r2, #2
 800118a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800118e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001192:	fa92 f2a2 	rbit	r2, r2
 8001196:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800119a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800119e:	fab2 f282 	clz	r2, r2
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	f042 0220 	orr.w	r2, r2, #32
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	f002 021f 	and.w	r2, r2, #31
 80011ae:	2101      	movs	r1, #1
 80011b0:	fa01 f202 	lsl.w	r2, r1, r2
 80011b4:	4013      	ands	r3, r2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00a      	beq.n	80011d0 <HAL_RCC_OscConfig+0x410>
 80011ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d002      	beq.n	80011d0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	f000 be2e 	b.w	8001e2c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d0:	4b75      	ldr	r3, [pc, #468]	@ (80013a8 <HAL_RCC_OscConfig+0x5e8>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	21f8      	movs	r1, #248	@ 0xf8
 80011e6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ea:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80011ee:	fa91 f1a1 	rbit	r1, r1
 80011f2:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80011f6:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80011fa:	fab1 f181 	clz	r1, r1
 80011fe:	b2c9      	uxtb	r1, r1
 8001200:	408b      	lsls	r3, r1
 8001202:	4969      	ldr	r1, [pc, #420]	@ (80013a8 <HAL_RCC_OscConfig+0x5e8>)
 8001204:	4313      	orrs	r3, r2
 8001206:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001208:	e0fd      	b.n	8001406 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800120a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800120e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 8088 	beq.w	800132c <HAL_RCC_OscConfig+0x56c>
 800121c:	2301      	movs	r3, #1
 800121e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001222:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001226:	fa93 f3a3 	rbit	r3, r3
 800122a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800122e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001232:	fab3 f383 	clz	r3, r3
 8001236:	b2db      	uxtb	r3, r3
 8001238:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800123c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	461a      	mov	r2, r3
 8001244:	2301      	movs	r3, #1
 8001246:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff f9d4 	bl	80005f4 <HAL_GetTick>
 800124c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001250:	e00a      	b.n	8001268 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001252:	f7ff f9cf 	bl	80005f4 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d902      	bls.n	8001268 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	f000 bde2 	b.w	8001e2c <HAL_RCC_OscConfig+0x106c>
 8001268:	2302      	movs	r3, #2
 800126a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001272:	fa93 f3a3 	rbit	r3, r3
 8001276:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800127a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127e:	fab3 f383 	clz	r3, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	095b      	lsrs	r3, r3, #5
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b01      	cmp	r3, #1
 8001290:	d102      	bne.n	8001298 <HAL_RCC_OscConfig+0x4d8>
 8001292:	4b45      	ldr	r3, [pc, #276]	@ (80013a8 <HAL_RCC_OscConfig+0x5e8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	e013      	b.n	80012c0 <HAL_RCC_OscConfig+0x500>
 8001298:	2302      	movs	r3, #2
 800129a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80012a2:	fa93 f3a3 	rbit	r3, r3
 80012a6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80012aa:	2302      	movs	r3, #2
 80012ac:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80012b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80012b4:	fa93 f3a3 	rbit	r3, r3
 80012b8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80012bc:	4b3a      	ldr	r3, [pc, #232]	@ (80013a8 <HAL_RCC_OscConfig+0x5e8>)
 80012be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c0:	2202      	movs	r2, #2
 80012c2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80012c6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80012ca:	fa92 f2a2 	rbit	r2, r2
 80012ce:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80012d2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80012d6:	fab2 f282 	clz	r2, r2
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	f042 0220 	orr.w	r2, r2, #32
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	f002 021f 	and.w	r2, r2, #31
 80012e6:	2101      	movs	r1, #1
 80012e8:	fa01 f202 	lsl.w	r2, r1, r2
 80012ec:	4013      	ands	r3, r2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0af      	beq.n	8001252 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f2:	4b2d      	ldr	r3, [pc, #180]	@ (80013a8 <HAL_RCC_OscConfig+0x5e8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	21f8      	movs	r1, #248	@ 0xf8
 8001308:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001310:	fa91 f1a1 	rbit	r1, r1
 8001314:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001318:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800131c:	fab1 f181 	clz	r1, r1
 8001320:	b2c9      	uxtb	r1, r1
 8001322:	408b      	lsls	r3, r1
 8001324:	4920      	ldr	r1, [pc, #128]	@ (80013a8 <HAL_RCC_OscConfig+0x5e8>)
 8001326:	4313      	orrs	r3, r2
 8001328:	600b      	str	r3, [r1, #0]
 800132a:	e06c      	b.n	8001406 <HAL_RCC_OscConfig+0x646>
 800132c:	2301      	movs	r3, #1
 800132e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001332:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001336:	fa93 f3a3 	rbit	r3, r3
 800133a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800133e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001342:	fab3 f383 	clz	r3, r3
 8001346:	b2db      	uxtb	r3, r3
 8001348:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800134c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	461a      	mov	r2, r3
 8001354:	2300      	movs	r3, #0
 8001356:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff f94c 	bl	80005f4 <HAL_GetTick>
 800135c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001360:	e00a      	b.n	8001378 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001362:	f7ff f947 	bl	80005f4 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d902      	bls.n	8001378 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	f000 bd5a 	b.w	8001e2c <HAL_RCC_OscConfig+0x106c>
 8001378:	2302      	movs	r3, #2
 800137a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001382:	fa93 f3a3 	rbit	r3, r3
 8001386:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800138a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138e:	fab3 f383 	clz	r3, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	095b      	lsrs	r3, r3, #5
 8001396:	b2db      	uxtb	r3, r3
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d104      	bne.n	80013ac <HAL_RCC_OscConfig+0x5ec>
 80013a2:	4b01      	ldr	r3, [pc, #4]	@ (80013a8 <HAL_RCC_OscConfig+0x5e8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	e015      	b.n	80013d4 <HAL_RCC_OscConfig+0x614>
 80013a8:	40021000 	.word	0x40021000
 80013ac:	2302      	movs	r3, #2
 80013ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80013b6:	fa93 f3a3 	rbit	r3, r3
 80013ba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80013be:	2302      	movs	r3, #2
 80013c0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80013c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013c8:	fa93 f3a3 	rbit	r3, r3
 80013cc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80013d0:	4bc8      	ldr	r3, [pc, #800]	@ (80016f4 <HAL_RCC_OscConfig+0x934>)
 80013d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d4:	2202      	movs	r2, #2
 80013d6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80013da:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80013de:	fa92 f2a2 	rbit	r2, r2
 80013e2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80013e6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80013ea:	fab2 f282 	clz	r2, r2
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	f042 0220 	orr.w	r2, r2, #32
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	f002 021f 	and.w	r2, r2, #31
 80013fa:	2101      	movs	r1, #1
 80013fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001400:	4013      	ands	r3, r2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1ad      	bne.n	8001362 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800140a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 8110 	beq.w	800163c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800141c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001420:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d079      	beq.n	8001520 <HAL_RCC_OscConfig+0x760>
 800142c:	2301      	movs	r3, #1
 800142e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001432:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001436:	fa93 f3a3 	rbit	r3, r3
 800143a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800143e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001442:	fab3 f383 	clz	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	461a      	mov	r2, r3
 800144a:	4bab      	ldr	r3, [pc, #684]	@ (80016f8 <HAL_RCC_OscConfig+0x938>)
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	461a      	mov	r2, r3
 8001452:	2301      	movs	r3, #1
 8001454:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001456:	f7ff f8cd 	bl	80005f4 <HAL_GetTick>
 800145a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	e00a      	b.n	8001476 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001460:	f7ff f8c8 	bl	80005f4 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d902      	bls.n	8001476 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	f000 bcdb 	b.w	8001e2c <HAL_RCC_OscConfig+0x106c>
 8001476:	2302      	movs	r3, #2
 8001478:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001480:	fa93 f3a3 	rbit	r3, r3
 8001484:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001488:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800148c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001490:	2202      	movs	r2, #2
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001498:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	fa93 f2a3 	rbit	r2, r3
 80014a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80014b4:	2202      	movs	r2, #2
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	fa93 f2a3 	rbit	r2, r3
 80014c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80014ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d0:	4b88      	ldr	r3, [pc, #544]	@ (80016f4 <HAL_RCC_OscConfig+0x934>)
 80014d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80014dc:	2102      	movs	r1, #2
 80014de:	6019      	str	r1, [r3, #0]
 80014e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	fa93 f1a3 	rbit	r1, r3
 80014ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014f6:	6019      	str	r1, [r3, #0]
  return result;
 80014f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014fc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	fab3 f383 	clz	r3, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	2101      	movs	r1, #1
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	4013      	ands	r3, r2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0a0      	beq.n	8001460 <HAL_RCC_OscConfig+0x6a0>
 800151e:	e08d      	b.n	800163c <HAL_RCC_OscConfig+0x87c>
 8001520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001524:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001528:	2201      	movs	r2, #1
 800152a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001530:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	fa93 f2a3 	rbit	r2, r3
 800153a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800153e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001542:	601a      	str	r2, [r3, #0]
  return result;
 8001544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001548:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800154c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800154e:	fab3 f383 	clz	r3, r3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	4b68      	ldr	r3, [pc, #416]	@ (80016f8 <HAL_RCC_OscConfig+0x938>)
 8001558:	4413      	add	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	461a      	mov	r2, r3
 800155e:	2300      	movs	r3, #0
 8001560:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001562:	f7ff f847 	bl	80005f4 <HAL_GetTick>
 8001566:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800156a:	e00a      	b.n	8001582 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800156c:	f7ff f842 	bl	80005f4 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d902      	bls.n	8001582 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	f000 bc55 	b.w	8001e2c <HAL_RCC_OscConfig+0x106c>
 8001582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001586:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800158a:	2202      	movs	r2, #2
 800158c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001592:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	fa93 f2a3 	rbit	r2, r3
 800159c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015a0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015aa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015ae:	2202      	movs	r2, #2
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	fa93 f2a3 	rbit	r2, r3
 80015c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80015d2:	2202      	movs	r2, #2
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015da:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	fa93 f2a3 	rbit	r2, r3
 80015e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80015ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ee:	4b41      	ldr	r3, [pc, #260]	@ (80016f4 <HAL_RCC_OscConfig+0x934>)
 80015f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80015fa:	2102      	movs	r1, #2
 80015fc:	6019      	str	r1, [r3, #0]
 80015fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001602:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	fa93 f1a3 	rbit	r1, r3
 800160c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001610:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001614:	6019      	str	r1, [r3, #0]
  return result;
 8001616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800161a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	fab3 f383 	clz	r3, r3
 8001624:	b2db      	uxtb	r3, r3
 8001626:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800162a:	b2db      	uxtb	r3, r3
 800162c:	f003 031f 	and.w	r3, r3, #31
 8001630:	2101      	movs	r1, #1
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	4013      	ands	r3, r2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d197      	bne.n	800156c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800163c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001640:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 81a1 	beq.w	8001994 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001658:	4b26      	ldr	r3, [pc, #152]	@ (80016f4 <HAL_RCC_OscConfig+0x934>)
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d116      	bne.n	8001692 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001664:	4b23      	ldr	r3, [pc, #140]	@ (80016f4 <HAL_RCC_OscConfig+0x934>)
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	4a22      	ldr	r2, [pc, #136]	@ (80016f4 <HAL_RCC_OscConfig+0x934>)
 800166a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800166e:	61d3      	str	r3, [r2, #28]
 8001670:	4b20      	ldr	r3, [pc, #128]	@ (80016f4 <HAL_RCC_OscConfig+0x934>)
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800167c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001686:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800168a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800168c:	2301      	movs	r3, #1
 800168e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001692:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <HAL_RCC_OscConfig+0x93c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800169a:	2b00      	cmp	r3, #0
 800169c:	d11a      	bne.n	80016d4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800169e:	4b17      	ldr	r3, [pc, #92]	@ (80016fc <HAL_RCC_OscConfig+0x93c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a16      	ldr	r2, [pc, #88]	@ (80016fc <HAL_RCC_OscConfig+0x93c>)
 80016a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016aa:	f7fe ffa3 	bl	80005f4 <HAL_GetTick>
 80016ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b2:	e009      	b.n	80016c8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b4:	f7fe ff9e 	bl	80005f4 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b64      	cmp	r3, #100	@ 0x64
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e3b1      	b.n	8001e2c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c8:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <HAL_RCC_OscConfig+0x93c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0ef      	beq.n	80016b4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d10d      	bne.n	8001700 <HAL_RCC_OscConfig+0x940>
 80016e4:	4b03      	ldr	r3, [pc, #12]	@ (80016f4 <HAL_RCC_OscConfig+0x934>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	4a02      	ldr	r2, [pc, #8]	@ (80016f4 <HAL_RCC_OscConfig+0x934>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6213      	str	r3, [r2, #32]
 80016f0:	e03c      	b.n	800176c <HAL_RCC_OscConfig+0x9ac>
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000
 80016f8:	10908120 	.word	0x10908120
 80016fc:	40007000 	.word	0x40007000
 8001700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001704:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d10c      	bne.n	800172a <HAL_RCC_OscConfig+0x96a>
 8001710:	4bc1      	ldr	r3, [pc, #772]	@ (8001a18 <HAL_RCC_OscConfig+0xc58>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	4ac0      	ldr	r2, [pc, #768]	@ (8001a18 <HAL_RCC_OscConfig+0xc58>)
 8001716:	f023 0301 	bic.w	r3, r3, #1
 800171a:	6213      	str	r3, [r2, #32]
 800171c:	4bbe      	ldr	r3, [pc, #760]	@ (8001a18 <HAL_RCC_OscConfig+0xc58>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	4abd      	ldr	r2, [pc, #756]	@ (8001a18 <HAL_RCC_OscConfig+0xc58>)
 8001722:	f023 0304 	bic.w	r3, r3, #4
 8001726:	6213      	str	r3, [r2, #32]
 8001728:	e020      	b.n	800176c <HAL_RCC_OscConfig+0x9ac>
 800172a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800172e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b05      	cmp	r3, #5
 8001738:	d10c      	bne.n	8001754 <HAL_RCC_OscConfig+0x994>
 800173a:	4bb7      	ldr	r3, [pc, #732]	@ (8001a18 <HAL_RCC_OscConfig+0xc58>)
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	4ab6      	ldr	r2, [pc, #728]	@ (8001a18 <HAL_RCC_OscConfig+0xc58>)
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	6213      	str	r3, [r2, #32]
 8001746:	4bb4      	ldr	r3, [pc, #720]	@ (8001a18 <HAL_RCC_OscConfig+0xc58>)
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	4ab3      	ldr	r2, [pc, #716]	@ (8001a18 <HAL_RCC_OscConfig+0xc58>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6213      	str	r3, [r2, #32]
 8001752:	e00b      	b.n	800176c <HAL_RCC_OscConfig+0x9ac>
 8001754:	4bb0      	ldr	r3, [pc, #704]	@ (8001a18 <HAL_RCC_OscConfig+0xc58>)
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	4aaf      	ldr	r2, [pc, #700]	@ (8001a18 <HAL_RCC_OscConfig+0xc58>)
 800175a:	f023 0301 	bic.w	r3, r3, #1
 800175e:	6213      	str	r3, [r2, #32]
 8001760:	4bad      	ldr	r3, [pc, #692]	@ (8001a18 <HAL_RCC_OscConfig+0xc58>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	4aac      	ldr	r2, [pc, #688]	@ (8001a18 <HAL_RCC_OscConfig+0xc58>)
 8001766:	f023 0304 	bic.w	r3, r3, #4
 800176a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800176c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001770:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 8081 	beq.w	8001880 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177e:	f7fe ff39 	bl	80005f4 <HAL_GetTick>
 8001782:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001786:	e00b      	b.n	80017a0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001788:	f7fe ff34 	bl	80005f4 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001798:	4293      	cmp	r3, r2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e345      	b.n	8001e2c <HAL_RCC_OscConfig+0x106c>
 80017a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80017a8:	2202      	movs	r2, #2
 80017aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	fa93 f2a3 	rbit	r2, r3
 80017ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017be:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80017cc:	2202      	movs	r2, #2
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	fa93 f2a3 	rbit	r2, r3
 80017de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80017e6:	601a      	str	r2, [r3, #0]
  return result;
 80017e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ec:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80017f0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f2:	fab3 f383 	clz	r3, r3
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	095b      	lsrs	r3, r3, #5
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d102      	bne.n	800180c <HAL_RCC_OscConfig+0xa4c>
 8001806:	4b84      	ldr	r3, [pc, #528]	@ (8001a18 <HAL_RCC_OscConfig+0xc58>)
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	e013      	b.n	8001834 <HAL_RCC_OscConfig+0xa74>
 800180c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001810:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001814:	2202      	movs	r2, #2
 8001816:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800181c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	fa93 f2a3 	rbit	r2, r3
 8001826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800182a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	4b79      	ldr	r3, [pc, #484]	@ (8001a18 <HAL_RCC_OscConfig+0xc58>)
 8001832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001834:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001838:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800183c:	2102      	movs	r1, #2
 800183e:	6011      	str	r1, [r2, #0]
 8001840:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001844:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	fa92 f1a2 	rbit	r1, r2
 800184e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001852:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001856:	6011      	str	r1, [r2, #0]
  return result;
 8001858:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800185c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	fab2 f282 	clz	r2, r2
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	f002 021f 	and.w	r2, r2, #31
 8001872:	2101      	movs	r1, #1
 8001874:	fa01 f202 	lsl.w	r2, r1, r2
 8001878:	4013      	ands	r3, r2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d084      	beq.n	8001788 <HAL_RCC_OscConfig+0x9c8>
 800187e:	e07f      	b.n	8001980 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001880:	f7fe feb8 	bl	80005f4 <HAL_GetTick>
 8001884:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001888:	e00b      	b.n	80018a2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800188a:	f7fe feb3 	bl	80005f4 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e2c4      	b.n	8001e2c <HAL_RCC_OscConfig+0x106c>
 80018a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80018aa:	2202      	movs	r2, #2
 80018ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	fa93 f2a3 	rbit	r2, r3
 80018bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ca:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80018ce:	2202      	movs	r2, #2
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	fa93 f2a3 	rbit	r2, r3
 80018e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018e8:	601a      	str	r2, [r3, #0]
  return result;
 80018ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ee:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f4:	fab3 f383 	clz	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	f043 0302 	orr.w	r3, r3, #2
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d102      	bne.n	800190e <HAL_RCC_OscConfig+0xb4e>
 8001908:	4b43      	ldr	r3, [pc, #268]	@ (8001a18 <HAL_RCC_OscConfig+0xc58>)
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	e013      	b.n	8001936 <HAL_RCC_OscConfig+0xb76>
 800190e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001912:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001916:	2202      	movs	r2, #2
 8001918:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800191e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	fa93 f2a3 	rbit	r2, r3
 8001928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800192c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	4b39      	ldr	r3, [pc, #228]	@ (8001a18 <HAL_RCC_OscConfig+0xc58>)
 8001934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001936:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800193a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800193e:	2102      	movs	r1, #2
 8001940:	6011      	str	r1, [r2, #0]
 8001942:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001946:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	fa92 f1a2 	rbit	r1, r2
 8001950:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001954:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001958:	6011      	str	r1, [r2, #0]
  return result;
 800195a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800195e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	fab2 f282 	clz	r2, r2
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	f002 021f 	and.w	r2, r2, #31
 8001974:	2101      	movs	r1, #1
 8001976:	fa01 f202 	lsl.w	r2, r1, r2
 800197a:	4013      	ands	r3, r2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d184      	bne.n	800188a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001980:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001984:	2b01      	cmp	r3, #1
 8001986:	d105      	bne.n	8001994 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001988:	4b23      	ldr	r3, [pc, #140]	@ (8001a18 <HAL_RCC_OscConfig+0xc58>)
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	4a22      	ldr	r2, [pc, #136]	@ (8001a18 <HAL_RCC_OscConfig+0xc58>)
 800198e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001992:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001998:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 8242 	beq.w	8001e2a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a18 <HAL_RCC_OscConfig+0xc58>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	f000 8213 	beq.w	8001dda <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	f040 8162 	bne.w	8001c8a <HAL_RCC_OscConfig+0xeca>
 80019c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ca:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80019ce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	fa93 f2a3 	rbit	r2, r3
 80019e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80019ea:	601a      	str	r2, [r3, #0]
  return result;
 80019ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80019f4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f6:	fab3 f383 	clz	r3, r3
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a00:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	461a      	mov	r2, r3
 8001a08:	2300      	movs	r3, #0
 8001a0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0c:	f7fe fdf2 	bl	80005f4 <HAL_GetTick>
 8001a10:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a14:	e00c      	b.n	8001a30 <HAL_RCC_OscConfig+0xc70>
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7fe fdea 	bl	80005f4 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e1fd      	b.n	8001e2c <HAL_RCC_OscConfig+0x106c>
 8001a30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a34:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a42:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	fa93 f2a3 	rbit	r2, r3
 8001a4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a50:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a54:	601a      	str	r2, [r3, #0]
  return result;
 8001a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a5a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a5e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a60:	fab3 f383 	clz	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d102      	bne.n	8001a7a <HAL_RCC_OscConfig+0xcba>
 8001a74:	4bb0      	ldr	r3, [pc, #704]	@ (8001d38 <HAL_RCC_OscConfig+0xf78>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	e027      	b.n	8001aca <HAL_RCC_OscConfig+0xd0a>
 8001a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a7e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a82:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a8c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	fa93 f2a3 	rbit	r2, r3
 8001a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a9a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001aa8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	fa93 f2a3 	rbit	r2, r3
 8001abc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	4b9c      	ldr	r3, [pc, #624]	@ (8001d38 <HAL_RCC_OscConfig+0xf78>)
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ace:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001ad2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001ad6:	6011      	str	r1, [r2, #0]
 8001ad8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001adc:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	fa92 f1a2 	rbit	r1, r2
 8001ae6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001aea:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001aee:	6011      	str	r1, [r2, #0]
  return result;
 8001af0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001af4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	fab2 f282 	clz	r2, r2
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	f042 0220 	orr.w	r2, r2, #32
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	f002 021f 	and.w	r2, r2, #31
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d182      	bne.n	8001a1c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b16:	4b88      	ldr	r3, [pc, #544]	@ (8001d38 <HAL_RCC_OscConfig+0xf78>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	430b      	orrs	r3, r1
 8001b38:	497f      	ldr	r1, [pc, #508]	@ (8001d38 <HAL_RCC_OscConfig+0xf78>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
 8001b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b42:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001b46:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b50:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	fa93 f2a3 	rbit	r2, r3
 8001b5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b5e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b62:	601a      	str	r2, [r3, #0]
  return result;
 8001b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b68:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b6c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b6e:	fab3 f383 	clz	r3, r3
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b78:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	461a      	mov	r2, r3
 8001b80:	2301      	movs	r3, #1
 8001b82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7fe fd36 	bl	80005f4 <HAL_GetTick>
 8001b88:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b8c:	e009      	b.n	8001ba2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b8e:	f7fe fd31 	bl	80005f4 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e144      	b.n	8001e2c <HAL_RCC_OscConfig+0x106c>
 8001ba2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001baa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	fa93 f2a3 	rbit	r2, r3
 8001bbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001bc6:	601a      	str	r2, [r3, #0]
  return result;
 8001bc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bcc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001bd0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd2:	fab3 f383 	clz	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	095b      	lsrs	r3, r3, #5
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d102      	bne.n	8001bec <HAL_RCC_OscConfig+0xe2c>
 8001be6:	4b54      	ldr	r3, [pc, #336]	@ (8001d38 <HAL_RCC_OscConfig+0xf78>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	e027      	b.n	8001c3c <HAL_RCC_OscConfig+0xe7c>
 8001bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001bf4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfe:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	fa93 f2a3 	rbit	r2, r3
 8001c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c0c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c16:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001c1a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c24:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	fa93 f2a3 	rbit	r2, r3
 8001c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c32:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	4b3f      	ldr	r3, [pc, #252]	@ (8001d38 <HAL_RCC_OscConfig+0xf78>)
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c40:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001c44:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c48:	6011      	str	r1, [r2, #0]
 8001c4a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c4e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	fa92 f1a2 	rbit	r1, r2
 8001c58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c5c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001c60:	6011      	str	r1, [r2, #0]
  return result;
 8001c62:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c66:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	fab2 f282 	clz	r2, r2
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	f042 0220 	orr.w	r2, r2, #32
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	f002 021f 	and.w	r2, r2, #31
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d082      	beq.n	8001b8e <HAL_RCC_OscConfig+0xdce>
 8001c88:	e0cf      	b.n	8001e2a <HAL_RCC_OscConfig+0x106a>
 8001c8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c8e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001c92:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	fa93 f2a3 	rbit	r2, r3
 8001ca6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001caa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001cae:	601a      	str	r2, [r3, #0]
  return result;
 8001cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001cb8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cba:	fab3 f383 	clz	r3, r3
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001cc4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	461a      	mov	r2, r3
 8001ccc:	2300      	movs	r3, #0
 8001cce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7fe fc90 	bl	80005f4 <HAL_GetTick>
 8001cd4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd8:	e009      	b.n	8001cee <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cda:	f7fe fc8b 	bl	80005f4 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e09e      	b.n	8001e2c <HAL_RCC_OscConfig+0x106c>
 8001cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001cf6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d00:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	fa93 f2a3 	rbit	r2, r3
 8001d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d0e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001d12:	601a      	str	r2, [r3, #0]
  return result;
 8001d14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d18:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001d1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	095b      	lsrs	r3, r3, #5
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d104      	bne.n	8001d3c <HAL_RCC_OscConfig+0xf7c>
 8001d32:	4b01      	ldr	r3, [pc, #4]	@ (8001d38 <HAL_RCC_OscConfig+0xf78>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	e029      	b.n	8001d8c <HAL_RCC_OscConfig+0xfcc>
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d40:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001d44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d4e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	fa93 f2a3 	rbit	r2, r3
 8001d58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d5c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d66:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001d6a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d74:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	fa93 f2a3 	rbit	r2, r3
 8001d7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d82:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	4b2b      	ldr	r3, [pc, #172]	@ (8001e38 <HAL_RCC_OscConfig+0x1078>)
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d90:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001d94:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001d98:	6011      	str	r1, [r2, #0]
 8001d9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d9e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	fa92 f1a2 	rbit	r1, r2
 8001da8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dac:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001db0:	6011      	str	r1, [r2, #0]
  return result;
 8001db2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001db6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	fab2 f282 	clz	r2, r2
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	f042 0220 	orr.w	r2, r2, #32
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	f002 021f 	and.w	r2, r2, #31
 8001dcc:	2101      	movs	r1, #1
 8001dce:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d180      	bne.n	8001cda <HAL_RCC_OscConfig+0xf1a>
 8001dd8:	e027      	b.n	8001e2a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e01e      	b.n	8001e2c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dee:	4b12      	ldr	r3, [pc, #72]	@ (8001e38 <HAL_RCC_OscConfig+0x1078>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001df6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001dfa:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d10b      	bne.n	8001e26 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e0e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001e12:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d001      	beq.n	8001e2a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000

08001e3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b09e      	sub	sp, #120	@ 0x78
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e162      	b.n	800211a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e54:	4b90      	ldr	r3, [pc, #576]	@ (8002098 <HAL_RCC_ClockConfig+0x25c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d910      	bls.n	8001e84 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e62:	4b8d      	ldr	r3, [pc, #564]	@ (8002098 <HAL_RCC_ClockConfig+0x25c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 0207 	bic.w	r2, r3, #7
 8001e6a:	498b      	ldr	r1, [pc, #556]	@ (8002098 <HAL_RCC_ClockConfig+0x25c>)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e72:	4b89      	ldr	r3, [pc, #548]	@ (8002098 <HAL_RCC_ClockConfig+0x25c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e14a      	b.n	800211a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d008      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e90:	4b82      	ldr	r3, [pc, #520]	@ (800209c <HAL_RCC_ClockConfig+0x260>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	497f      	ldr	r1, [pc, #508]	@ (800209c <HAL_RCC_ClockConfig+0x260>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 80dc 	beq.w	8002068 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d13c      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xf6>
 8001eb8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ebc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001ec6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d102      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xa6>
 8001edc:	4b6f      	ldr	r3, [pc, #444]	@ (800209c <HAL_RCC_ClockConfig+0x260>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	e00f      	b.n	8001f02 <HAL_RCC_ClockConfig+0xc6>
 8001ee2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ee6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ef0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ef4:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ef6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ef8:	fa93 f3a3 	rbit	r3, r3
 8001efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001efe:	4b67      	ldr	r3, [pc, #412]	@ (800209c <HAL_RCC_ClockConfig+0x260>)
 8001f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f02:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f06:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001f08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001f0a:	fa92 f2a2 	rbit	r2, r2
 8001f0e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001f10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001f12:	fab2 f282 	clz	r2, r2
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	f042 0220 	orr.w	r2, r2, #32
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	f002 021f 	and.w	r2, r2, #31
 8001f22:	2101      	movs	r1, #1
 8001f24:	fa01 f202 	lsl.w	r2, r1, r2
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d17b      	bne.n	8002026 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e0f3      	b.n	800211a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d13c      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x178>
 8001f3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f3e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f42:	fa93 f3a3 	rbit	r3, r3
 8001f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001f48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4a:	fab3 f383 	clz	r3, r3
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	095b      	lsrs	r3, r3, #5
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d102      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x128>
 8001f5e:	4b4f      	ldr	r3, [pc, #316]	@ (800209c <HAL_RCC_ClockConfig+0x260>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	e00f      	b.n	8001f84 <HAL_RCC_ClockConfig+0x148>
 8001f64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f68:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f76:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f80:	4b46      	ldr	r3, [pc, #280]	@ (800209c <HAL_RCC_ClockConfig+0x260>)
 8001f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f88:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001f8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f8c:	fa92 f2a2 	rbit	r2, r2
 8001f90:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001f92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f94:	fab2 f282 	clz	r2, r2
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	f042 0220 	orr.w	r2, r2, #32
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	f002 021f 	and.w	r2, r2, #31
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d13a      	bne.n	8002026 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0b2      	b.n	800211a <HAL_RCC_ClockConfig+0x2de>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc2:	fab3 f383 	clz	r3, r3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	095b      	lsrs	r3, r3, #5
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d102      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x1a0>
 8001fd6:	4b31      	ldr	r3, [pc, #196]	@ (800209c <HAL_RCC_ClockConfig+0x260>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	e00d      	b.n	8001ff8 <HAL_RCC_ClockConfig+0x1bc>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fe8:	2302      	movs	r3, #2
 8001fea:	623b      	str	r3, [r7, #32]
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	61fb      	str	r3, [r7, #28]
 8001ff4:	4b29      	ldr	r3, [pc, #164]	@ (800209c <HAL_RCC_ClockConfig+0x260>)
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	61ba      	str	r2, [r7, #24]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	fa92 f2a2 	rbit	r2, r2
 8002002:	617a      	str	r2, [r7, #20]
  return result;
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	fab2 f282 	clz	r2, r2
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	f042 0220 	orr.w	r2, r2, #32
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	f002 021f 	and.w	r2, r2, #31
 8002016:	2101      	movs	r1, #1
 8002018:	fa01 f202 	lsl.w	r2, r1, r2
 800201c:	4013      	ands	r3, r2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e079      	b.n	800211a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002026:	4b1d      	ldr	r3, [pc, #116]	@ (800209c <HAL_RCC_ClockConfig+0x260>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f023 0203 	bic.w	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	491a      	ldr	r1, [pc, #104]	@ (800209c <HAL_RCC_ClockConfig+0x260>)
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002038:	f7fe fadc 	bl	80005f4 <HAL_GetTick>
 800203c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203e:	e00a      	b.n	8002056 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002040:	f7fe fad8 	bl	80005f4 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e061      	b.n	800211a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	4b11      	ldr	r3, [pc, #68]	@ (800209c <HAL_RCC_ClockConfig+0x260>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 020c 	and.w	r2, r3, #12
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	429a      	cmp	r2, r3
 8002066:	d1eb      	bne.n	8002040 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002068:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <HAL_RCC_ClockConfig+0x25c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d214      	bcs.n	80020a0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b08      	ldr	r3, [pc, #32]	@ (8002098 <HAL_RCC_ClockConfig+0x25c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 0207 	bic.w	r2, r3, #7
 800207e:	4906      	ldr	r1, [pc, #24]	@ (8002098 <HAL_RCC_ClockConfig+0x25c>)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b04      	ldr	r3, [pc, #16]	@ (8002098 <HAL_RCC_ClockConfig+0x25c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e040      	b.n	800211a <HAL_RCC_ClockConfig+0x2de>
 8002098:	40022000 	.word	0x40022000
 800209c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002124 <HAL_RCC_ClockConfig+0x2e8>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	491a      	ldr	r1, [pc, #104]	@ (8002124 <HAL_RCC_ClockConfig+0x2e8>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d009      	beq.n	80020de <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ca:	4b16      	ldr	r3, [pc, #88]	@ (8002124 <HAL_RCC_ClockConfig+0x2e8>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4912      	ldr	r1, [pc, #72]	@ (8002124 <HAL_RCC_ClockConfig+0x2e8>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020de:	f000 f829 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 80020e2:	4601      	mov	r1, r0
 80020e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002124 <HAL_RCC_ClockConfig+0x2e8>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020ec:	22f0      	movs	r2, #240	@ 0xf0
 80020ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	fa92 f2a2 	rbit	r2, r2
 80020f6:	60fa      	str	r2, [r7, #12]
  return result;
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	fab2 f282 	clz	r2, r2
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	40d3      	lsrs	r3, r2
 8002102:	4a09      	ldr	r2, [pc, #36]	@ (8002128 <HAL_RCC_ClockConfig+0x2ec>)
 8002104:	5cd3      	ldrb	r3, [r2, r3]
 8002106:	fa21 f303 	lsr.w	r3, r1, r3
 800210a:	4a08      	ldr	r2, [pc, #32]	@ (800212c <HAL_RCC_ClockConfig+0x2f0>)
 800210c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800210e:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <HAL_RCC_ClockConfig+0x2f4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fa2a 	bl	800056c <HAL_InitTick>
  
  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3778      	adds	r7, #120	@ 0x78
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	08002570 	.word	0x08002570
 800212c:	20000000 	.word	0x20000000
 8002130:	20000004 	.word	0x20000004

08002134 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800214e:	4b1e      	ldr	r3, [pc, #120]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 030c 	and.w	r3, r3, #12
 800215a:	2b04      	cmp	r3, #4
 800215c:	d002      	beq.n	8002164 <HAL_RCC_GetSysClockFreq+0x30>
 800215e:	2b08      	cmp	r3, #8
 8002160:	d003      	beq.n	800216a <HAL_RCC_GetSysClockFreq+0x36>
 8002162:	e026      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002164:	4b19      	ldr	r3, [pc, #100]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x98>)
 8002166:	613b      	str	r3, [r7, #16]
      break;
 8002168:	e026      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	0c9b      	lsrs	r3, r3, #18
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	4a17      	ldr	r2, [pc, #92]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002174:	5cd3      	ldrb	r3, [r2, r3]
 8002176:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002178:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x94>)
 800217a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	4a14      	ldr	r2, [pc, #80]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002182:	5cd3      	ldrb	r3, [r2, r3]
 8002184:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002190:	4a0e      	ldr	r2, [pc, #56]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x98>)
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	fbb2 f2f3 	udiv	r2, r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	fb02 f303 	mul.w	r3, r2, r3
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	e004      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a0c      	ldr	r2, [pc, #48]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	613b      	str	r3, [r7, #16]
      break;
 80021b0:	e002      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021b2:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x98>)
 80021b4:	613b      	str	r3, [r7, #16]
      break;
 80021b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021b8:	693b      	ldr	r3, [r7, #16]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	371c      	adds	r7, #28
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	007a1200 	.word	0x007a1200
 80021d0:	08002580 	.word	0x08002580
 80021d4:	08002590 	.word	0x08002590
 80021d8:	003d0900 	.word	0x003d0900

080021dc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b092      	sub	sp, #72	@ 0x48
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 80d4 	beq.w	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002200:	4b4e      	ldr	r3, [pc, #312]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10e      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220c:	4b4b      	ldr	r3, [pc, #300]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	4a4a      	ldr	r2, [pc, #296]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002212:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002216:	61d3      	str	r3, [r2, #28]
 8002218:	4b48      	ldr	r3, [pc, #288]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002224:	2301      	movs	r3, #1
 8002226:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222a:	4b45      	ldr	r3, [pc, #276]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d118      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002236:	4b42      	ldr	r3, [pc, #264]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a41      	ldr	r2, [pc, #260]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800223c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002240:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002242:	f7fe f9d7 	bl	80005f4 <HAL_GetTick>
 8002246:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002248:	e008      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224a:	f7fe f9d3 	bl	80005f4 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b64      	cmp	r3, #100	@ 0x64
 8002256:	d901      	bls.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e14b      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225c:	4b38      	ldr	r3, [pc, #224]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002268:	4b34      	ldr	r3, [pc, #208]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002270:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 8084 	beq.w	8002382 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002282:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002284:	429a      	cmp	r2, r3
 8002286:	d07c      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002288:	4b2c      	ldr	r3, [pc, #176]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002290:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002292:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002296:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80022a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022a2:	fab3 f383 	clz	r3, r3
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b26      	ldr	r3, [pc, #152]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	461a      	mov	r2, r3
 80022b2:	2301      	movs	r3, #1
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80022c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	461a      	mov	r2, r3
 80022d6:	2300      	movs	r3, #0
 80022d8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022da:	4a18      	ldr	r2, [pc, #96]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022de:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d04b      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ea:	f7fe f983 	bl	80005f4 <HAL_GetTick>
 80022ee:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f0:	e00a      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7fe f97f 	bl	80005f4 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e0f5      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002308:	2302      	movs	r3, #2
 800230a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
 8002314:	2302      	movs	r3, #2
 8002316:	623b      	str	r3, [r7, #32]
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	61fb      	str	r3, [r7, #28]
  return result;
 8002320:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	095b      	lsrs	r3, r3, #5
 800232a:	b2db      	uxtb	r3, r3
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d108      	bne.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002336:	4b01      	ldr	r3, [pc, #4]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	e00d      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800233c:	40021000 	.word	0x40021000
 8002340:	40007000 	.word	0x40007000
 8002344:	10908100 	.word	0x10908100
 8002348:	2302      	movs	r3, #2
 800234a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	4b69      	ldr	r3, [pc, #420]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002358:	2202      	movs	r2, #2
 800235a:	613a      	str	r2, [r7, #16]
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	fa92 f2a2 	rbit	r2, r2
 8002362:	60fa      	str	r2, [r7, #12]
  return result;
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	fab2 f282 	clz	r2, r2
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	f002 021f 	and.w	r2, r2, #31
 8002376:	2101      	movs	r1, #1
 8002378:	fa01 f202 	lsl.w	r2, r1, r2
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0b7      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002382:	4b5e      	ldr	r3, [pc, #376]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	495b      	ldr	r1, [pc, #364]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002390:	4313      	orrs	r3, r2
 8002392:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002394:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002398:	2b01      	cmp	r3, #1
 800239a:	d105      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239c:	4b57      	ldr	r3, [pc, #348]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	4a56      	ldr	r2, [pc, #344]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80023a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023b4:	4b51      	ldr	r3, [pc, #324]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80023b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b8:	f023 0203 	bic.w	r2, r3, #3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	494e      	ldr	r1, [pc, #312]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0320 	and.w	r3, r3, #32
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d008      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023d2:	4b4a      	ldr	r3, [pc, #296]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	f023 0210 	bic.w	r2, r3, #16
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	4947      	ldr	r1, [pc, #284]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80023f0:	4b42      	ldr	r3, [pc, #264]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fc:	493f      	ldr	r1, [pc, #252]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800240a:	2b00      	cmp	r3, #0
 800240c:	d008      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800240e:	4b3b      	ldr	r3, [pc, #236]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002412:	f023 0220 	bic.w	r2, r3, #32
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	4938      	ldr	r1, [pc, #224]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800241c:	4313      	orrs	r3, r2
 800241e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800242c:	4b33      	ldr	r3, [pc, #204]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002430:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	4930      	ldr	r1, [pc, #192]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800243a:	4313      	orrs	r3, r2
 800243c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002446:	2b00      	cmp	r3, #0
 8002448:	d008      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800244a:	4b2c      	ldr	r3, [pc, #176]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	4929      	ldr	r1, [pc, #164]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002458:	4313      	orrs	r3, r2
 800245a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002468:	4b24      	ldr	r3, [pc, #144]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800246a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	4921      	ldr	r1, [pc, #132]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002476:	4313      	orrs	r3, r2
 8002478:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002486:	4b1d      	ldr	r3, [pc, #116]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	491a      	ldr	r1, [pc, #104]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002494:	4313      	orrs	r3, r2
 8002496:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80024a4:	4b15      	ldr	r3, [pc, #84]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b0:	4912      	ldr	r1, [pc, #72]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80024c2:	4b0e      	ldr	r3, [pc, #56]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ce:	490b      	ldr	r1, [pc, #44]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80024e0:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ec:	4903      	ldr	r1, [pc, #12]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3748      	adds	r7, #72	@ 0x48
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40021000 	.word	0x40021000

08002500 <memset>:
 8002500:	4402      	add	r2, r0
 8002502:	4603      	mov	r3, r0
 8002504:	4293      	cmp	r3, r2
 8002506:	d100      	bne.n	800250a <memset+0xa>
 8002508:	4770      	bx	lr
 800250a:	f803 1b01 	strb.w	r1, [r3], #1
 800250e:	e7f9      	b.n	8002504 <memset+0x4>

08002510 <__libc_init_array>:
 8002510:	b570      	push	{r4, r5, r6, lr}
 8002512:	4d0d      	ldr	r5, [pc, #52]	@ (8002548 <__libc_init_array+0x38>)
 8002514:	4c0d      	ldr	r4, [pc, #52]	@ (800254c <__libc_init_array+0x3c>)
 8002516:	1b64      	subs	r4, r4, r5
 8002518:	10a4      	asrs	r4, r4, #2
 800251a:	2600      	movs	r6, #0
 800251c:	42a6      	cmp	r6, r4
 800251e:	d109      	bne.n	8002534 <__libc_init_array+0x24>
 8002520:	4d0b      	ldr	r5, [pc, #44]	@ (8002550 <__libc_init_array+0x40>)
 8002522:	4c0c      	ldr	r4, [pc, #48]	@ (8002554 <__libc_init_array+0x44>)
 8002524:	f000 f818 	bl	8002558 <_init>
 8002528:	1b64      	subs	r4, r4, r5
 800252a:	10a4      	asrs	r4, r4, #2
 800252c:	2600      	movs	r6, #0
 800252e:	42a6      	cmp	r6, r4
 8002530:	d105      	bne.n	800253e <__libc_init_array+0x2e>
 8002532:	bd70      	pop	{r4, r5, r6, pc}
 8002534:	f855 3b04 	ldr.w	r3, [r5], #4
 8002538:	4798      	blx	r3
 800253a:	3601      	adds	r6, #1
 800253c:	e7ee      	b.n	800251c <__libc_init_array+0xc>
 800253e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002542:	4798      	blx	r3
 8002544:	3601      	adds	r6, #1
 8002546:	e7f2      	b.n	800252e <__libc_init_array+0x1e>
 8002548:	080025a0 	.word	0x080025a0
 800254c:	080025a0 	.word	0x080025a0
 8002550:	080025a0 	.word	0x080025a0
 8002554:	080025a4 	.word	0x080025a4

08002558 <_init>:
 8002558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255a:	bf00      	nop
 800255c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800255e:	bc08      	pop	{r3}
 8002560:	469e      	mov	lr, r3
 8002562:	4770      	bx	lr

08002564 <_fini>:
 8002564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002566:	bf00      	nop
 8002568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800256a:	bc08      	pop	{r3}
 800256c:	469e      	mov	lr, r3
 800256e:	4770      	bx	lr
